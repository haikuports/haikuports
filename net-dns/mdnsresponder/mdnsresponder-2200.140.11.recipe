SUMMARY="ZeroConf a.k.a Bonjour a.k.a. mDNS + DNS-SD"
DESCRIPTION="Apple's Open Source DNS Service Discovery Collection

Quick usage guide:

To \"advertize\" Haiku's sshd service:

> mdnsd # if it is not running already.
> dns-sd -R \$(hostname) _ssh \"\" 22

To browse for any services in the local network (doesn't works yet on Haiku, but you can try
the command on your Linux/*BSD of choice):

> dns-sd -lo -B _services._dns-sd._udp.

To browse for services running on the current machine:

> dns-sd -lo -B _services._dns-sd._udp.
"
HOMEPAGE="https://developer.apple.com/bonjour/"
COPYRIGHT="2003-2024 Apple Inc."
LICENSE="
	Apache v2
	BSD (3-clause)
	"
REVISION="1"
SOURCE_URI="https://github.com/apple-oss-distributions/mDNSResponder/archive/mDNSResponder-$portVersion.tar.gz"
CHECKSUM_SHA256="f52963497e8baf650e6640fb5769ffbad7c6e45eea833dec2a0ca86a3ca55928"
SOURCE_DIR="mDNSResponder-mDNSResponder-$portVersion"
PATCHES="mdnsresponder-$portVersion.patchset"

ADDITIONAL_FILES="
	mdnsresponder-finish-setup.sh
	"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

commandBinDir=$binDir
commandSuffix=$secondaryArchSuffix
if [ "$targetArchitecture" = x86_gcc2 ]; then
	commandBinDir=$prefix/bin
	commandSuffix=
fi

# Needed to make sure /var/run/ exists before running cmd:mdnsd (uses it for its PID file)
POST_INSTALL_SCRIPTS="$relativePostInstallDir/mdnsresponder-finish-setup.sh"

# Non critical: cmd:mdnsd needs user "nobody" existing, or it complains about running as root.
PACKAGE_USERS="
	nobody real-name nobody home /var/empty shell /bin/true groups nobody
	"

PACKAGE_GROUPS="
	nobody
	"

PROVIDES="
	mdnsresponder$secondaryArchSuffix = $portVersion
	cmd:mdnsd$commandSuffix
	cmd:dns_sd$commandSuffix
	lib:libdns_sd$secondaryArchSuffix
	lib:libnss_mdnsd$secondaryArchSuffix
	devel:libdns_sd$secondaryArchSuffix
	"

REQUIRES="
	haiku$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
BUILD_PREREQUIRES="
	cmd:gcc$secondaryArchSuffix
	cmd:make
	"

PROVIDES_tools="
	mdnsresponder${secondaryArchSuffix}_tools = $portVersion
	cmd:mDNSClient$commandSuffix
	cmd:mDNSNetMonitor$commandSuffix
	cmd:mDNSProxyResponder$commandSuffix
	cmd:mDNSResponder$commandSuffix
	"
SUMMARY_tools="Stand-alone tools for ZeroConf a.k.a Bonjour a.k.a. mDNS + DNS-SD"
DESCRIPTION_tools="You might need to make sure /bin/mdnsd is NOT running before using these tools.

Quick usage guide:

To \"advertize\" Haiku's sshd service:

> mDNSResponder -v 2 -n \$(hostname) -t '_ssh._tcp.' -p 22
"

REQUIRES_tools="
	haiku$secondaryArchSuffix
	"

BUILD()
{
 	# Parallel builds can fail sometimes (even if rarely), so no $jobArgs here.
	make -C mDNSPosix
}

INSTALL()
{
	install -m 0755 -d $commandBinDir $libDir $manDir/man1 $manDir/man8 $developDir/headers

	# mDNSResponder
	install -m 0755 mDNSPosix/build/prod/mdnsd $commandBinDir
	install -m 0644 mDNSPosix/build/prod/libdns_sd.so $libDir
	install -m 0755 Clients/build/dns-sd $commandBinDir
	install -m 0644 mDNSShared/dns-sd.1 $manDir/man1
	install -m 0644 mDNSShared/mDNSResponder.8 $manDir/man8/mdnsd.8
	install -m 0644 mDNSShared/dns_sd.h $developDir/headers

	# Standalone tools
	install -m 0755 -T mDNSPosix/build/prod/mDNSClientPosix $commandBinDir/mDNSClient
	install -m 0755 mDNSPosix/build/prod/mDNSNetMonitor $commandBinDir
	install -m 0755 -T mDNSPosix/build/prod/mDNSProxyResponderPosix $commandBinDir/mDNSProxyResponder
	install -m 0755 -T mDNSPosix/build/prod/mDNSResponderPosix $commandBinDir/mDNSResponder

	# ToDo: Name Service Switch (needs changes on Haiku's side).
	# install -m 0644 mDNSPosix/build/prod/nss_mdnsd.so.0 $libDir
	# ln -sr $libDir/nss_mdnsd.so.0 $libDir/nss_multicast_dns.so.0
	# install -m 0644 etc/nsswitch.conf $docDir/nsswitch.conf.example

	# Standalone tools package
	packageEntries tools \
		$commandBinDir/mDNSClient \
		$commandBinDir/mDNSNetMonitor \
		$commandBinDir/mDNSProxyResponder \
		$commandBinDir/mDNSResponder

	prepareInstalledDevelLib libdns_sd

	install -Dm 0755 $portDir/additional-files/mdnsresponder-finish-setup.sh \
		$postInstallDir/mdnsresponder-finish-setup.sh

	# ToDo (launch_daemon integration): figure out why the following doesn't works as intended.

#	mkdir -p $dataDir/launch
#
#	echo "target desktop {
#	service mDNSResponder {
#		launch $commandBinDir/mdnsd
#		if not file_exists ~/config/settings/mdnsd_disable_autostart
#		# "if not setting ~/config/settings/mdnsd disable_autostart" instead?
#		no_safemode
#		legacy
#		on network_available
#	}
#}
#" > $dataDir/launch/mDNSResponder
}
