From 96a29e7ae68049e924ae0ca059f4278dcd3c45a7 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Mon, 3 Feb 2025 00:18:29 -0300
Subject: fix references to collections.Callable.

Got moved to collections.abc.Callable in Python 3.10.


diff --git a/src/Resource_Files/plugin_launchers/python/sigil_bs4/builder/_lxml.py b/src/Resource_Files/plugin_launchers/python/sigil_bs4/builder/_lxml.py
index 640f3cb..c7daca1 100644
--- a/src/Resource_Files/plugin_launchers/python/sigil_bs4/builder/_lxml.py
+++ b/src/Resource_Files/plugin_launchers/python/sigil_bs4/builder/_lxml.py
@@ -83,7 +83,7 @@ class LXMLTreeBuilderForXML(TreeBuilder):
         # Use the default parser.
         parser = self.default_parser(encoding)
 
-        if isinstance(parser, collections.Callable):
+        if isinstance(parser, collections.abc.Callable):
             # Instantiate the parser with default arguments
             parser = parser(target=self, strip_cdata=False, encoding=encoding)
         return parser
diff --git a/src/Resource_Files/plugin_launchers/python/sigil_bs4/element.py b/src/Resource_Files/plugin_launchers/python/sigil_bs4/element.py
index efd1141..cc9f630 100644
--- a/src/Resource_Files/plugin_launchers/python/sigil_bs4/element.py
+++ b/src/Resource_Files/plugin_launchers/python/sigil_bs4/element.py
@@ -197,7 +197,7 @@ class PageElement(object):
 
     def format_string(self, s, formatter='minimal'):
         """Format the given string using the given formatter."""
-        if not isinstance(formatter, collections.Callable):
+        if not isinstance(formatter, collections.abc.Callable):
             formatter = self._formatter_for_name(formatter)
         if formatter is None:
             output = s
@@ -1128,7 +1128,7 @@ class Tag(PageElement):
 
         # First off, turn a string formatter into a function. This
         # will stop the lookup from happening over and over again.
-        if not isinstance(formatter, collections.Callable):
+        if not isinstance(formatter, collections.abc.Callable):
             formatter = self._formatter_for_name(formatter)
 
         attrs = []
@@ -1232,7 +1232,7 @@ class Tag(PageElement):
         """
         # First off, turn a string formatter into a function. This
         # will stop the lookup from happening over and over again.
-        if not isinstance(formatter, collections.Callable):
+        if not isinstance(formatter, collections.abc.Callable):
             formatter = self._formatter_for_name(formatter)
 
         pretty_print = (indent_level is not None)
@@ -1258,7 +1258,7 @@ class Tag(PageElement):
 
         # First off, turn a string formatter into a function. This
         # will stop the lookup from happening over and over again.
-        if not isinstance(formatter, collections.Callable):
+        if not isinstance(formatter, collections.abc.Callable):
             formatter = self._formatter_for_name(formatter)
 
         is_xmlparent = self.name.lower() in EBOOK_XML_PARENT_TAGS
@@ -1336,7 +1336,7 @@ class Tag(PageElement):
         """
         # First off, turn a string formatter into a function. This
         # will stop the lookup from happening over and over again.
-        if not isinstance(formatter, collections.Callable):
+        if not isinstance(formatter, collections.abc.Callable):
             formatter = self._formatter_for_name(formatter)
 
         is_xmlparent = self.name.lower() in EBOOK_XML_PARENT_TAGS
@@ -1359,7 +1359,7 @@ class Tag(PageElement):
     def serialize_xhtml(self, eventual_encoding=DEFAULT_OUTPUT_ENCODING, formatter="minimal"):
         # First off, turn a string formatter into a function. This
         # will stop the lookup from happening over and over again.
-        if not isinstance(formatter, collections.Callable):
+        if not isinstance(formatter, collections.abc.Callable):
             formatter = self._formatter_for_name(formatter)
 
         prefix = ''
@@ -1422,7 +1422,7 @@ class Tag(PageElement):
 
         # First off, turn a string formatter into a function. This
         # will stop the lookup from happening over and over again.
-        if not isinstance(formatter, collections.Callable):
+        if not isinstance(formatter, collections.abc.Callable):
             formatter = self._formatter_for_name(formatter)
 
         s = []
@@ -1446,7 +1446,7 @@ class Tag(PageElement):
 
         # First off, turn a string formatter into a function. This
         # will stop the lookup from happening over and over again.
-        if not isinstance(formatter, collections.Callable):
+        if not isinstance(formatter, collections.abc.Callable):
             formatter = self._formatter_for_name(formatter)
 
         is_structural = self.name in STRUCTURAL_TAGS
@@ -1541,7 +1541,7 @@ class Tag(PageElement):
         """
         # First off, turn a string formatter into a function. This
         # will stop the lookup from happening over and over again.
-        if not isinstance(formatter, collections.Callable):
+        if not isinstance(formatter, collections.abc.Callable):
             formatter = self._formatter_for_name(formatter)
 
         is_structural = self.name in STRUCTURAL_TAGS
@@ -1971,7 +1971,7 @@ class SoupStrainer(object):
     def _normalize_search_value(self, value):
         # Leave it alone if it's a Unicode string, a callable, a
         # regular expression, a boolean, or None.
-        if (isinstance(value, text_type) or isinstance(value, collections.Callable) or hasattr(value, 'match')
+        if (isinstance(value, text_type) or isinstance(value, collections.abc.Callable) or hasattr(value, 'match')
             or isinstance(value, bool) or value is None):
             return value
 
@@ -2011,7 +2011,7 @@ class SoupStrainer(object):
             markup = markup_name
             markup_attrs = markup
         call_function_with_tag_data = (
-            isinstance(self.name, collections.Callable)
+            isinstance(self.name, collections.abc.Callable)
             and not isinstance(markup_name, Tag))
 
         if ((not self.name)
@@ -2097,7 +2097,7 @@ class SoupStrainer(object):
             # True matches any non-None value.
             return markup is not None
 
-        if isinstance(match_against, collections.Callable):
+        if isinstance(match_against, collections.abc.Callable):
             return match_against(markup)
 
         # Custom callables take the tag as an argument, but all
-- 
2.45.2

