From 15cf435ad31fd93057f1884fdcf557f2af94c7a8 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@pulkomandy.tk>
Date: Sun, 10 Mar 2019 13:45:11 +0100
Subject: Fix build on x86 32bit

Conflict of macro name with a struct field in one of our headers.

diff --git a/psi/estack.h b/psi/estack.h
index 42a5c0a..786787d 100644
--- a/psi/estack.h
+++ b/psi/estack.h
@@ -18,6 +18,8 @@
 #ifndef estack_INCLUDED
 #  define estack_INCLUDED
 
+#include <signal.h> /* before we #define esp, which prevents it from building */
+
 #include "iestack.h"
 #include "icstate.h"		/* for access to exec_stack */
 
-- 
2.37.3


From d904d6367b73e55d1ae08cd95bcb3bfcc34ee3d7 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@pulkomandy.tk>
Date: Wed, 13 Mar 2019 21:14:28 +0100
Subject: fix building shared libs


diff --git a/configure.ac b/configure.ac
index 36b51f5..3312477 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3031,7 +3031,7 @@ case $host in
       GPDL_SONAME_MAJOR="lib\$(GPDL${libname3}"
       GPDL_SONAME_MAJOR_MINOR="cyg\$(GPDL${libname2}"
     ;;
-    *bsd*)
+    *bsd*|*haiku*)
       DYNAMIC_CFLAGS="-fPIC $DYNAMIC_CFLAGS"
       GS_DYNAMIC_LDFLAGS="-shared -Wl,\$(LD_SET_DT_SONAME)\$(LDFLAGS_SO_PREFIX)\$(GS_SONAME_MAJOR)"
       PCL_DYNAMIC_LDFLAGS="-shared -Wl,\$(LD_SET_DT_SONAME)\$(LDFLAGS_SO_PREFIX)\$(PCL_SONAME_MAJOR)"
-- 
2.37.3


From 172e49fed7566e77853a377495d39e4ab0c08a9a Mon Sep 17 00:00:00 2001
From: Robin Watts <Robin.Watts@artifex.com>
Date: Fri, 1 Oct 2021 12:44:44 +0100
Subject: Bug 704405: Fix typo in non-forked lcms2 code.


diff --git a/base/gsicc_lcms2.c b/base/gsicc_lcms2.c
index ccf1d70..9badb6d 100644
--- a/base/gsicc_lcms2.c
+++ b/base/gsicc_lcms2.c
@@ -462,7 +462,7 @@ int
 gscms_transform_color(gx_device *dev, gsicc_link_t *icclink, void *inputcolor,
                              void *outputcolor, int num_bytes)
 {
-    return gscms_transformm_color_const(dev, icclink, inputcolor, outputcolor, num_bytes);
+    return gscms_transform_color_const(dev, icclink, inputcolor, outputcolor, num_bytes);
 }
 
 int
-- 
2.37.3


From cddfe4fd3a9ea86cfc741d756feb56621b570064 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Joachim=20Mairb=C3=B6ck?= <j.mairboeck@gmail.com>
Date: Sun, 31 Oct 2021 22:03:15 +0100
Subject: fix looking for dlopen in libdl only


diff --git a/configure.ac b/configure.ac
index 3312477..f627cbf 100644
--- a/configure.ac
+++ b/configure.ac
@@ -664,8 +664,8 @@ if test "x$ac_cv_header_inttypes_h" = "xyes"; then
         GCFLAGS="$GCFLAGS -DHAVE_INTTYPES_H=1"
 fi
 
-AC_CHECK_LIB([dl], [dlopen],
-             [AC_CHECK_HEADER([dlfcn.h], [GCFLAGS="$GCFLAGS -DHAVE_LIBDL=1";LIBS="-ldl $LIBS"])]
+AC_SEARCH_LIBS([dlopen], [dl],
+             [AC_CHECK_HEADER([dlfcn.h], [GCFLAGS="$GCFLAGS -DHAVE_LIBDL=1"])]
               )
 
 large_color_index=1
-- 
2.37.3


From 142feac4adcaf527d6e91d146391ffc24647b5cb Mon Sep 17 00:00:00 2001
From: Anarchos <sylvain_kerjean@hotmail.com>
Date: Wed, 2 Mar 2022 21:15:32 +0100
Subject: debug flags for haiku


diff --git a/configure.ac b/configure.ac
index f627cbf..d6563de 100644
--- a/configure.ac
+++ b/configure.ac
@@ -284,7 +284,7 @@ SET_DT_SONAME="-soname="
 CFLAGS_LARGEFILE=""
 
 case $host in
-        *-linux*|*-gnu)
+        *-linux*|*-gnu|*-haiku)
         if test $GCC = yes; then
             CC_OPT_FLAGS_TO_TRY="-O2 -DNDEBUG"
             CC_DBG_FLAGS_TO_TRY="-gdwarf-2 -g3 -O0"
-- 
2.37.3


From e95c53554733b0cb22e23d5a2e859d3491c19c62 Mon Sep 17 00:00:00 2001
From: Anarchos <sylvain_kerjean@hotmail.com>
Date: Fri, 4 Mar 2022 05:47:01 +0100
Subject: -g


diff --git a/configure.ac b/configure.ac
index d6563de..d682a97 100644
--- a/configure.ac
+++ b/configure.ac
@@ -287,7 +287,7 @@ case $host in
         *-linux*|*-gnu|*-haiku)
         if test $GCC = yes; then
             CC_OPT_FLAGS_TO_TRY="-O2 -DNDEBUG"
-            CC_DBG_FLAGS_TO_TRY="-gdwarf-2 -g3 -O0"
+            CC_DBG_FLAGS_TO_TRY="-g"
             CC_VISIBILITY_FLAGS_TO_TRY="-fvisibility=hidden"
         fi
         ;;
-- 
2.37.3


From 106649b8eac0634fcf494e2271b2b74e050f87a3 Mon Sep 17 00:00:00 2001
From: Anarchos <sylvain_kerjean@hotmail.com>
Date: Thu, 10 Mar 2022 17:11:47 +0100
Subject: debug flags


diff --git a/base/unix-dll.mak b/base/unix-dll.mak
index e83390c..3bb6c34 100644
--- a/base/unix-dll.mak
+++ b/base/unix-dll.mak
@@ -427,7 +427,8 @@ soinstall:
 	$(MAKE) $(SUB_MAKE_OPTION) soinstall-subtarget BUILDDIRPREFIX=$(SODIRPREFIX)
 
 sodebuginstall:
-	$(MAKE) $(SUB_MAKE_OPTION) soinstall-subtarget GENOPT='-DDEBUG' BUILDDIRPREFIX=$(SODEBUGDIRPREFIX)
+	GENOPT='-DDEBUG -g'
+	$(MAKE) $(SUB_MAKE_OPTION) soinstall-subtarget GENOPT='$(GENOPT)' BUILDDIRPREFIX=$(SODEBUGDIRPREFIX)
 
 soinstall-subtarget: install-so install-scripts install-data $(INSTALL_SHARED) $(INSTALL_CONTRIB)
 
-- 
2.37.3


From 89994ad54820a468d0065a75076957ef16c836fc Mon Sep 17 00:00:00 2001
From: Anarchos <sylvain_kerjean@hotmail.com>
Date: Thu, 10 Mar 2022 21:44:39 +0100
Subject: revert


diff --git a/base/unix-dll.mak b/base/unix-dll.mak
index 3bb6c34..e83390c 100644
--- a/base/unix-dll.mak
+++ b/base/unix-dll.mak
@@ -427,8 +427,7 @@ soinstall:
 	$(MAKE) $(SUB_MAKE_OPTION) soinstall-subtarget BUILDDIRPREFIX=$(SODIRPREFIX)
 
 sodebuginstall:
-	GENOPT='-DDEBUG -g'
-	$(MAKE) $(SUB_MAKE_OPTION) soinstall-subtarget GENOPT='$(GENOPT)' BUILDDIRPREFIX=$(SODEBUGDIRPREFIX)
+	$(MAKE) $(SUB_MAKE_OPTION) soinstall-subtarget GENOPT='-DDEBUG' BUILDDIRPREFIX=$(SODEBUGDIRPREFIX)
 
 soinstall-subtarget: install-so install-scripts install-data $(INSTALL_SHARED) $(INSTALL_CONTRIB)
 
-- 
2.37.3


From ca4f3c106f175ec0890661f95b2d59f7ae539bcf Mon Sep 17 00:00:00 2001
From: Ken Sharp <ken.sharp@artifex.com>
Date: Fri, 24 Mar 2023 13:19:57 +0000
Subject: Graphics library - prevent buffer overrun in (T)BCP encoding

Bug #706494 "Buffer Overflow in s_xBCPE_process"

As described in detail in the bug report, if the write buffer is filled
to one byte less than full, and we then try to write an escaped
character, we overrun the buffer because we don't check before
writing two bytes to it.

This just checks if we have two bytes before starting to write an
escaped character and exits if we don't (replacing the consumed byte
of the input).

Up for further discussion; why do we even permit a BCP encoding filter
anyway ? I think we should remove this, at least when SAFER is true.

diff --git a/base/sbcp.c b/base/sbcp.c
index 979ae09..47fc233 100644
--- a/base/sbcp.c
+++ b/base/sbcp.c
@@ -1,4 +1,4 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2023 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
@@ -50,6 +50,14 @@ s_xBCPE_process(stream_state * st, stream_cursor_read * pr,
         byte ch = *++p;
 
         if (ch <= 31 && escaped[ch]) {
+            /* Make sure we have space to store two characters in the write buffer,
+             * if we don't then exit without consuming the input character, we'll process
+             * that on the next time round.
+             */
+            if (pw->limit - q < 2) {
+                p--;
+                break;
+            }
             if (p == rlimit) {
                 p--;
                 break;
-- 
2.37.3

