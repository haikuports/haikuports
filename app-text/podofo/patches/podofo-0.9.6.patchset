From 5785180af2325c301b98ce93adcb11eccad1747a Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Wed, 6 Jan 2016 13:57:24 +0000
Subject: haiku patch


diff --git a/src/base/PdfFiltersPrivate.cpp b/src/base/PdfFiltersPrivate.cpp
index 01fec67..5a2d056 100644
--- a/src/base/PdfFiltersPrivate.cpp
+++ b/src/base/PdfFiltersPrivate.cpp
@@ -928,7 +928,7 @@ void PdfDCTFilter::EndDecodeImpl()
 
     jpeg_memory_src ( &m_cinfo, reinterpret_cast<JOCTET*>(m_buffer.GetBuffer()), m_buffer.GetSize() );
 
-    if( jpeg_read_header(&m_cinfo, TRUE) <= 0 )
+    if( jpeg_read_header(&m_cinfo, (boolean)TRUE) <= 0 )
     {
         (void) jpeg_destroy_decompress(&m_cinfo);
 
@@ -1059,7 +1059,7 @@ fill_input_buffer (j_decompress_ptr cinfo)
     src->pub.next_input_byte = src->eoi_buffer;
     src->pub.bytes_in_buffer = 2;
 
-    return TRUE;
+    return (boolean)TRUE;
 }
 
 /*
diff --git a/src/doc/PdfImage.cpp b/src/doc/PdfImage.cpp
index 8cd712a..23972b5 100644
--- a/src/doc/PdfImage.cpp
+++ b/src/doc/PdfImage.cpp
@@ -349,7 +349,7 @@ void PdfImage::LoadFromJpegHandle( PdfFileInputStream* pInStream )
 
     jpeg_stdio_src(&cinfo, pInStream->GetHandle());
 
-    if( jpeg_read_header(&cinfo, TRUE) <= 0 )
+    if( jpeg_read_header(&cinfo, (boolean)TRUE) <= 0 )
     {
         (void) jpeg_destroy_decompress(&cinfo);
 
@@ -415,7 +415,7 @@ void PdfImage::LoadFromJpegData(const unsigned char* pData, pdf_long dwLen)
 
     jpeg_memory_src(&cinfo, pData, dwLen);
 
-    if( jpeg_read_header(&cinfo, TRUE) <= 0 )
+    if( jpeg_read_header(&cinfo, (boolean)TRUE) <= 0 )
     {
         (void) jpeg_destroy_decompress(&cinfo);
 
-- 
2.19.1


From a9630f963722a0a301c167462ab63671d641683b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zolt=C3=A1n=20Mizsei?= <zmizsei@extrowerk.com>
Date: Mon, 4 Feb 2019 19:47:48 +0100
Subject: Build fix


diff --git a/test/unit/ParserTest.cpp b/test/unit/ParserTest.cpp
index ee01d4a..d0014cd 100644
--- a/test/unit/ParserTest.cpp
+++ b/test/unit/ParserTest.cpp
@@ -2037,7 +2037,7 @@ bool ParserTest::canOutOfMemoryKillUnitTests()
 #elif defined( __linux__ )
     // TODO do big allocs succeed then trigger OOM-killer fiasco??
     bool bCanTerminateProcess = false;
-#elif
+#else
     // other systems - assume big allocs faily gracefully and throw bad_alloc
     bool bCanTerminateProcess = false;
 #endif
-- 
2.19.1

