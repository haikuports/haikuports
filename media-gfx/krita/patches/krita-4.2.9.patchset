From 17a83bd99486aa74a0890a03ef00c4e18a05d983 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Tue, 10 Dec 2019 20:04:06 +1000
Subject: Fix haiku build


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2fb785a..87bc2be 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -399,7 +399,7 @@ set_package_properties(Qt5QuickWidgets PROPERTIES
         PURPOSE "Optionally used for the touch gui for Krita")
 endif()
 
-if (NOT WIN32 AND NOT APPLE)
+if (NOT WIN32 AND NOT APPLE AND NOT HAIKU)
 
     find_package(Qt5 ${MIN_QT_VERSION} REQUIRED X11Extras)
 
diff --git a/krita/main.cc b/krita/main.cc
index 34898c3..bfa734b 100644
--- a/krita/main.cc
+++ b/krita/main.cc
@@ -73,6 +73,12 @@
 #include <QLibrary>
 #endif
 
+#if defined Q_OS_HAIKU
+#include <unistd.h>
+#include <sys/types.h>
+#include <signal.h>
+#endif
+
 #if defined HAVE_KCRASH
 #include <kcrash.h>
 #elif defined USE_DRMINGW
@@ -251,7 +257,7 @@ extern "C" int main(int argc, char **argv)
     }
 
 
-#ifdef Q_OS_LINUX
+#if defined(Q_OS_LINUX)
     {
         QByteArray originalXdgDataDirs = qgetenv("XDG_DATA_DIRS");
         if (originalXdgDataDirs.isEmpty()) {
@@ -260,6 +266,9 @@ extern "C" int main(int argc, char **argv)
         }
         qputenv("XDG_DATA_DIRS", QFile::encodeName(root + "share") + ":" + originalXdgDataDirs);
     }
+#elif defined(Q_OS_HAIKU)
+	qputenv("KRITA_PLUGIN_PATH", QFile::encodeName(root + "lib"));
+    qputenv("XDG_DATA_DIRS", QFile::encodeName(root + "share") + ":" + qgetenv("XDG_DATA_DIRS"));
 #else
     qputenv("XDG_DATA_DIRS", QFile::encodeName(root + "share"));
 #endif
@@ -543,6 +552,8 @@ extern "C" int main(int argc, char **argv)
     if (logUsage) {
         KisUsageLogger::close();
     }
-
+#if defined Q_OS_HAIKU
+	kill(::getpid(), SIGKILL);
+#endif
     return state;
 }
diff --git a/libs/image/kis_image_config.cpp b/libs/image/kis_image_config.cpp
index ab4550d..979a5f1 100644
--- a/libs/image/kis_image_config.cpp
+++ b/libs/image/kis_image_config.cpp
@@ -396,6 +396,8 @@ void KisImageConfig::setLazyFrameCreationEnabled(bool value)
 #elif defined Q_OS_MACOS
 #include <sys/types.h>
 #include <sys/sysctl.h>
+#elif defined Q_OS_HAIKU
+#include <OS.h>
 #endif
 
 int KisImageConfig::totalRAM()
@@ -424,6 +426,13 @@ int KisImageConfig::totalRAM()
     if(!error) {
         totalMemory = physmem >> 20;
     }
+#elif defined Q_OS_HAIKU
+	system_info info;
+	error = get_system_info(&info) == B_OK?0:1;
+	if (!error) {
+		uint64_t size = (info.max_pages * B_PAGE_SIZE);
+    	totalMemory = size >> 20;
+	}
 #elif defined Q_OS_WIN
     MEMORYSTATUSEX status;
     status.dwLength = sizeof(status);
diff --git a/libs/ui/CMakeLists.txt b/libs/ui/CMakeLists.txt
index 6915acb..ff598ed 100644
--- a/libs/ui/CMakeLists.txt
+++ b/libs/ui/CMakeLists.txt
@@ -568,7 +568,7 @@ if (HAVE_QT_MULTIMEDIA)
     target_link_libraries(kritaui Qt5::Multimedia)
 endif()
 
-if (NOT WIN32 AND NOT APPLE)
+if (NOT WIN32 AND NOT APPLE AND NOT HAIKU)
   target_link_libraries(kritaui ${X11_X11_LIB}
                                 ${X11_Xinput_LIB})
 endif()
@@ -578,11 +578,17 @@ if(APPLE)
     target_link_libraries(kritaui ${APPKIT_LIBRARY})
 endif ()
 
+if(HAIKU)
+    target_link_libraries(kritaui network)
+    target_link_libraries(kritaui expat)
+    target_link_libraries(kritaui iconv)
+    target_link_libraries(kritaui intl)
+endif ()
 
 target_link_libraries(kritaui ${OPENEXR_LIBRARIES})
 
 # Add VSync disable workaround
-if(NOT WIN32 AND NOT APPLE)
+if(NOT WIN32 AND NOT APPLE AND NOT HAIKU)
     target_link_libraries(kritaui ${CMAKE_DL_LIBS} Qt5::X11Extras)
 endif()
 
diff --git a/libs/ui/widgets/kis_floating_message.cpp b/libs/ui/widgets/kis_floating_message.cpp
index 86e248c..f1b55b0 100644
--- a/libs/ui/widgets/kis_floating_message.cpp
+++ b/libs/ui/widgets/kis_floating_message.cpp
@@ -129,6 +129,7 @@ KisFloatingMessage::KisFloatingMessage(const QString &message, QWidget *parent,
     , m_priority(priority)
     , m_alignment(alignment)
 {
+#ifndef Q_OS_HAIKU
     m_icon = KisIconUtils::loadIcon("krita").pixmap(256, 256).toImage();
 
     setWindowFlags(Qt::FramelessWindowHint | Qt::ToolTip);
@@ -139,6 +140,7 @@ KisFloatingMessage::KisFloatingMessage(const QString &message, QWidget *parent,
 
     m_timer.setSingleShot( true );
     connect(&m_timer, SIGNAL(timeout()), SLOT(startFade()));
+#endif
 }
 
 void KisFloatingMessage::tryOverrideMessage(const QString message,
@@ -160,12 +162,13 @@ void KisFloatingMessage::tryOverrideMessage(const QString message,
 
 void KisFloatingMessage::showMessage()
 {
-
+#ifndef Q_OS_HAIKU
     setGeometry(determineMetrics(fontMetrics().width('x')));
     setWindowOpacity(OSD_WINDOW_OPACITY);
 
     QWidget::setVisible(true);
     m_timer.start(m_timeout);
+#endif
 }
 
 void KisFloatingMessage::setShowOverParent(bool show)
diff --git a/libs/widgetutils/KoResourcePaths.cpp b/libs/widgetutils/KoResourcePaths.cpp
index ab83086..e40c143 100644
--- a/libs/widgetutils/KoResourcePaths.cpp
+++ b/libs/widgetutils/KoResourcePaths.cpp
@@ -127,6 +127,8 @@ QString getInstallationPrefix() {
     appdir.setPath(correctedPath);
     appdir.cdUp();
     return appdir.canonicalPath();
+    #elif defined(Q_OS_HAIKU)
+		return qApp->applicationDirPath() + "/";
 #else
     return qApp->applicationDirPath() + "/../";
 #endif
diff --git a/plugins/dockers/CMakeLists.txt b/plugins/dockers/CMakeLists.txt
index 6952b67..58ecaae 100644
--- a/plugins/dockers/CMakeLists.txt
+++ b/plugins/dockers/CMakeLists.txt
@@ -14,7 +14,7 @@ add_subdirectory(compositiondocker)
 add_subdirectory(patterndocker)
 add_subdirectory(griddocker)
 add_subdirectory(arrangedocker)
-if(HAVE_OCIO)
+if(HAVE_OCIO AND NOT HAIKU)
     add_subdirectory(lut)
 endif()
 add_subdirectory(overview)
-- 
2.24.0

