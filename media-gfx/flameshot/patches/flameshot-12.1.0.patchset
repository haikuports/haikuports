From 717a12238ad3428d0ff0ec91a5ca6357942e3829 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 8 Oct 2022 21:23:08 +1000
Subject: Add support for autolaunch


diff --git a/src/utils/confighandler.cpp b/src/utils/confighandler.cpp
index 657e896..c077d05 100644
--- a/src/utils/confighandler.cpp
+++ b/src/utils/confighandler.cpp
@@ -26,7 +26,10 @@
 
 bool verifyLaunchFile()
 {
-#if defined(Q_OS_LINUX) || defined(Q_OS_UNIX)
+#if defined(Q_OS_HAIKU)
+    QString path = QDir::homePath() + "/config/settings/boot/launch/Flameshot";
+    bool res = QFile(path).exists();
+#elif defined(Q_OS_LINUX) || defined(Q_OS_UNIX)
     QString path = QStandardPaths::locate(QStandardPaths::GenericConfigLocation,
                                           "autostart/",
                                           QStandardPaths::LocateDirectory) +
@@ -261,6 +264,15 @@ void ConfigHandler::setStartupLaunch(const bool start)
         qWarning() << "Unable to change login items, error:"
                    << process.readAll();
     }
+#elif defined(Q_OS_HAIKU)
+    QString linkname = QDir::homePath() + "/config/settings/boot/launch/Flameshot";
+    QFile appFile(QCoreApplication::applicationFilePath());
+    QFile linkFile(linkname);
+    if (start) {
+		appFile.link(linkname);
+    } else {
+        linkFile.remove();
+    }
 #elif defined(Q_OS_LINUX) || defined(Q_OS_UNIX)
     QString path =
       QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) +
-- 
2.36.1


From ac483e7cd2930695d9348dcee9c694df6a5b7b73 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 8 Oct 2022 21:24:00 +1000
Subject: DBus autostart


diff --git a/src/main.cpp b/src/main.cpp
index fd2768b..b92b122 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -24,6 +24,7 @@
 #include <QSharedMemory>
 #include <QTimer>
 #include <QTranslator>
+#include <QProcess>
 #if defined(Q_OS_LINUX) || defined(Q_OS_UNIX)
 #include "abstractlogger.h"
 #include "src/core/flameshotdbusadapter.h"
@@ -105,6 +106,27 @@ int main(int argc, char* argv[])
 #else
         QtSingleApplication app(argc, argv);
 #endif
+
+#ifdef Q_OS_HAIKU
+		int status=0;
+		QProcess dbusProcess;
+		QString exec = "/bin/dbus-launch";
+		QStringList params;
+		dbusProcess.start(exec, params);
+		dbusProcess.waitForFinished();
+		QString output(dbusProcess.readAllStandardOutput());
+
+		QFile file ("/tmp/flameshot_session");
+		if (file.open(QFile::WriteOnly | QFile::Truncate)) {
+			QTextStream outstream(&file);
+			outstream << output;
+			file.close();
+		}
+
+		QStringList list = output.split("\n", QString::SkipEmptyParts);
+		foreach (const QString &str, list)
+			putenv(str.toLatin1().data());
+#endif
         QApplication::setStyle(new StyleOverride);
 
         QTranslator translator, qtTranslator;
@@ -143,10 +165,30 @@ int main(int argc, char* argv[])
         dbus.registerObject(QStringLiteral("/"), c);
         dbus.registerService(QStringLiteral("org.flameshot.Flameshot"));
 #endif
+#ifdef Q_OS_HAIKU
+		status = app.exec();
+		system("kill -3 $DBUS_SESSION_BUS_PID");
+		return status;
+#else
         return qApp->exec();
+#endif
     }
 
 #if !defined(Q_OS_WIN)
+
+#ifdef Q_OS_HAIKU
+QFile inputFile("/tmp/flameshot_session");
+if (inputFile.open(QIODevice::ReadOnly))
+{
+   QTextStream in(&inputFile);
+   while (!in.atEnd())
+   {
+      QString line = in.readLine();
+      putenv(line.toLatin1().data());
+   }
+   inputFile.close();
+}
+#endif
     /*--------------|
      * CLI parsing  |
      * ------------*/
diff --git a/src/utils/filenamehandler.cpp b/src/utils/filenamehandler.cpp
index ffee256..b465b7e 100644
--- a/src/utils/filenamehandler.cpp
+++ b/src/utils/filenamehandler.cpp
@@ -14,6 +14,7 @@ FileNameHandler::FileNameHandler(QObject* parent)
   : QObject(parent)
 {
     auto err = AbstractLogger::error(AbstractLogger::Stderr);
+#ifndef __HAIKU__
     try {
         std::locale::global(std::locale());
     } catch (std::exception& e) {
@@ -22,6 +23,7 @@ FileNameHandler::FileNameHandler(QObject* parent)
 
         std::locale::global(std::locale("en_US.UTF-8"));
     }
+#endif
 }
 
 QString FileNameHandler::parsedPattern()
-- 
2.36.1


From 09f7924931c41d73285efb76453ed1f531ce06a4 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 8 Oct 2022 21:24:54 +1000
Subject: Don't use tray icon from theme


diff --git a/src/widgets/trayicon.cpp b/src/widgets/trayicon.cpp
index 3221118..9de7b5b 100644
--- a/src/widgets/trayicon.cpp
+++ b/src/widgets/trayicon.cpp
@@ -33,7 +33,7 @@ TrayIcon::TrayIcon(QObject* parent)
     setContextMenu(m_menu);
 #endif
     QIcon icon =
-      QIcon::fromTheme("flameshot-tray", QIcon(GlobalValues::iconPathPNG()));
+      QIcon(":img/app/flameshot.png");
     setIcon(icon);
 
 #if defined(Q_OS_MACOS)
-- 
2.36.1


From be249bad99a0d01ad8effb1904b2465e3fab8659 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 8 Oct 2022 21:25:18 +1000
Subject: Link with libbe.so


diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 2dd49c3..0c48cfb 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -223,6 +223,13 @@ if (APPLE)
     )
 endif ()
 
+if (HAIKU)
+    target_link_libraries(
+            flameshot
+            be
+    )
+endif ()
+
 if (WIN32)
     set(USE_OPENSSL FALSE)
     if (ENABLE_OPENSSL)
-- 
2.36.1


From 52f2021c99334274353e0634dc91b1c4f7cb64f8 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 8 Oct 2022 21:26:03 +1000
Subject: Style tune


diff --git a/src/config/buttonlistview.cpp b/src/config/buttonlistview.cpp
index 6d042f0..db949c3 100644
--- a/src/config/buttonlistview.cpp
+++ b/src/config/buttonlistview.cpp
@@ -36,7 +36,7 @@ void ButtonListView::initButtonList()
         QColor bgColor = this->palette().color(QWidget::backgroundRole());
         m_buttonItem->setIcon(tool->icon(bgColor, false));
 
-        m_buttonItem->setFlags(Qt::ItemIsUserCheckable);
+        //m_buttonItem->setFlags(Qt::ItemIsUserCheckable);
         QColor foregroundColor =
           this->palette().color(QWidget::foregroundRole());
         m_buttonItem->setForeground(foregroundColor);
diff --git a/src/config/shortcutswidget.cpp b/src/config/shortcutswidget.cpp
index 74a0fba..92a7674 100644
--- a/src/config/shortcutswidget.cpp
+++ b/src/config/shortcutswidget.cpp
@@ -22,6 +22,10 @@
 #include <QScreen>
 #endif
 
+#ifdef Q_OS_HAIKU
+#include <InterfaceDefs.h>
+#endif
+
 ShortcutsWidget::ShortcutsWidget(QWidget* parent)
   : QWidget(parent)
 {
@@ -93,7 +97,7 @@ void ShortcutsWidget::populateInfoTable()
         const auto key_sequence = current_shortcut.at(2);
         m_table->setItem(i, 0, new QTableWidgetItem(description));
 
-#if defined(Q_OS_MACOS)
+#if defined(Q_OS_MACOS) || defined(Q_OS_HAIKU)
         auto* item = new QTableWidgetItem(nativeOSHotKeyText(key_sequence));
 #else
         QTableWidgetItem* item = new QTableWidgetItem(key_sequence);
@@ -230,3 +234,19 @@ const QString& ShortcutsWidget::nativeOSHotKeyText(const QString& text)
     return m_res;
 }
 #endif
+
+#if defined(Q_OS_HAIKU)
+const QString& ShortcutsWidget::nativeOSHotKeyText(const QString& text)
+{
+	uint32 ctrlKey;
+	get_modifier_key(B_LEFT_CONTROL_KEY, &ctrlKey);
+    m_res = text;
+    if (ctrlKey==0x5c) {
+    	if (m_res.contains("Ctrl+"))
+    		m_res.replace("Ctrl+", "Alt+");
+    	else if (m_res.contains("Alt+"))
+    		m_res.replace("Alt+", "Ctrl+");
+    }
+    return m_res;
+}
+#endif
diff --git a/src/config/shortcutswidget.h b/src/config/shortcutswidget.h
index 638bff3..c3314c2 100644
--- a/src/config/shortcutswidget.h
+++ b/src/config/shortcutswidget.h
@@ -22,7 +22,7 @@ public:
 private:
     void initInfoTable();
 #if (defined(Q_OS_MAC) || defined(Q_OS_MAC64) || defined(Q_OS_MACOS) ||        \
-     defined(Q_OS_MACX))
+     defined(Q_OS_MACX) || defined(Q_OS_HAIKU))
     const QString& nativeOSHotKeyText(const QString& text);
 #endif
 
@@ -32,7 +32,7 @@ private slots:
 
 private:
 #if (defined(Q_OS_MAC) || defined(Q_OS_MAC64) || defined(Q_OS_MACOS) ||        \
-     defined(Q_OS_MACX))
+     defined(Q_OS_MACX) || defined(Q_OS_HAIKU))
     QString m_res;
 #endif
     ConfigHandler m_config;
diff --git a/src/tools/pin/pinwidget.cpp b/src/tools/pin/pinwidget.cpp
index 160e900..4981c6c 100644
--- a/src/tools/pin/pinwidget.cpp
+++ b/src/tools/pin/pinwidget.cpp
@@ -18,7 +18,11 @@
 #include <QWheelEvent>
 
 namespace {
+#ifndef __HAIKU__
 constexpr int MARGIN = 7;
+#else
+constexpr int MARGIN = 1;
+#endif
 constexpr int BLUR_RADIUS = 2 * MARGIN;
 constexpr qreal STEP = 0.03;
 constexpr qreal MIN_SIZE = 100.0;
@@ -31,12 +35,14 @@ PinWidget::PinWidget(const QPixmap& pixmap,
   , m_pixmap(pixmap)
   , m_layout(new QVBoxLayout(this))
   , m_label(new QLabel())
+#ifndef __HAIKU__
   , m_shadowEffect(new QGraphicsDropShadowEffect(this))
+#endif
 {
     setWindowIcon(QIcon(GlobalValues::iconPath()));
     setWindowFlags(Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint);
     // set the bottom widget background transparent
-    setAttribute(Qt::WA_TranslucentBackground);
+    //setAttribute(Qt::WA_TranslucentBackground);
     setAttribute(Qt::WA_DeleteOnClose);
 
     ConfigHandler conf;
@@ -44,12 +50,12 @@ PinWidget::PinWidget(const QPixmap& pixmap,
     m_hoverColor = conf.contrastUiColor();
 
     m_layout->setContentsMargins(MARGIN, MARGIN, MARGIN, MARGIN);
-
+#ifndef __HAIKU__
     m_shadowEffect->setColor(m_baseColor);
     m_shadowEffect->setBlurRadius(BLUR_RADIUS);
     m_shadowEffect->setOffset(0, 0);
     setGraphicsEffect(m_shadowEffect);
-
+#endif
     m_label->setPixmap(m_pixmap);
     m_layout->addWidget(m_label);
 
@@ -136,12 +142,12 @@ bool PinWidget::scrollEvent(QWheelEvent* event)
 
 void PinWidget::enterEvent(QEvent*)
 {
-    m_shadowEffect->setColor(m_hoverColor);
+    //m_shadowEffect->setColor(m_hoverColor);
 }
 
 void PinWidget::leaveEvent(QEvent*)
 {
-    m_shadowEffect->setColor(m_baseColor);
+    //m_shadowEffect->setColor(m_baseColor);
 }
 
 void PinWidget::mouseDoubleClickEvent(QMouseEvent*)
diff --git a/src/widgets/capture/capturewidget.cpp b/src/widgets/capture/capturewidget.cpp
index 4282159..4e3b752 100644
--- a/src/widgets/capture/capturewidget.cpp
+++ b/src/widgets/capture/capturewidget.cpp
@@ -41,6 +41,10 @@
 #include <QShortcut>
 #include <draggablewidgetmaker.h>
 
+#ifdef Q_OS_HAIKU
+#include <InterfaceDefs.h>
+#endif
+
 #define MOUSE_DISTANCE_TO_START_MOVING 3
 
 // CaptureWidget is the main component used to capture the screen. It contains
@@ -377,6 +381,10 @@ void CaptureWidget::handleButtonLeftClick(CaptureToolButton* b)
 
 void CaptureWidget::initHelpMessage()
 {
+#ifdef Q_OS_HAIKU
+	uint32 ctrlKey;
+	get_modifier_key(B_LEFT_CONTROL_KEY, &ctrlKey);
+#endif
     QList<QPair<QString, QString>> keyMap;
     if (keyMap.isEmpty()) {
         keyMap << QPair(tr("Mouse"), tr("Select screenshot area"));
@@ -390,6 +398,10 @@ void CaptureWidget::initHelpMessage()
             QString shortcut = ConfigHandler().shortcut(
               QVariant::fromValue(toolType).toString());
             shortcut.replace("Return", "Enter");
+#ifdef Q_OS_HAIKU
+			if (ctrlKey==0x5c)
+            	shortcut.replace("Ctrl", "Alt");
+#endif
             if (!shortcut.isEmpty()) {
                 keyMap << QPair(shortcut, tool->description());
             }
-- 
2.36.1

