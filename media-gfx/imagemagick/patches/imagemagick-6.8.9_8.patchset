From 657a25b8d57bf979173b710cd9456f5611695c07 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@gmail.com>
Date: Sun, 26 Oct 2014 17:46:46 +0100
Subject: Make gcc2 happy.


diff --git a/Magick++/lib/Blob.cpp b/Magick++/lib/Blob.cpp
index 5b3fd24..9cc033e 100644
--- a/Magick++/lib/Blob.cpp
+++ b/Magick++/lib/Blob.cpp
@@ -111,7 +111,7 @@ std::string Magick::Blob::base64(void)
       return result;
     }
 
-  return(std::string());
+  return std::string();
 }
 
 const void* Magick::Blob::data(void) const
diff --git a/Magick++/lib/ChannelMoments.cpp b/Magick++/lib/ChannelMoments.cpp
index e33cd5c..1783328 100644
--- a/Magick++/lib/ChannelMoments.cpp
+++ b/Magick++/lib/ChannelMoments.cpp
@@ -108,7 +108,7 @@ double Magick::ChannelMoments::huInvariants(const size_t index_) const
   if (index_ > 7)
     throw ErrorOption("Valid range for index is 0-7");
 
-  return(_huInvariants.at(index_));
+  return _huInvariants.at(index_);
 }
 
 Magick::ImageMoments::ImageMoments(void)
@@ -134,7 +134,7 @@ Magick::ChannelMoments Magick::ImageMoments::channel(
     if (it->channel() == channel_)
       return(*it);
   }
-  return(ChannelMoments());
+  return ChannelMoments();
 }
 
 Magick::ImageMoments::ImageMoments(const MagickCore::Image *image)
diff --git a/Magick++/lib/Image.cpp b/Magick++/lib/Image.cpp
index bd855d5..8c0c38e 100644
--- a/Magick++/lib/Image.cpp
+++ b/Magick++/lib/Image.cpp
@@ -499,9 +499,9 @@ Magick::Image Magick::Image::clipMask(void) const
   ThrowPPException;
 
   if (image == (MagickCore::Image *) NULL)
-    return(Magick::Image());
+    return Magick::Image();
   else
-    return(Magick::Image(image));
+    return Magick::Image(image);
 }
 
 void Magick::Image::colorFuzz(const double fuzz_)
@@ -579,9 +579,9 @@ std::string Magick::Image::comment(void) const
   value=GetImageProperty(constImage(),"Comment");
 
   if (value)
-    return(std::string(value));
+    return std::string(value);
 
-  return(std::string()); // Intentionally no exception
+  return std::string(); // Intentionally no exception
 }
 
 void Magick::Image::compose(const CompositeOperator compose_)
@@ -591,7 +591,7 @@ void Magick::Image::compose(const CompositeOperator compose_)
 
 Magick::CompositeOperator Magick::Image::compose(void) const
 {
-  return(constImage()->compose);
+  return constImage()->compose;
 }
 
 void Magick::Image::compressType(const CompressionType compressType_)
@@ -603,7 +603,7 @@ void Magick::Image::compressType(const CompressionType compressType_)
 
 Magick::CompressionType Magick::Image::compressType(void) const
 {
-  return(constImage()->compression);
+  return constImage()->compression;
 }
 
 void Magick::Image::debug(const bool flag_)
@@ -683,7 +683,7 @@ std::string Magick::Image::directory(void) const
   throwExceptionExplicit(CorruptImageWarning,
     "Image does not contain a directory");
 
-  return(std::string());
+  return std::string();
 }
 
 void Magick::Image::endian(const Magick::EndianType endian_)
@@ -695,7 +695,7 @@ void Magick::Image::endian(const Magick::EndianType endian_)
 
 Magick::EndianType Magick::Image::endian(void) const
 {
-  return(constImage()->endian);
+  return constImage()->endian;
 }
 
 void Magick::Image::exifProfile(const Magick::Blob &exifProfile_)
@@ -720,10 +720,10 @@ Magick::Blob Magick::Image::exifProfile(void) const
 
   exif_profile=GetImageProfile(constImage(),"exif");
   if (exif_profile == (StringInfo *) NULL)
-    return(Blob());
+    return Blob();
 
-  return(Blob(GetStringInfoDatum(exif_profile),GetStringInfoLength(
-    exif_profile)));
+  return Blob(GetStringInfoDatum(exif_profile),GetStringInfoLength(
+    exif_profile));
 } 
 
 void Magick::Image::fileName(const std::string &fileName_)
@@ -738,12 +738,12 @@ void Magick::Image::fileName(const std::string &fileName_)
 
 std::string Magick::Image::fileName(void) const
 {
-  return(constOptions()->fileName());
+  return constOptions()->fileName();
 }
 
 off_t Magick::Image::fileSize(void) const
 {
-  return((off_t) GetBlobSize(constImage()));
+  return (off_t) GetBlobSize(constImage());
 }
 
 void Magick::Image::fillColor(const Magick::Color &fillColor_)
@@ -759,7 +759,7 @@ void Magick::Image::fillColor(const Magick::Color &fillColor_)
 
 Magick::Color Magick::Image::fillColor(void) const
 {
-  return(constOptions()->fillColor());
+  return constOptions()->fillColor();
 }
 
 void Magick::Image::fillRule(const Magick::FillRule &fillRule_)
@@ -770,7 +770,7 @@ void Magick::Image::fillRule(const Magick::FillRule &fillRule_)
 
 Magick::FillRule Magick::Image::fillRule(void) const
 {
-  return(constOptions()->fillRule());
+  return constOptions()->fillRule();
 }
 
 void Magick::Image::fillPattern(const Image &fillPattern_)
@@ -804,7 +804,7 @@ Magick::Image Magick::Image::fillPattern(void) const
       ThrowPPException;
     }
 
-  return(texture);
+  return texture;
 }
 
 void Magick::Image::filterType(const Magick::FilterTypes filterType_)
@@ -815,7 +815,7 @@ void Magick::Image::filterType(const Magick::FilterTypes filterType_)
 
 Magick::FilterTypes Magick::Image::filterType(void) const
 {
-  return(constImage()->filter);
+  return constImage()->filter;
 }
 
 void Magick::Image::font(const std::string &font_)
@@ -826,7 +826,7 @@ void Magick::Image::font(const std::string &font_)
 
 std::string Magick::Image::font(void) const
 {
-  return(constOptions()->font());
+  return constOptions()->font();
 }
 
 void Magick::Image::fontPointsize(const double pointSize_)
@@ -850,10 +850,10 @@ std::string Magick::Image::format(void) const
   ThrowPPException;
 
   if ((magick_info != 0) && (*magick_info->description != '\0'))
-    return(std::string(magick_info->description));
+    return std::string(magick_info->description);
 
   throwExceptionExplicit(CorruptImageWarning,"Unrecognized image magick type");
-  return(std::string());
+  return std::string();
 }
 
 std::string Magick::Image::formatExpression(const std::string expression)
@@ -871,22 +871,22 @@ std::string Magick::Image::formatExpression(const std::string expression)
       text=DestroyString(text);
     }
   throwImageException();
-  return(result);
+  return result;
 }
 
 double Magick::Image::gamma(void) const
 {
-  return(constImage()->gamma);
+  return constImage()->gamma;
 }
 
 Magick::Geometry Magick::Image::geometry(void) const
 {
   if (constImage()->geometry)
-    return(Geometry(constImage()->geometry));
+    return Geometry(constImage()->geometry);
 
   throwExceptionExplicit(OptionWarning,"Image does not contain a geometry");
 
-  return(Geometry());
+  return Geometry();
 }
 
 void Magick::Image::gifDisposeMethod(const size_t disposeMethod_)
@@ -898,7 +898,7 @@ void Magick::Image::gifDisposeMethod(const size_t disposeMethod_)
 size_t Magick::Image::gifDisposeMethod(void) const
 {
   // FIXME: It would be better to return an enumeration
-  return ((size_t) constImage()->dispose);
+  return (size_t) constImage()->dispose;
 }
 
 void Magick::Image::highlightColor(const Color color_)
@@ -974,9 +974,9 @@ Magick::Blob Magick::Image::iptcProfile(void) const
 
   iptc_profile=GetImageProfile(constImage(),"iptc");
   if (iptc_profile == (StringInfo *) NULL)
-    return(Blob());
-  return(Blob(GetStringInfoDatum(iptc_profile),GetStringInfoLength(
-    iptc_profile)));
+    return Blob();
+  return Blob(GetStringInfoDatum(iptc_profile),GetStringInfoLength(
+    iptc_profile));
 }
 
 void Magick::Image::isValid(const bool isValid_)
@@ -997,7 +997,7 @@ void Magick::Image::isValid(const bool isValid_)
 
 bool Magick::Image::isValid(void) const
 {
-  return(rows() && columns());
+  return rows() && columns();
 }
 
 void Magick::Image::label(const std::string &label_)
@@ -1017,9 +1017,9 @@ std::string Magick::Image::label(void) const
   value=GetImageProperty(constImage(),"Label");
 
   if (value)
-    return(std::string(value));
+    return std::string(value);
 
-  return(std::string());
+  return std::string();
 }
 
 void Magick::Image::lowlightColor(const Color color_)
@@ -1044,9 +1044,9 @@ void Magick::Image::magick(const std::string &magick_)
 std::string Magick::Image::magick(void) const
 {
   if (*(constImage()->magick) != '\0')
-    return(std::string(constImage()->magick));
+    return std::string(constImage()->magick);
 
-  return(constOptions()->magick());
+  return constOptions()->magick();
 }
 
 void Magick::Image::mask(const Magick::Image &mask_)
@@ -1069,9 +1069,9 @@ Magick::Image Magick::Image::mask(void) const
   ThrowPPException;
 
   if (image == (MagickCore::Image *) NULL)
-    return(Magick::Image());
+    return Magick::Image();
   else
-    return(Magick::Image(image));
+    return Magick::Image(image);
 }
 
 void Magick::Image::matte(const bool matteFlag_)
@@ -1119,13 +1119,13 @@ void Magick::Image::matteColor(const Color &matteColor_)
 
 Magick::Color Magick::Image::matteColor(void) const
 {
-  return(Color(constImage()->matte_color.red,constImage()->matte_color.green,
-    constImage()->matte_color.blue));
+  return Color(constImage()->matte_color.red,constImage()->matte_color.green,
+    constImage()->matte_color.blue);
 }
 
 double Magick::Image::meanErrorPerPixel(void) const
 {
-  return(constImage()->error.mean_error_per_pixel);
+  return constImage()->error.mean_error_per_pixel;
 }
 
 void Magick::Image::modulusDepth(const size_t depth_)
@@ -1143,7 +1143,7 @@ size_t Magick::Image::modulusDepth(void) const
   GetPPException;
   depth=GetImageDepth(constImage(),exceptionInfo);
   ThrowPPException;
-  return(depth);
+  return depth;
 }
 
 void Magick::Image::monochrome(const bool monochromeFlag_)
@@ -1154,28 +1154,28 @@ void Magick::Image::monochrome(const bool monochromeFlag_)
 
 bool Magick::Image::monochrome(void) const
 {
-  return(constOptions()->monochrome());
+  return constOptions()->monochrome();
 }
 
 Magick::Geometry Magick::Image::montageGeometry(void) const
 {
   if (constImage()->montage)
-    return(Magick::Geometry(constImage()->montage));
+    return Magick::Geometry(constImage()->montage);
 
   throwExceptionExplicit(CorruptImageWarning,
     "Image does not contain a montage");
 
-  return(Magick::Geometry());
+  return Magick::Geometry();
 }
 
 double Magick::Image::normalizedMaxError(void) const
 {
-  return(constImage()->error.normalized_maximum_error);
+  return constImage()->error.normalized_maximum_error;
 }
 
 double Magick::Image::normalizedMeanError(void) const
 {
-  return (constImage()->error.normalized_mean_error);
+  return constImage()->error.normalized_mean_error;
 }
 
 void Magick::Image::orientation(const Magick::OrientationType orientation_)
@@ -1186,7 +1186,7 @@ void Magick::Image::orientation(const Magick::OrientationType orientation_)
 
 Magick::OrientationType Magick::Image::orientation(void) const
 {
-  return(constImage()->orientation);
+  return constImage()->orientation;
 }
 
 void Magick::Image::page(const Magick::Geometry &pageSize_)
@@ -1198,10 +1198,10 @@ void Magick::Image::page(const Magick::Geometry &pageSize_)
 
 Magick::Geometry Magick::Image::page(void) const
 {
-  return(Geometry(constImage()->page.width,constImage()->page.height,
+  return Geometry(constImage()->page.width,constImage()->page.height,
     AbsoluteValue(constImage()->page.x),AbsoluteValue(constImage()->page.y),
     constImage()->page.x < 0 ? true : false,
-    constImage()->page.y < 0 ? true : false));
+    constImage()->page.y < 0 ? true : false);
 }
 
 void Magick::Image::penColor(const Color &penColor_)
@@ -1213,7 +1213,7 @@ void Magick::Image::penColor(const Color &penColor_)
 
 Magick::Color Magick::Image::penColor(void) const
 {
-  return(constOptions()->fillColor());
+  return constOptions()->fillColor();
 }
 
 void Magick::Image::penTexture(const Image &penTexture_)
@@ -1246,7 +1246,7 @@ Magick::Image Magick::Image::penTexture(void) const
       texture.replaceImage(image);
       ThrowPPException;
     }
-  return(texture);
+  return texture;
 }
 
 void Magick::Image::quality(const size_t quality_)
@@ -1258,7 +1258,7 @@ void Magick::Image::quality(const size_t quality_)
 
 size_t Magick::Image::quality(void) const
 {
-  return(constImage()->quality);
+  return constImage()->quality;
 }
 
 void Magick::Image::quantizeColors(const size_t colors_)
@@ -1269,7 +1269,7 @@ void Magick::Image::quantizeColors(const size_t colors_)
 
 size_t Magick::Image::quantizeColors(void) const
 {
-  return(constOptions()->quantizeColors());
+  return constOptions()->quantizeColors();
 }
 
 void Magick::Image::quantizeColorSpace(
@@ -1281,7 +1281,7 @@ void Magick::Image::quantizeColorSpace(
 
 Magick::ColorspaceType Magick::Image::quantizeColorSpace(void) const
 {
-  return(constOptions()->quantizeColorSpace());
+  return constOptions()->quantizeColorSpace();
 }
 
 void Magick::Image::quantizeDither(const bool ditherFlag_)
@@ -1292,7 +1292,7 @@ void Magick::Image::quantizeDither(const bool ditherFlag_)
 
 bool Magick::Image::quantizeDither(void) const
 {
-  return(constOptions()->quantizeDither());
+  return constOptions()->quantizeDither();
 }
 
 void Magick::Image::quantizeDitherMethod(const DitherMethod ditherMethod_)
@@ -1303,7 +1303,7 @@ void Magick::Image::quantizeDitherMethod(const DitherMethod ditherMethod_)
 
 MagickCore::DitherMethod Magick::Image::quantizeDitherMethod(void) const
 {
-  return(constOptions()->quantizeDitherMethod());
+  return constOptions()->quantizeDitherMethod();
 }
 
 void Magick::Image::quantizeTreeDepth(const size_t treeDepth_)
@@ -1314,7 +1314,7 @@ void Magick::Image::quantizeTreeDepth(const size_t treeDepth_)
 
 size_t Magick::Image::quantizeTreeDepth(void) const
 {
-  return(constOptions()->quantizeTreeDepth());
+  return constOptions()->quantizeTreeDepth();
 }
 
 void Magick::Image::renderingIntent(
@@ -1326,8 +1326,8 @@ void Magick::Image::renderingIntent(
 
 Magick::RenderingIntent Magick::Image::renderingIntent(void) const
 {
-  return(static_cast<Magick::RenderingIntent>(
-    constImage()->rendering_intent));
+  return static_cast<Magick::RenderingIntent>(
+    constImage()->rendering_intent);
 }
 
 void Magick::Image::resolutionUnits(
@@ -1340,7 +1340,7 @@ void Magick::Image::resolutionUnits(
 
 Magick::ResolutionType Magick::Image::resolutionUnits(void) const
 {
-  return(constOptions()->resolutionUnits());
+  return constOptions()->resolutionUnits();
 }
 
 void Magick::Image::scene(const size_t scene_)
@@ -1351,7 +1351,7 @@ void Magick::Image::scene(const size_t scene_)
 
 size_t Magick::Image::scene(void) const
 {
-  return(constImage()->scene);
+  return constImage()->scene;
 }
 
 void Magick::Image::size(const Geometry &geometry_)
@@ -1364,7 +1364,7 @@ void Magick::Image::size(const Geometry &geometry_)
 
 Magick::Geometry Magick::Image::size(void) const
 {
-  return(Magick::Geometry(constImage()->columns,constImage()->rows));
+  return Magick::Geometry(constImage()->columns,constImage()->rows);
 }
 
 void Magick::Image::strokeAntiAlias(const bool flag_)
@@ -1375,7 +1375,7 @@ void Magick::Image::strokeAntiAlias(const bool flag_)
 
 bool Magick::Image::strokeAntiAlias(void) const
 {
-  return(constOptions()->strokeAntiAlias());
+  return constOptions()->strokeAntiAlias();
 }
 
 void Magick::Image::strokeColor(const Magick::Color &strokeColor_)
@@ -1391,7 +1391,7 @@ void Magick::Image::strokeColor(const Magick::Color &strokeColor_)
 
 Magick::Color Magick::Image::strokeColor(void) const
 {
-  return(constOptions()->strokeColor());
+  return constOptions()->strokeColor();
 }
 
 void Magick::Image::strokeDashArray(const double *strokeDashArray_)
@@ -1402,7 +1402,7 @@ void Magick::Image::strokeDashArray(const double *strokeDashArray_)
 
 const double *Magick::Image::strokeDashArray(void) const
 {
-  return(constOptions()->strokeDashArray());
+  return constOptions()->strokeDashArray();
 }
 
 void Magick::Image::strokeDashOffset(const double strokeDashOffset_)
@@ -1413,7 +1413,7 @@ void Magick::Image::strokeDashOffset(const double strokeDashOffset_)
 
 double Magick::Image::strokeDashOffset(void) const
 {
-  return(constOptions()->strokeDashOffset());
+  return constOptions()->strokeDashOffset();
 }
 
 void Magick::Image::strokeLineCap(const Magick::LineCap lineCap_)
@@ -1424,7 +1424,7 @@ void Magick::Image::strokeLineCap(const Magick::LineCap lineCap_)
 
 Magick::LineCap Magick::Image::strokeLineCap(void) const
 {
-  return(constOptions()->strokeLineCap());
+  return constOptions()->strokeLineCap();
 }
 
 void Magick::Image::strokeLineJoin(const Magick::LineJoin lineJoin_)
@@ -1435,7 +1435,7 @@ void Magick::Image::strokeLineJoin(const Magick::LineJoin lineJoin_)
 
 Magick::LineJoin Magick::Image::strokeLineJoin(void) const
 {
-  return(constOptions()->strokeLineJoin());
+  return constOptions()->strokeLineJoin();
 }
 
 void Magick::Image::strokeMiterLimit(const size_t strokeMiterLimit_)
@@ -1478,7 +1478,7 @@ Magick::Image Magick::Image::strokePattern(void) const
       texture.replaceImage(image);
       ThrowPPException;
     }
-  return(texture);
+  return texture;
 }
 
 void Magick::Image::strokeWidth(const double strokeWidth_)
@@ -1494,7 +1494,7 @@ void Magick::Image::strokeWidth(const double strokeWidth_)
 
 double Magick::Image::strokeWidth(void) const
 {
-  return(constOptions()->strokeWidth());
+  return constOptions()->strokeWidth();
 }
 
 void Magick::Image::subImage(const size_t subImage_)
@@ -1505,7 +1505,7 @@ void Magick::Image::subImage(const size_t subImage_)
 
 size_t Magick::Image::subImage(void) const
 {
-  return(constOptions()->subImage());
+  return constOptions()->subImage();
 }
 
 void Magick::Image::subRange(const size_t subRange_)
@@ -1516,7 +1516,7 @@ void Magick::Image::subRange(const size_t subRange_)
 
 size_t Magick::Image::subRange(void) const
 {
-  return(constOptions()->subRange());
+  return constOptions()->subRange();
 }
 
 void Magick::Image::textDirection(DirectionType direction_)
@@ -1527,7 +1527,7 @@ void Magick::Image::textDirection(DirectionType direction_)
 
 Magick::DirectionType Magick::Image::textDirection(void) const
 {
-  return(constOptions()->textDirection());
+  return constOptions()->textDirection();
 }
 
 void Magick::Image::textEncoding(const std::string &encoding_)
@@ -1538,7 +1538,7 @@ void Magick::Image::textEncoding(const std::string &encoding_)
 
 std::string Magick::Image::textEncoding(void) const
 {
-  return(constOptions()->textEncoding());
+  return constOptions()->textEncoding();
 }
 
 void Magick::Image::textGravity(GravityType gravity_)
@@ -1549,7 +1549,7 @@ void Magick::Image::textGravity(GravityType gravity_)
 
 Magick::GravityType Magick::Image::textGravity(void) const
 {
-  return(constOptions()->textGravity());
+  return constOptions()->textGravity();
 }
 
 void Magick::Image::textInterlineSpacing(double spacing_)
@@ -1560,7 +1560,7 @@ void Magick::Image::textInterlineSpacing(double spacing_)
 
 double Magick::Image::textInterlineSpacing(void) const
 {
-  return(constOptions()->textInterlineSpacing());
+  return constOptions()->textInterlineSpacing();
 }
 
 void Magick::Image::textInterwordSpacing(double spacing_)
@@ -1571,7 +1571,7 @@ void Magick::Image::textInterwordSpacing(double spacing_)
 
 double Magick::Image::textInterwordSpacing(void) const
 {
-  return(constOptions()->textInterwordSpacing());
+  return constOptions()->textInterwordSpacing();
 }
 
 void Magick::Image::textKerning(double kerning_)
@@ -1582,7 +1582,7 @@ void Magick::Image::textKerning(double kerning_)
 
 double Magick::Image::textKerning(void) const
 {
-  return(constOptions()->textKerning());
+  return constOptions()->textKerning();
 }
 
 void Magick::Image::tileName(const std::string &tileName_)
@@ -1593,7 +1593,7 @@ void Magick::Image::tileName(const std::string &tileName_)
 
 std::string Magick::Image::tileName(void) const
 {
-  return(constOptions()->tileName());
+  return constOptions()->tileName();
 }
 
 size_t Magick::Image::totalColors(void)
@@ -1604,7 +1604,7 @@ size_t Magick::Image::totalColors(void)
   GetPPException;
   colors=GetNumberColors(image(),0,exceptionInfo);
   ThrowPPException;
-  return(colors);
+  return colors;
 }
 
 void Magick::Image::transformRotation(const double angle_)
@@ -1635,11 +1635,11 @@ void Magick::Image::type(const Magick::ImageType type_)
 Magick::ImageType Magick::Image::type(void) const
 {
   if (constOptions()->type() != UndefinedType)
-    return(constOptions()->type());
+    return constOptions()->type();
   else if (constImage()->type != UndefinedType)
-    return(constImage()->type);
+    return constImage()->type;
   else
-    return(determineType());
+    return determineType();
 }
 
 void Magick::Image::verbose(const bool verboseFlag_)
@@ -1650,7 +1650,7 @@ void Magick::Image::verbose(const bool verboseFlag_)
 
 bool Magick::Image::verbose(void) const
 {
-  return(constOptions()->verbose());
+  return constOptions()->verbose();
 }
 
 void Magick::Image::view(const std::string &view_)
@@ -1661,7 +1661,7 @@ void Magick::Image::view(const std::string &view_)
 
 std::string Magick::Image::view(void) const
 {
-  return(constOptions()->view());
+  return constOptions()->view();
 }
 
 void Magick::Image::virtualPixelMethod(
@@ -1674,7 +1674,7 @@ void Magick::Image::virtualPixelMethod(
 
 Magick::VirtualPixelMethod Magick::Image::virtualPixelMethod(void) const
 {
-  return(GetImageVirtualPixelMethod(constImage()));
+  return GetImageVirtualPixelMethod(constImage());
 }
 
 void Magick::Image::x11Display(const std::string &display_)
@@ -1685,17 +1685,17 @@ void Magick::Image::x11Display(const std::string &display_)
 
 std::string Magick::Image::x11Display(void) const
 {
-  return(constOptions()->x11Display());
+  return constOptions()->x11Display();
 }
 
 double Magick::Image::xResolution(void) const
 {
-  return(constImage()->x_resolution);
+  return constImage()->x_resolution;
 }
 
 double Magick::Image::yResolution(void) const
 {
-  return(constImage()->y_resolution);
+  return constImage()->y_resolution;
 }
 
 void Magick::Image::adaptiveBlur(const double radius_,const double sigma_)
@@ -1940,8 +1940,8 @@ std::string Magick::Image::artifact(const std::string &name_)
 
   value=GetImageArtifact(constImage(),name_.c_str());
   if (value)
-    return(std::string(value));
-  return(std::string());
+    return std::string(value);
+  return std::string();
 }
 
 void Magick::Image::attribute(const std::string name_,const std::string value_)
@@ -1958,9 +1958,9 @@ std::string Magick::Image::attribute(const std::string name_)
   value=GetImageProperty(constImage(),name_.c_str());
 
   if (value)
-    return(std::string(value));
+    return std::string(value);
 
-  return(std::string()); // Intentionally no exception
+  return std::string(); // Intentionally no exception
 }
 
 void Magick::Image::autoGamma(void)
@@ -2313,13 +2313,13 @@ Magick::Color Magick::Image::colorMap(const size_t index_) const
   if (!constImage()->colormap)
     {
       throwExceptionExplicit(OptionError,"Image does not contain a colormap");
-      return(Color());
+      return Color();
     }
 
   if (index_ > constImage()->colors-1)
     throwExceptionExplicit(OptionError,"Index out of range");
 
-  return(Color((constImage()->colormap)[index_]));
+  return Color((constImage()->colormap)[index_]);
 }
 
 void Magick::Image::colorMatrix(const size_t order_,
@@ -2359,7 +2359,7 @@ bool Magick::Image::compare(const Image &reference_)
   ref.modifyImage();
   status=static_cast<bool>(IsImagesEqual(image(),ref.constImage()));
   throwImageException();
-  return(status);
+  return status;
 }
 
 double Magick::Image::compare(const Image &reference_,const MetricType metric_)
@@ -2371,7 +2371,7 @@ double Magick::Image::compare(const Image &reference_,const MetricType metric_)
   GetImageDistortion(image(),reference_.constImage(),metric_,&distortion,
     exceptionInfo);
   ThrowPPException;
-  return(distortion);
+  return distortion;
 }
 
 double Magick::Image::compareChannel(const ChannelType channel_,
@@ -2384,7 +2384,7 @@ double Magick::Image::compareChannel(const ChannelType channel_,
   GetImageChannelDistortion(image(),reference_.constImage(),channel_,metric_,
     &distortion,exceptionInfo);
   ThrowPPException;
-  return(distortion);
+  return distortion;
 }
 
 Magick::Image Magick::Image::compare(const Image &reference_,
@@ -2398,9 +2398,9 @@ Magick::Image Magick::Image::compare(const Image &reference_,
     exceptionInfo);
   ThrowPPException;
   if (newImage == (MagickCore::Image *) NULL)
-    return(Magick::Image());
+    return Magick::Image();
   else
-    return(Magick::Image(newImage));
+    return Magick::Image(newImage);
 }
 
 Magick::Image Magick::Image::compareChannel(const ChannelType channel_,
@@ -2414,9 +2414,9 @@ Magick::Image Magick::Image::compareChannel(const ChannelType channel_,
     metric_,distortion,exceptionInfo);
   ThrowPPException;
   if (newImage == (MagickCore::Image *) NULL)
-    return(Magick::Image());
+    return Magick::Image();
   else
-    return(Magick::Image(newImage));
+    return Magick::Image(newImage);
 }
 
 void Magick::Image::composite(const Image &compositeImage_,
@@ -2557,8 +2557,8 @@ bool Magick::Image::defineSet(const std::string &magick_,
   key=magick_ + ":" + key_;
   option=GetImageOption(constImageInfo(),key.c_str());
   if (option)
-    return(true);
-  return(false);
+    return true;
+  return false;
 }
 
 void Magick::Image::defineValue(const std::string &magick_,
@@ -2584,8 +2584,8 @@ std::string Magick::Image::defineValue(const std::string &magick_,
   definition=magick_ + ":" + key_;
   option=GetImageOption(constImageInfo(),definition.c_str());
   if (option)
-    return(std::string(option));
-  return(std::string());
+    return std::string(option);
+  return std::string();
 }
 
 void Magick::Image::deskew(const double threshold_)
@@ -2618,7 +2618,7 @@ Magick::ImageType Magick::Image::determineType(void) const
   GetPPException;
   image_type=GetImageType(constImage(),exceptionInfo);
   ThrowPPException;
-  return(image_type);
+  return image_type;
 }
 
 void Magick::Image::display(void)
@@ -3137,7 +3137,7 @@ const Magick::IndexPacket* Magick::Image::getConstIndexes(void) const
   if (!result)
     throwImageException();
 
-  return(result);
+  return result;
 }
 
 const Magick::PixelPacket* Magick::Image::getConstPixels(const ssize_t x_,
@@ -3149,7 +3149,7 @@ const Magick::PixelPacket* Magick::Image::getConstPixels(const ssize_t x_,
   GetPPException;
   result=(*GetVirtualPixels)(constImage(),x_,y_,columns_,rows_,exceptionInfo);
   ThrowPPException;
-  return(result);
+  return result;
 }
 
 Magick::IndexPacket *Magick::Image::getIndexes(void)
@@ -3162,7 +3162,7 @@ Magick::IndexPacket *Magick::Image::getIndexes(void)
   if(!result)
     throwImageException();
 
-  return(result);
+  return result;
 }
 
 Magick::PixelPacket *Magick::Image::getPixels(const ssize_t x_,
@@ -3175,7 +3175,7 @@ Magick::PixelPacket *Magick::Image::getPixels(const ssize_t x_,
   GetPPException;
   result=(*GetAuthenticPixels)(image(),x_,y_,columns_,rows_,exceptionInfo);
   ThrowPPException;
-  return(result);
+  return result;
 }
 
 void Magick::Image::grayscale(const PixelIntensityMethod method_)
@@ -3677,7 +3677,7 @@ Magick::Color Magick::Image::pixelColor(const ssize_t x_,
 
       pixel=getConstPixels(x_,y_,1,1);
       if (pixel)
-        return(Color(*pixel));
+        return Color(*pixel);
     }
   else if (storage_class == PseudoClass)
     {
@@ -3686,10 +3686,10 @@ Magick::Color Magick::Image::pixelColor(const ssize_t x_,
 
       indexes=getConstIndexes();
       if(indexes)
-        return(colorMap((size_t) *indexes));
+        return colorMap((size_t) *indexes);
     }
 
-  return(Color()); // invalid
+  return Color(); // invalid
 }
 
 void Magick::Image::polaroid(const std::string &caption_,const double angle_)
@@ -3758,9 +3758,9 @@ Magick::Blob Magick::Image::profile(const std::string name_) const
   profile=GetImageProfile(constImage(),name_.c_str());
 
   if (profile == (StringInfo *) NULL)
-    return(Blob());
-  return(Blob((void*) GetStringInfoDatum(profile),GetStringInfoLength(
-    profile)));
+    return Blob();
+  return Blob((void*) GetStringInfoDatum(profile),GetStringInfoLength(
+    profile));
 }
 
 void Magick::Image::quantize(const bool measureError_)
@@ -4146,9 +4146,9 @@ Magick::Image Magick::Image::separate(const ChannelType channel_)
   image=SeparateImage(constImage(),channel_,exceptionInfo);
   ThrowPPException;
   if (image == (MagickCore::Image *) NULL)
-    return(Magick::Image());
+    return Magick::Image();
   else
-    return(Magick::Image(image));
+    return Magick::Image(image);
 }
 
 void Magick::Image::sepiaTone(const double threshold_)
@@ -4172,7 +4172,7 @@ Magick::PixelPacket *Magick::Image::setPixels(const ssize_t x_,
   GetPPException;
   result=(*QueueAuthenticPixels)(image(),x_, y_,columns_,rows_,exceptionInfo);
   ThrowPPException;
-  return(result);
+  return result;
 }
 
 void Magick::Image::shade(const double azimuth_,const double elevation_,
@@ -4272,7 +4272,7 @@ std::string Magick::Image::signature(const bool force_) const
 
   property=GetImageProperty(constImage(),"Signature");
 
-  return(std::string(property));
+  return std::string(property);
 }
 
 void Magick::Image::sketch(const double radius_,const double sigma_,
@@ -4430,9 +4430,9 @@ Magick::Image Magick::Image::subImageSearch(const Image &reference_,
   if (offset_ != (Geometry *) NULL)
     *offset_=offset;
   if (newImage == (MagickCore::Image *) NULL)
-    return(Magick::Image());
+    return Magick::Image();
   else
-    return(Magick::Image(newImage));
+    return Magick::Image(newImage);
 }
 
 void Magick::Image::swirl(const double degrees_)
@@ -4622,9 +4622,9 @@ Magick::Image Magick::Image::uniqueColors(void)
   image=UniqueImageColors(constImage(),exceptionInfo);
   ThrowPPException;
   if (image == (MagickCore::Image *) NULL)
-    return(Magick::Image());
+    return Magick::Image();
   else
-    return(Magick::Image(image));
+    return Magick::Image(image);
 }
 
 void Magick::Image::unsharpmask(const double radius_,const double sigma_,
@@ -4811,42 +4811,42 @@ Magick::Image::Image(MagickCore::Image *image_)
 
 MagickCore::Image *&Magick::Image::image(void)
 {
-  return(_imgRef->image());
+  return _imgRef->image();
 }
 
 const MagickCore::Image *Magick::Image::constImage(void) const
 {
-  return(_imgRef->image());
+  return _imgRef->image();
 }
 
 MagickCore::ImageInfo *Magick::Image::imageInfo(void)
 {
-  return(_imgRef->options()->imageInfo());
+  return _imgRef->options()->imageInfo();
 }
 
 const MagickCore::ImageInfo *Magick::Image::constImageInfo(void) const
 {
-  return(_imgRef->options()->imageInfo());
+  return _imgRef->options()->imageInfo();
 }
 
 Magick::Options *Magick::Image::options(void)
 {
-  return(_imgRef->options());
+  return _imgRef->options();
 }
 
 const Magick::Options *Magick::Image::constOptions(void) const
 {
-  return(_imgRef->options());
+  return _imgRef->options();
 }
 
 MagickCore::QuantizeInfo *Magick::Image::quantizeInfo(void)
 {
-  return(_imgRef->options()->quantizeInfo());
+  return _imgRef->options()->quantizeInfo();
 }
 
 const MagickCore::QuantizeInfo *Magick::Image::constQuantizeInfo(void) const
 {
-  return(_imgRef->options()->quantizeInfo());
+  return _imgRef->options()->quantizeInfo();
 }
 
 void Magick::Image::modifyImage(void)
@@ -4881,7 +4881,7 @@ ssize_t Magick::Image::registerId(void)
       SetImageRegistry(ImageRegistryType,id,image(),exceptionInfo);
       ThrowPPException;
     }
-  return(_imgRef->id());
+  return _imgRef->id();
 }
 
 MagickCore::Image *Magick::Image::replaceImage(MagickCore::Image *replacement_)
@@ -4911,7 +4911,7 @@ MagickCore::Image *Magick::Image::replaceImage(MagickCore::Image *replacement_)
       }
   }
 
-  return(_imgRef->_image);
+  return _imgRef->_image;
 }
 
 void Magick::Image::throwImageException(void) const
diff --git a/Magick++/lib/Options.cpp b/Magick++/lib/Options.cpp
index 9804453..c2512bd 100644
--- a/Magick++/lib/Options.cpp
+++ b/Magick++/lib/Options.cpp
@@ -102,9 +102,9 @@ void Magick::Options::backgroundTexture(const std::string &backgroundTexture_)
 std::string Magick::Options::backgroundTexture(void) const
 {
   if (_imageInfo->texture)
-    return(std::string(_imageInfo->texture));
+    return std::string(_imageInfo->texture);
   else
-    return(std::string());
+    return std::string();
 }
 
 void Magick::Options::borderColor(const Color &color_)
@@ -187,7 +187,7 @@ Magick::Geometry Magick::Options::density(void) const
   if (_imageInfo->density)
     return(Geometry(_imageInfo->density));
 
-  return(Geometry());
+  return Geometry();
 }
 
 void Magick::Options::depth(size_t depth_)
@@ -297,7 +297,7 @@ std::string Magick::Options::font(void) const
   if (_imageInfo->font)
     return(std::string(_imageInfo->font));
 
-  return(std::string());
+  return std::string();
 }
 
 void Magick::Options::fontPointsize(double pointSize_)
@@ -324,7 +324,7 @@ std::string Magick::Options::format(void) const
   if ((magick_info != 0) && (*magick_info->description != '\0'))
     return(std::string(magick_info->description));
   
-  return(std::string());
+  return std::string();
 }
 
 void Magick::Options::interlaceType(Magick::InterlaceType interlace_)
@@ -354,7 +354,7 @@ std::string Magick::Options::magick(void) const
   if (*_imageInfo->magick)
     return(std::string(_imageInfo->magick));
  
-  return(std::string());
+  return std::string();
 }
 
 void Magick::Options::matteColor(const Magick::Color &matteColor_)
@@ -390,7 +390,7 @@ Magick::Geometry Magick::Options::page(void) const
   if (_imageInfo->page)
     return(Geometry(_imageInfo->page));
 
-  return(Geometry());
+  return Geometry();
 }
 
 void Magick::Options::quality(size_t quality_)
@@ -478,7 +478,7 @@ std::string Magick::Options::samplingFactor(void) const
   if (_imageInfo->sampling_factor)
     return(std::string(_imageInfo->sampling_factor));
 
-  return(std::string());
+  return std::string();
 }
 
 void Magick::Options::size(const Geometry &geometry_)
@@ -494,7 +494,7 @@ Magick::Geometry Magick::Options::size(void) const
   if (_imageInfo->size)
     return(Geometry(_imageInfo->size));
 
-  return(Geometry());
+  return Geometry();
 }
 
 void Magick::Options::strokeAntiAlias(bool flag_)
@@ -652,7 +652,7 @@ std::string Magick::Options::textEncoding(void) const
   if (_drawInfo->encoding && *_drawInfo->encoding)
     return(std::string(_drawInfo->encoding));
   
-  return(std::string());
+  return std::string();
 }
 
 void Magick::Options::textGravity(GravityType gravity_)
@@ -707,7 +707,7 @@ std::string Magick::Options::tileName(void) const
 {
   if (_imageInfo->tile)
     return(std::string(_imageInfo->tile));
-  return(std::string());
+  return std::string();
 }
 
 void Magick::Options::transformOrigin(double tx_,double ty_)
@@ -889,7 +889,7 @@ std::string Magick::Options::view(void) const
   if (_imageInfo->view)
     return(std::string(_imageInfo->view));
 
-  return(std::string());
+  return std::string();
 }
 
 void Magick::Options::x11Display(const std::string &display_)
@@ -906,7 +906,7 @@ std::string Magick::Options::x11Display(void) const
   if (_imageInfo->server_name)
     return(std::string(_imageInfo->server_name));
 
-  return(std::string());
+  return std::string();
 }
 
 MagickCore::DrawInfo *Magick::Options::drawInfo(void)
diff --git a/Magick++/lib/STL.cpp b/Magick++/lib/STL.cpp
index 2778ec7..8941aca 100644
--- a/Magick++/lib/STL.cpp
+++ b/Magick++/lib/STL.cpp
@@ -850,7 +850,7 @@ Magick::Geometry Magick::ReadOptions::density(void) const
   if (_imageInfo->density)
     return(Geometry(_imageInfo->density));
 
-  return(Geometry());
+  return Geometry();
 }
 
 void Magick::ReadOptions::depth(size_t depth_)
@@ -876,7 +876,7 @@ Magick::Geometry Magick::ReadOptions::size(void) const
   if (_imageInfo->size)
     return(Geometry(_imageInfo->size));
 
-  return(Geometry());
+  return Geometry();
 }
 
 MagickCore::ImageInfo *Magick::ReadOptions::imageInfo(void)
-- 
1.8.3.4


From 440fbab037cdc40010da4b864a21521ae1513767 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@gmail.com>
Date: Sun, 26 Oct 2014 17:47:29 +0100
Subject: Don't reset LIBRARY_PATH.

Using a variable named LIBRARY_PATH is not a good idea on Haiku. Just
rename it.

diff --git a/configure.ac b/configure.ac
index f7b167a..2c95828 100755
--- a/configure.ac
+++ b/configure.ac
@@ -3041,15 +3041,15 @@ AC_DEFINE_UNQUOTED(EXECUTABLE_PATH,"$DEFINE_EXECUTABLE_PATH",[Directory where ex
 AC_SUBST(EXECUTABLE_PATH)
 
 # Path to ImageMagick lib
-LIBRARY_PATH="${LIB_DIR}/${LIBRARY_RELATIVE_PATH}"
-DEFINE_LIBRARY_PATH="${LIB_DIR}/${LIBRARY_RELATIVE_PATH}/"
+XLIBRARY_PATH="${LIB_DIR}/${LIBRARY_RELATIVE_PATH}"
+DEFINE_XLIBRARY_PATH="${LIB_DIR}/${LIBRARY_RELATIVE_PATH}/"
 case "${build_os}" in
   mingw* )
-    DEFINE_LIBRARY_PATH=`$WinPathScript "$DEFINE_LIBRARY_PATH" 1`
+    DEFINE_XLIBRARY_PATH=`$WinPathScript "$DEFINE_XLIBRARY_PATH" 1`
     ;;
 esac
-AC_DEFINE_UNQUOTED(LIBRARY_PATH,"$DEFINE_LIBRARY_PATH",[Directory where architecture-dependent files live.])
-AC_SUBST(LIBRARY_PATH)
+AC_DEFINE_UNQUOTED(XLIBRARY_PATH,"$DEFINE_XLIBRARY_PATH",[Directory where architecture-dependent files live.])
+AC_SUBST(XLIBRARY_PATH)
 
 #
 # path to local binaries
@@ -3066,7 +3066,7 @@ AC_SUBST(LIB_BIN_DIR)
 
 LIB_BIN_DIR_RELATIVE_PATH=$LIB_BIN_DIR
 AC_SUBST(LIB_BIN_DIR_RELATIVE_PATH)
-LIB_BIN_DIR_PATH="${LIBRARY_PATH}/${LIB_BIN_DIR_RELATIVE_PATH}"
+LIB_BIN_DIR_PATH="${XLIBRARY_PATH}/${LIB_BIN_DIR_RELATIVE_PATH}"
 AC_SUBST(LIB_BIN_DIR_PATH)
 
 #
@@ -3086,7 +3086,7 @@ AC_SUBST(MODULES_DIRNAME)
 
 MODULES_RELATIVE_PATH="${MODULES_DIRNAME}"
 AC_SUBST(MODULES_RELATIVE_PATH)
-MODULES_PATH="${LIBRARY_PATH}/${MODULES_RELATIVE_PATH}"
+MODULES_PATH="${XLIBRARY_PATH}/${MODULES_RELATIVE_PATH}"
 AC_SUBST(MODULES_PATH)
 
 #
@@ -3179,7 +3179,7 @@ AC_SUBST(SHAREARCH_DIRNAME)
 
 SHAREARCH_RELATIVE_PATH="${SHAREARCH_DIRNAME}"
 AC_SUBST(SHAREARCH_RELATIVE_PATH)
-SHAREARCH_PATH="${LIBRARY_PATH}/${SHAREARCH_RELATIVE_PATH}"
+SHAREARCH_PATH="${XLIBRARY_PATH}/${SHAREARCH_RELATIVE_PATH}"
 AC_SUBST(SHAREARCH_PATH)
 #
 # program_transform_name is formed for use in a Makefile, so create a
-- 
1.8.3.4

