From c94a4ad74eb35eb7b1c158a2c602bf5b4a6dacaa Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 16 Mar 2024 23:23:49 +1000
Subject: Fix build for Haiku


diff --git a/extensions/meson.build b/extensions/meson.build
index 23132c2..305fdba 100644
--- a/extensions/meson.build
+++ b/extensions/meson.build
@@ -1,4 +1,4 @@
-subdir('goat-exercises')
+#subdir('goat-exercises')
 
 if have_lua and not meson.is_cross_build() and is_variable('lua') and lua.found() and (platform_windows or not relocatable_bundle)
   lua_config = configuration_data()
diff --git a/libgimpbase/gimputils.c b/libgimpbase/gimputils.c
index 18bfe5a..e24e3da 100644
--- a/libgimpbase/gimputils.c
+++ b/libgimpbase/gimputils.c
@@ -51,7 +51,9 @@
 
 /* For thread IDs. */
 #include <sys/types.h>
+#ifndef __HAIKU__
 #include <sys/syscall.h>
+#endif
 
 #ifdef HAVE_SYS_PRCTL_H
 #include <sys/prctl.h>
diff --git a/meson.build b/meson.build
index c069c68..a66500c 100644
--- a/meson.build
+++ b/meson.build
@@ -177,6 +177,10 @@ platform_linux = (
   host_os.contains('linux')
 )
 
+platform_haiku = (
+  host_os.contains('haiku')
+)
+
 platform_windows = (
   host_os.contains('mingw') or
   host_os.contains('cygwin') or
@@ -193,6 +197,10 @@ if platform_osx
   conf.set('PLATFORM_OSX', 1)
 endif
 
+platform_haiku = (
+  host_os.contains('haiku')
+)
+
 if platform_windows
   windows = import('windows')
   # AC_CHECK_PROG(ms_librarian, lib.exe, yes, no)
@@ -711,7 +719,7 @@ conf.set('HAVE_EXCHNDL', drmingw.found())
 ################################################################################
 # Check for x11 support
 
-x11_target = gtk3.get_variable(pkgconfig: 'targets').contains('x11')
+x11_target = false
 
 x11   = x11_target ? dependency('x11')    : no_dep
 xmu   = x11_target ? dependency('xmu')    : no_dep
@@ -1148,8 +1156,8 @@ endif
 isocodes = dependency('iso-codes', required: false)
 if isocodes.found()
   isocodes_prefix = isocodes.get_variable(pkgconfig: 'prefix')
-  isocodes_location = isocodes_prefix / 'share' / 'xml' / 'iso-codes'
-  isocodes_localedir= isocodes_prefix / 'share' / 'locale'
+  isocodes_location = isocodes_prefix / 'data' / 'xml' / 'iso-codes'
+  isocodes_localedir= isocodes_prefix / 'data' / 'locale'
 endif
 conf.set('HAVE_ISO_CODES', isocodes.found())
 
@@ -1353,6 +1361,8 @@ conf.set_quoted('GIMP_BUILD_ID', get_option('build-id'))
 conf.set_quoted('GIMP_BUILD_PLATFORM', host_os)
 if platform_linux
   conf.set_quoted('GIMP_BUILD_PLATFORM_FAMILY', 'linux')
+elif platform_haiku
+  conf.set_quoted('GIMP_BUILD_PLATFORM_FAMILY', 'haiku')
 elif platform_windows
   conf.set_quoted('GIMP_BUILD_PLATFORM_FAMILY', 'windows')
 elif platform_osx
@@ -1714,10 +1724,7 @@ endif
 
 
 # git-version.h is already present and not generated if dist tarball
-is_git_repository = run_command(python, '-c',
-  'import sys,os; sys.exit(0 if os.path.exists(".git") else 1)',
-  check: false
-).returncode() == 0
+is_git_repository = false
 
 has_version_h = run_command(python, '-c',
   'import sys,os; sys.exit(0 if os.path.exists("git-version.h") else 1)',
@@ -2057,7 +2064,7 @@ else
   gimp_exe_depends = []
 endif
 
-gimp_exe = find_program('tools'/'in-build-gimp.py')
+gimp_exe = find_program('echo')
 
 ################################################################################
 # Subdirs: part 2
diff --git a/plug-ins/meson.build b/plug-ins/meson.build
index e1c6ad8..bf208ec 100644
--- a/plug-ins/meson.build
+++ b/plug-ins/meson.build
@@ -28,7 +28,7 @@ subdir('metadata')
 subdir('pagecurl')
 subdir('print')
 subdir('python')
-subdir('screenshot')
+#subdir('screenshot')
 subdir('script-fu')
 subdir('selection-to-path')
 subdir('twain')
diff --git a/plug-ins/script-fu/server/script-fu-server.c b/plug-ins/script-fu/server/script-fu-server.c
index 55cebf1..9e37373 100644
--- a/plug-ins/script-fu/server/script-fu-server.c
+++ b/plug-ins/script-fu/server/script-fu-server.c
@@ -106,7 +106,7 @@ typedef short sa_family_t; /* Not defined by winsock */
 #define difftime(a,b) (((gdouble)(a)) - ((gdouble)(b)))
 #endif
 
-#ifndef NO_FD_SET
+#if !defined(NO_FD_SET) || defined(__HAIKU__)
 #  define SELECT_MASK fd_set
 #else
 #  ifndef _AIX
-- 
2.48.1


From 10057d31a0d6ea293938c384120810c2fb98b41f Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 16 Mar 2024 23:24:11 +1000
Subject: Use load_image instead g_spawn_async


diff --git a/app/core/gimp-spawn.c b/app/core/gimp-spawn.c
index bfa08e8..6aeb5b4 100644
--- a/app/core/gimp-spawn.c
+++ b/app/core/gimp-spawn.c
@@ -22,6 +22,10 @@
 
 #include <glib-object.h>
 
+#ifdef __HAIKU__
+#undef HAVE_VFORK
+#endif
+
 #ifdef HAVE_VFORK
 #include <sys/types.h>
 #include <sys/wait.h>
@@ -38,6 +42,11 @@
 #include <io.h>
 #endif
 
+#ifdef __HAIKU__
+#include <stdio.h>
+#include <image.h>
+#endif
+
 #include "core-types.h"
 
 #include "gimp-spawn.h"
@@ -166,6 +175,25 @@ gimp_spawn_async (gchar       **argv,
 {
   g_return_val_if_fail (argv != NULL, FALSE);
   g_return_val_if_fail (argv[0] != NULL, FALSE);
+  
+#ifdef __HAIKU__
+
+  int argc = 0;
+  while (argv[argc] != NULL) argc++;
+  team_id team = load_image(argc, argv, envp);
+  if (team < 0) {
+		g_set_error (error,
+		             G_SPAWN_ERROR,
+		             G_SPAWN_ERROR_FORK,
+		             _("Failed to fork (%s)"),
+		             g_strerror (team));
+  	return FALSE;
+  }
+  resume_thread(team);
+  *child_pid = team;
+  return TRUE;
+
+#else
 
 #ifdef HAVE_VFORK
   if (flags == (G_SPAWN_LEAVE_DESCRIPTORS_OPEN |
@@ -235,6 +263,7 @@ gimp_spawn_async (gchar       **argv,
 #endif /* HAVE_VFORK */
 
   return g_spawn_async (NULL, argv, envp, flags, NULL, NULL, child_pid, error);
+#endif /* __HAIKU__ */
 }
 
 void
-- 
2.48.1


From 69952673825682ea339103270ba1d06622c6c8e3 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 16 Mar 2024 23:24:33 +1000
Subject: Fix preferences dialog freeze


diff --git a/app/dialogs/preferences-dialog.c b/app/dialogs/preferences-dialog.c
index 170d42e..07f66ea 100644
--- a/app/dialogs/preferences-dialog.c
+++ b/app/dialogs/preferences-dialog.c
@@ -1333,6 +1333,7 @@ prefs_dialog_new (Gimp       *gimp,
    * which case the feature is always available.
    */
   hbox = NULL;
+#if 0
   if (! gimp_stack_trace_available (TRUE))
     {
 #ifndef HAVE_EXECINFO_H
@@ -1344,6 +1345,7 @@ prefs_dialog_new (Gimp       *gimp,
                                  _("This feature is more efficient with \"gdb\" or \"lldb\" installed on your system."));
 #endif /* ! HAVE_EXECINFO_H */
     }
+#endif
   if (hbox)
     gtk_box_pack_start (GTK_BOX (vbox2), hbox, FALSE, FALSE, 0);
 
-- 
2.48.1


From c39e566d75dbce43595f2b5e024d0defaa75836a Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 16 Mar 2024 23:26:30 +1000
Subject: Disable signal handlers


diff --git a/app/main.c b/app/main.c
index 9db78ed..377bf7c 100644
--- a/app/main.c
+++ b/app/main.c
@@ -591,7 +591,9 @@ main (int    argc,
   gimp_backtrace_init ();
 
   /* Start signal handlers early. */
+#ifndef __HAIKU__
   gimp_init_signal_handlers (&backtrace_file);
+#endif
 
 #ifdef G_OS_WIN32
   /* Make Inno aware of gimp process avoiding broken install/unninstall */
diff --git a/libgimp/gimp.c b/libgimp/gimp.c
index 48a2d1f..a8d75e7 100644
--- a/libgimp/gimp.c
+++ b/libgimp/gimp.c
@@ -257,8 +257,8 @@ gimp_main (GType  plug_in_type,
     /* Similar to core crash handling in app/signals.c, the order here
      * is very important!
      */
-    if (! _prevExceptionFilter)
-      _prevExceptionFilter = SetUnhandledExceptionFilter (gimp_plugin_sigfatal_handler);
+//    if (! _prevExceptionFilter)
+//      _prevExceptionFilter = SetUnhandledExceptionFilter (gimp_plugin_sigfatal_handler);
 
     ExcHndlInit ();
 
@@ -389,15 +389,15 @@ gimp_main (GType  plug_in_type,
    * about the program error, and offer debugging if the plug-in
    * has been built with MSVC, and the user has MSVC installed.
    */
-  gimp_signal_private (SIGHUP,  gimp_plugin_sigfatal_handler, 0);
-  gimp_signal_private (SIGINT,  gimp_plugin_sigfatal_handler, 0);
-  gimp_signal_private (SIGQUIT, gimp_plugin_sigfatal_handler, 0);
-  gimp_signal_private (SIGTERM, gimp_plugin_sigfatal_handler, 0);
-
-  gimp_signal_private (SIGABRT, gimp_plugin_sigfatal_handler, 0);
-  gimp_signal_private (SIGBUS,  gimp_plugin_sigfatal_handler, 0);
-  gimp_signal_private (SIGSEGV, gimp_plugin_sigfatal_handler, 0);
-  gimp_signal_private (SIGFPE,  gimp_plugin_sigfatal_handler, 0);
+//  gimp_signal_private (SIGHUP,  gimp_plugin_sigfatal_handler, 0);
+//  gimp_signal_private (SIGINT,  gimp_plugin_sigfatal_handler, 0);
+//  gimp_signal_private (SIGQUIT, gimp_plugin_sigfatal_handler, 0);
+//  gimp_signal_private (SIGTERM, gimp_plugin_sigfatal_handler, 0);
+
+//  gimp_signal_private (SIGABRT, gimp_plugin_sigfatal_handler, 0);
+//  gimp_signal_private (SIGBUS,  gimp_plugin_sigfatal_handler, 0);
+//  gimp_signal_private (SIGSEGV, gimp_plugin_sigfatal_handler, 0);
+//  gimp_signal_private (SIGFPE,  gimp_plugin_sigfatal_handler, 0);
 
   /* Ignore SIGPIPE from crashing Gimp */
   gimp_signal_private (SIGPIPE, SIG_IGN, 0);
diff --git a/libgimpbase/gimpsignal.c b/libgimpbase/gimpsignal.c
index 0c00c2f..4deaf32 100644
--- a/libgimpbase/gimpsignal.c
+++ b/libgimpbase/gimpsignal.c
@@ -69,7 +69,7 @@ gimp_signal_private (gint                   signum,
                      GimpSignalHandlerFunc  handler,
                      gint                   flags)
 {
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(__HAIKU__)
   gint ret;
   struct sigaction sa;
   struct sigaction osa;
-- 
2.48.1


From 325e65df84ff4a2a600a4540e9f7ec2cf71e1195 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Tue, 18 Mar 2025 18:14:59 +1000
Subject: Implement open url


diff --git a/plug-ins/common/web-browser.c b/plug-ins/common/web-browser.c
index d242ff2..96bc331 100644
--- a/plug-ins/common/web-browser.c
+++ b/plug-ins/common/web-browser.c
@@ -224,6 +224,23 @@ browser_open_url (GtkWindow    *window,
 
   return TRUE;
 
+#elif defined(__HAIKU__)
+
+  gchar *command;
+  gint exit_status;
+
+  command = g_strdup_printf ("open %s", url);
+  exit_status = system (command);
+  g_free (command);
+
+  if (exit_status != 0)
+    {
+      g_set_error (error, 0, 0, _("Failed to open '%s': command exited with status %d"), url, exit_status);
+      return FALSE;
+    }
+
+  return TRUE;
+
 #elif defined(PLATFORM_OSX)
 
   NSURL    *ns_url;
-- 
2.48.1


From 932325d5b8093fec7a8296ca584e4ccf915bee97 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Tue, 18 Mar 2025 12:08:38 +0000
Subject: Remove generate introspection


diff --git a/libgimp/meson.build b/libgimp/meson.build
index e191576..914601f 100644
--- a/libgimp/meson.build
+++ b/libgimp/meson.build
@@ -504,44 +504,6 @@ else
     '--quiet',
   ]
 
-  libgimp_gir = gnome.generate_gir(
-    libgimp,
-    libgimpbase,
-    libgimpcolor,
-    libgimpconfig,
-    libgimpmath,
-    libgimpmodule,
-
-    sources: libgimp_introspectable_files,
-    nsversion: gimp_api_version,
-    namespace: 'Gimp',
-    identifier_prefix: 'Gimp',
-    symbol_prefix: 'gimp',
-    export_packages: 'gimp-' + gimp_api_version,
-    header: 'libgimp/gimp.h',
-    includes: libgimp_gir_includes,
-    extra_args: gir_args,
-    include_directories: rootInclude,
-    install: true,
-  )
-
-  libgimpui_gir = gnome.generate_gir(
-    libgimpui,
-    libgimpwidgets,
-
-    sources: libgimpui_introspectable_files,
-    nsversion: gimp_api_version,
-    namespace: 'GimpUi',
-    identifier_prefix: 'Gimp',
-    symbol_prefix: [ 'gimp_ui', 'gimp' ],
-    export_packages: 'gimp-ui-' + gimp_api_version,
-    header: 'libgimp/gimpui.h',
-    includes: [ libgimp_gir_includes, 'Gtk-3.0', libgimp_gir[0] ],
-    extra_args: gir_args,
-    include_directories: rootInclude,
-    install: true,
-  )
-
   if platform_osx
     g_ir_compiler = find_program('g-ir-compiler')
     gimp_exe_typelib = custom_target('macos-typelib.stamp',
-- 
2.48.1

