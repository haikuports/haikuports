From 9cc06c442e40499988b15302d00154b59760c3c3 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 8 Mar 2025 00:05:18 +1000
Subject: Fixes for Haiku


diff --git a/CMakeLists.txt b/CMakeLists.txt
index a112949..07fb3da 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -155,7 +155,7 @@ set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
 # To be able to link libslic3r with the Perl XS module.
 # Once we get rid of Perl and libslic3r is linked statically, we can get rid of -fPIC
-set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+#set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
 # WIN10SDK_PATH is used to point CMake to the WIN10 SDK installation directory.
 # We pick it from environment if it is not defined in another way
@@ -542,7 +542,7 @@ endforeach()
 
 find_package(NLopt 1.4 REQUIRED)
 
-if(SLIC3R_STATIC)
+if(SLIC3R_STATIC OR HAIKU)
     set(OPENVDB_USE_STATIC_LIBS ON)
     set(USE_BLOSC TRUE)
 endif ()
diff --git a/cmake/modules/CheckAtomic.cmake b/cmake/modules/CheckAtomic.cmake
index c045e30..b5235e2 100644
--- a/cmake/modules/CheckAtomic.cmake
+++ b/cmake/modules/CheckAtomic.cmake
@@ -69,7 +69,7 @@ if(NOT HAVE_CXX_ATOMICS64_WITHOUT_LIB)
     list(APPEND CMAKE_REQUIRED_LIBRARIES "atomic")
     check_working_cxx_atomics64(HAVE_CXX_ATOMICS64_WITH_LIB)
     if (NOT HAVE_CXX_ATOMICS64_WITH_LIB)
-      message(FATAL_ERROR "Host compiler must support 64-bit std::atomic!")
+#      message(FATAL_ERROR "Host compiler must support 64-bit std::atomic!")
     endif()
   else()
     message(FATAL_ERROR "Host compiler appears to require libatomic for 64-bit operations, but cannot find it.")
@@ -103,4 +103,4 @@ int main() {
 
 if( NOT LLVM_HAS_ATOMICS )
   message(STATUS "Warning: LLVM will be built thread-unsafe because atomic builtins are missing")
-endif()
\ No newline at end of file
+endif()
diff --git a/cmake/modules/FindTBB.cmake.in b/cmake/modules/FindTBB.cmake.in
index 2177170..3361d30 100644
--- a/cmake/modules/FindTBB.cmake.in
+++ b/cmake/modules/FindTBB.cmake.in
@@ -301,7 +301,7 @@ if(NOT TBB_FOUND)
     add_library(TBB::tbb UNKNOWN IMPORTED)
     set_target_properties(TBB::tbb PROPERTIES
           INTERFACE_COMPILE_DEFINITIONS "${TBB_DEFINITIONS}"
-          INTERFACE_LINK_LIBRARIES  "Threads::Threads;${CMAKE_DL_LIBS}"
+          INTERFACE_LINK_LIBRARIES  "Threads::Threads;
           INTERFACE_INCLUDE_DIRECTORIES  ${TBB_INCLUDE_DIRS}
           IMPORTED_LOCATION              ${TBB_LIBRARIES})
     if(TBB_LIBRARIES_RELEASE AND TBB_LIBRARIES_DEBUG)
diff --git a/deps/Blosc/Blosc.cmake b/deps/Blosc/Blosc.cmake
index d7a5e39..13a66fe 100644
--- a/deps/Blosc/Blosc.cmake
+++ b/deps/Blosc/Blosc.cmake
@@ -16,7 +16,6 @@ prusaslicer_add_cmake_project(Blosc
     # Patching upstream does not work this way with git version 2.28 installed on mac worker
     # PATCH_COMMAND  ${GIT_EXECUTABLE} apply --ignore-space-change --whitespace=fix ${CMAKE_CURRENT_LIST_DIR}/blosc-mods.patch
     CMAKE_ARGS
-        -DCMAKE_POSITION_INDEPENDENT_CODE=ON
         -DBUILD_SHARED=${_build_shared} 
         -DBUILD_STATIC=${_build_static}
         -DBUILD_TESTS=OFF 
@@ -35,7 +34,6 @@ prusaslicer_add_cmake_project(Blosc
     # Patching upstream does not work this way with git version 2.28 installed on mac worker
     # PATCH_COMMAND  ${GIT_EXECUTABLE} apply --ignore-space-change --whitespace=fix ${CMAKE_CURRENT_LIST_DIR}/blosc-mods.patch
     CMAKE_ARGS
-        -DCMAKE_POSITION_INDEPENDENT_CODE=ON
         -DBUILD_SHARED=${_build_shared} 
         -DBUILD_STATIC=${_build_static}
         -DBUILD_TESTS=OFF 
@@ -46,4 +44,4 @@ endif()
 
 if (MSVC)
     add_debug_dep(dep_Blosc)
-endif ()
\ No newline at end of file
+endif ()
diff --git a/deps/Boost/Boost.cmake b/deps/Boost/Boost.cmake
index c600b2b..e7d5980 100644
--- a/deps/Boost/Boost.cmake
+++ b/deps/Boost/Boost.cmake
@@ -68,7 +68,7 @@ ProcessorCount(NPROC)
 file(TO_NATIVE_PATH ${DESTDIR}/usr/local/ _prefix)
 
 set(_boost_flags "")
-if (UNIX) 
+if (UNIX OR HAIKU) 
     set(_boost_flags "cflags=-fPIC;cxxflags=-fPIC")
 endif ()
 
@@ -228,4 +228,4 @@ if ("${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
     )
     # Only override boost::Polygon Voronoi implementation with Vojtech's GMP hacks on 64bit platforms.
     list(APPEND _dep_list "dep_boost_polygon")
-endif ()
\ No newline at end of file
+endif ()
diff --git a/deps/CGAL/CGAL.cmake b/deps/CGAL/CGAL.cmake
index b43467b..9745777 100644
--- a/deps/CGAL/CGAL.cmake
+++ b/deps/CGAL/CGAL.cmake
@@ -5,7 +5,6 @@ prusaslicer_add_cmake_project(
     # For whatever reason, this keeps downloading forever (repeats downloads if finished)
     URL      https://github.com/CGAL/cgal/archive/releases/CGAL-5.0.zip
     URL_HASH SHA256=c2b035bd078687b6d8c0fb6371a7443adcdb647856af9969532c4050cd5f48e5
-    DEPENDS dep_Boost dep_GMP dep_MPFR
 )
 
 include(GNUInstallDirs)
diff --git a/deps/CMakeLists.txt b/deps/CMakeLists.txt
index 8bb2b33..453d2d6 100644
--- a/deps/CMakeLists.txt
+++ b/deps/CMakeLists.txt
@@ -199,8 +199,8 @@ if (NOT EXPAT_FOUND)
     set(EXPAT_PKG dep_EXPAT)
 endif ()
 
-set(DEP_Boost_COMPONENTS system iostreams filesystem thread log locale regex date_time)
-include(Boost/Boost.cmake)
+#set(DEP_Boost_COMPONENTS system iostreams filesystem thread log locale regex date_time)
+#include(Boost/Boost.cmake)
 
 # The order of includes respects the dependencies between libraries
 include(Cereal/Cereal.cmake)
@@ -214,13 +214,13 @@ include(Blosc/Blosc.cmake)
 include(OpenEXR/OpenEXR.cmake)
 include(OpenVDB/OpenVDB.cmake)
 
-include(GMP/GMP.cmake)
-include(MPFR/MPFR.cmake)
+#include(GMP/GMP.cmake)
+#include(MPFR/MPFR.cmake)
 include(CGAL/CGAL.cmake)
 
 include(NLopt/NLopt.cmake)
 
-include(OpenSSL/OpenSSL.cmake)
+#include(OpenSSL/OpenSSL.cmake)
 
 set(CURL_PKG "")
 if (NOT CURL_FOUND) 
@@ -234,19 +234,13 @@ include(wxWidgets/wxWidgets.cmake)
 include(OCCT/OCCT.cmake)
 
 set(_dep_list
-    dep_Boost
     dep_TBB
-    ${CURL_PKG}
-    dep_wxWidgets
     dep_Cereal
     dep_NLopt
     dep_OpenVDB
     dep_OpenCSG
     dep_CGAL
     dep_OCCT
-    ${PNG_PKG}
-    ${ZLIB_PKG}
-    ${EXPAT_PKG}
     )
 
 if (MSVC)
diff --git a/deps/CURL/CURL.cmake b/deps/CURL/CURL.cmake
index 0bdcc33..6467761 100644
--- a/deps/CURL/CURL.cmake
+++ b/deps/CURL/CURL.cmake
@@ -71,7 +71,6 @@ prusaslicer_add_cmake_project(CURL
   PATCH_COMMAND       "${_patch_command}"
   CMAKE_ARGS
     -DBUILD_TESTING:BOOL=OFF
-    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
     ${_curl_platform_flags}
 )
 
diff --git a/deps/MPFR/MPFR.cmake b/deps/MPFR/MPFR.cmake
index 1a5ab9d..a5e7667 100644
--- a/deps/MPFR/MPFR.cmake
+++ b/deps/MPFR/MPFR.cmake
@@ -34,6 +34,5 @@ else ()
         BUILD_COMMAND make -j
         INSTALL_COMMAND make install
         ${_cmake_args_osx_arch}
-        DEPENDS dep_GMP
     )
 endif ()
diff --git a/deps/OCCT/OCCT.cmake b/deps/OCCT/OCCT.cmake
index 9981ac1..177fe6f 100644
--- a/deps/OCCT/OCCT.cmake
+++ b/deps/OCCT/OCCT.cmake
@@ -2,6 +2,7 @@ prusaslicer_add_cmake_project(OCCT
     #LMBBS: changed version to 7.6.2
     URL https://github.com/Open-Cascade-SAS/OCCT/archive/refs/tags/V7_6_2.zip
     URL_HASH SHA256=c696b923593e8c18d059709717dbf155b3e72fdd283c8522047a790ec3a432c5
+    PATCH_COMMAND patch -p1 < ${CMAKE_CURRENT_LIST_DIR}/haiku.patch
 
     CMAKE_ARGS
         -DINSTALL_DIR_LAYOUT=Unix # LMBBS
diff --git a/deps/OCCT/haiku.patch b/deps/OCCT/haiku.patch
new file mode 100644
index 0000000..84b2400
--- /dev/null
+++ b/deps/OCCT/haiku.patch
@@ -0,0 +1,36 @@
+diff -ruN a/src/OSD/OSD_Path.cxx b/src/dep_OCCT/src/OSD/OSD_Path.cxx
+--- a/src/OSD/OSD_Path.cxx	2022-02-01 22:05:58.058982400 +1000
++++ b/src/dep_OCCT/src/OSD/OSD_Path.cxx	2025-03-05 10:44:53.954728448 +1000
+@@ -23,7 +23,7 @@
+ 
+ static OSD_SysType whereAmI()
+ {
+-#if defined(__digital__) || defined(__FreeBSD__) || defined(SUNOS) || defined(__APPLE__) || defined(__QNX__) || defined(__FreeBSD_kernel__)
++#if defined(__digital__) || defined(__FreeBSD__) || defined(SUNOS) || defined(__APPLE__) || defined(__QNX__) || defined(__FreeBSD_kernel__) || defined(__HAIKU__)
+   return OSD_UnixBSD;
+ #elif defined(sgi)  || defined(IRIX) || defined(__sun)  || defined(SOLARIS) ||  defined(__sco__) || defined(__hpux) || defined(HPUX)
+   return OSD_UnixSystemV;
+diff -ruN a/src/OSD/OSD_signal.cxx b/src/dep_OCCT/src/OSD/OSD_signal.cxx
+--- a/src/OSD/OSD_signal.cxx	2022-02-01 22:05:58.061865984 +1000
++++ b/src/dep_OCCT/src/OSD/OSD_signal.cxx	2025-03-05 10:45:10.581959680 +1000
+@@ -761,7 +761,7 @@
+ 
+ #include <signal.h>
+ 
+-#if !defined(__ANDROID__) && !defined(__QNX__) && !defined(__EMSCRIPTEN__)
++#if !defined(__ANDROID__) && !defined(__QNX__) && !defined(__EMSCRIPTEN__) && !defined(__HAIKU__)
+   #include <sys/signal.h>
+ #endif
+ 
+diff -ruN a/src/Standard/Standard_CString.cxx b/src/dep_OCCT/src/Standard/Standard_CString.cxx
+--- a/src/Standard/Standard_CString.cxx	2022-02-01 22:05:58.011534336 +1000
++++ b/src/dep_OCCT/src/Standard/Standard_CString.cxx	2025-03-05 10:59:30.197918720 +1000
+@@ -81,7 +81,7 @@
+     // glibc version for android platform use locale-independent implementation of
+     // strtod, strtol, strtoll functions. For other system with locale-depended
+     // implementations problems may appear if "C" locale is not set explicitly.
+-    #if !defined(__ANDROID__) && !defined(__QNX__) && !defined(__MINGW32__)
++    #if !defined(__ANDROID__) && !defined(__QNX__) && !defined(__MINGW32__) && !defined(__HAIKU__)
+       #error System does not support xlocale. Import/export could be broken if C locale did not specified by application.
+     #endif
+     #define strtod_l(thePtr, theNextPtr, theLocale)              strtod(thePtr, theNextPtr)
diff --git a/deps/OpenEXR/OpenEXR.cmake b/deps/OpenEXR/OpenEXR.cmake
index 4df8c15..327acd8 100644
--- a/deps/OpenEXR/OpenEXR.cmake
+++ b/deps/OpenEXR/OpenEXR.cmake
@@ -21,7 +21,6 @@ if (APPLE AND IS_CROSS_COMPILE)
         CMAKE_ARGS
             -DCMAKE_INSTALL_PREFIX:STRING=${DESTDIR}/usr/local
             -DBUILD_SHARED_LIBS:BOOL=OFF
-            -DCMAKE_POSITION_INDEPENDENT_CODE=ON
             -DBUILD_TESTING=OFF 
             -DPYILMBASE_ENABLE:BOOL=OFF 
             -DOPENEXR_VIEWERS_ENABLE:BOOL=OFF
@@ -36,7 +35,6 @@ prusaslicer_add_cmake_project(OpenEXR
     DEPENDS ${ZLIB_PKG}
     GIT_TAG v2.5.5
     CMAKE_ARGS
-        -DCMAKE_POSITION_INDEPENDENT_CODE=ON
         -DBUILD_TESTING=OFF 
         -DPYILMBASE_ENABLE:BOOL=OFF 
         -DOPENEXR_VIEWERS_ENABLE:BOOL=OFF
@@ -46,4 +44,4 @@ endif()
 
 if (MSVC)
     add_debug_dep(dep_OpenEXR)
-endif ()
\ No newline at end of file
+endif ()
diff --git a/deps/OpenVDB/OpenVDB.cmake b/deps/OpenVDB/OpenVDB.cmake
index f581f6f..99967eb 100644
--- a/deps/OpenVDB/OpenVDB.cmake
+++ b/deps/OpenVDB/OpenVDB.cmake
@@ -17,9 +17,8 @@ prusaslicer_add_cmake_project(OpenVDB
     # 8.2 patched
     URL https://github.com/tamasmeszaros/openvdb/archive/a68fd58d0e2b85f01adeb8b13d7555183ab10aa5.zip
     URL_HASH SHA256=f353e7b99bd0cbfc27ac9082de51acf32a8bc0b3e21ff9661ecca6f205ec1d81
-    DEPENDS dep_TBB dep_Blosc dep_OpenEXR dep_Boost
+    DEPENDS dep_TBB dep_Blosc dep_OpenEXR
     CMAKE_ARGS
-        -DCMAKE_POSITION_INDEPENDENT_CODE=ON 
         -DOPENVDB_BUILD_PYTHON_MODULE=OFF
         -DUSE_BLOSC=ON
         -DOPENVDB_CORE_SHARED=${_build_shared} 
@@ -41,4 +40,4 @@ if (MSVC)
             WORKING_DIRECTORY "${BINARY_DIR}"
         )
     endif ()
-endif ()
\ No newline at end of file
+endif ()
diff --git a/deps/TBB/TBB.cmake b/deps/TBB/TBB.cmake
index 7020e43..55c169c 100644
--- a/deps/TBB/TBB.cmake
+++ b/deps/TBB/TBB.cmake
@@ -2,10 +2,10 @@ prusaslicer_add_cmake_project(
     TBB
     URL "https://github.com/oneapi-src/oneTBB/archive/refs/tags/v2021.5.0.zip"
     URL_HASH SHA256=83ea786c964a384dd72534f9854b419716f412f9d43c0be88d41874763e7bb47
+    PATCH_COMMAND patch -p1 < ${CMAKE_CURRENT_LIST_DIR}/haiku.patch
     CMAKE_ARGS          
         -DTBB_BUILD_SHARED=OFF
         -DTBB_TEST=OFF
-        -DCMAKE_POSITION_INDEPENDENT_CODE=ON
         -DCMAKE_DEBUG_POSTFIX=_debug
 )
 
diff --git a/deps/TBB/haiku.patch b/deps/TBB/haiku.patch
new file mode 100644
index 0000000..4082d99
--- /dev/null
+++ b/deps/TBB/haiku.patch
@@ -0,0 +1,147 @@
+diff -ruN a/cmake/compilers/GNU.cmake b/cmake/compilers/GNU.cmake
+--- a/cmake/compilers/GNU.cmake	2021-12-17 23:40:54.025690112 +1000
++++ b/cmake/compilers/GNU.cmake	2025-03-05 14:37:34.014942208 +1000
+@@ -26,7 +26,7 @@
+     set(TBB_DEF_FILE_PREFIX lin${TBB_ARCH})
+ endif()
+ 
+-set(TBB_WARNING_LEVEL -Wall -Wextra $<$<BOOL:${TBB_STRICT}>:-Werror> -Wfatal-errors)
++set(TBB_WARNING_LEVEL -Wall -Wextra $<$<BOOL:${TBB_STRICT}>:-Werror> -Wfatal-errors -Wno-error=attributes -Wno-error=uninitialized -Wno-error=array-bounds -Wno-error=use-after-free -Wno-error=address -Wno-error=sizeof-array-div -Wno-error=stringop-overflow)
+ set(TBB_TEST_WARNING_FLAGS -Wshadow -Wcast-qual -Woverloaded-virtual -Wnon-virtual-dtor)
+ 
+ # Depfile options (e.g. -MD) are inserted automatically in some cases.
+@@ -40,7 +40,7 @@
+     set(TBB_COMMON_COMPILE_FLAGS ${TBB_COMMON_COMPILE_FLAGS} -mrtm $<$<AND:$<NOT:$<CXX_COMPILER_ID:Intel>>,$<NOT:$<VERSION_LESS:${CMAKE_CXX_COMPILER_VERSION},11.0>>>:-mwaitpkg>)
+ endif()
+ 
+-if (NOT MINGW)
++if (NOT MINGW AND NOT HAIKU)
+     set(TBB_COMMON_LINK_LIBS dl)
+ endif()
+ 
+@@ -64,11 +64,11 @@
+ endif()
+ 
+ # For some reason GCC does not instrument code with Thread Sanitizer when lto is enabled and C linker is used.
+-if (NOT TBB_SANITIZE MATCHES "thread")
++if (NOT TBB_SANITIZE MATCHES "thread" AND NOT HAIKU)
+     set(TBB_IPO_COMPILE_FLAGS $<$<NOT:$<CONFIG:Debug>>:-flto>)
+     set(TBB_IPO_LINK_FLAGS $<$<NOT:$<CONFIG:Debug>>:-flto>)
+ endif()
+ 
+ # TBB malloc settings
+-set(TBBMALLOC_LIB_COMPILE_FLAGS -fno-rtti -fno-exceptions)
++set(TBBMALLOC_LIB_COMPILE_FLAGS -fno-rtti -fno-exceptions -fvisibility=hidden)
+ set(TBB_OPENMP_FLAG -fopenmp)
+diff -ruN a/include/oneapi/tbb/detail/_config.h b/include/oneapi/tbb/detail/_config.h
+--- a/include/oneapi/tbb/detail/_config.h	2021-12-17 23:40:54.002883584 +1000
++++ b/include/oneapi/tbb/detail/_config.h	2025-03-05 13:58:22.015990784 +1000
+@@ -268,7 +268,7 @@
+     #define __TBB_CPP20_COMPARISONS_PRESENT __TBB_CPP20_PRESENT
+ #endif
+ 
+-#define __TBB_RESUMABLE_TASKS                           (!__TBB_WIN8UI_SUPPORT && !__ANDROID__ && !__QNXNTO__)
++#define __TBB_RESUMABLE_TASKS                           (!__TBB_WIN8UI_SUPPORT && !__ANDROID__ && !__QNXNTO__ && !__HAIKU__)
+ 
+ /* This macro marks incomplete code or comments describing ideas which are considered for the future.
+  * See also for plain comment with TODO and FIXME marks for small improvement opportunities.
+@@ -386,7 +386,7 @@
+ #endif
+ 
+ #if !defined(__TBB_SURVIVE_THREAD_SWITCH) && \
+-          (_WIN32 || _WIN64 || __APPLE__ || (__unix__ && !__ANDROID__))
++          (_WIN32 || _WIN64 || __APPLE__ || __HAIKU__ || (__unix__ && !__ANDROID__))
+     #define __TBB_SURVIVE_THREAD_SWITCH 1
+ #endif /* __TBB_SURVIVE_THREAD_SWITCH */
+ 
+@@ -491,6 +491,10 @@
+     #define TBB_ALLOCATOR_TRAITS_BROKEN 1
+ #endif
+ 
++#if defined(__HAIKU__)
++    #define TBB_ALLOCATOR_TRAITS_BROKEN 1
++#endif
++
+ // GCC 4.8 C++ standard library implements std::this_thread::yield as no-op.
+ #if __TBB_GLIBCXX_VERSION >= 40800 && __TBB_GLIBCXX_VERSION < 40900
+     #define __TBB_GLIBCXX_THIS_THREAD_YIELD_BROKEN 1
+diff -ruN a/include/oneapi/tbb/detail/_export.h b/include/oneapi/tbb/detail/_export.h
+--- a/include/oneapi/tbb/detail/_export.h	2021-12-17 23:40:54.003145728 +1000
++++ b/include/oneapi/tbb/detail/_export.h	2025-03-05 14:32:25.016252928 +1000
+@@ -17,10 +17,16 @@
+ #ifndef __TBB_detail__export_H
+ #define __TBB_detail__export_H
+ 
++#if defined(__HAIKU__)
++#undef _EXPORT
++#endif
++
+ #if defined(__MINGW32__)
+     #define _EXPORT __declspec(dllexport)
+ #elif defined(_WIN32) || defined(__unix__) || defined(__APPLE__) // Use .def files for these
+     #define _EXPORT
++#elif defined(__HAIKU__)
++	#define _EXPORT
+ #else
+     #error "Unknown platform/compiler"
+ #endif
+diff -ruN a/src/tbb/allocator.cpp b/src/tbb/allocator.cpp
+--- a/src/tbb/allocator.cpp	2021-12-17 23:40:54.015466496 +1000
++++ b/src/tbb/allocator.cpp	2025-03-05 22:08:11.607387648 +1000
+@@ -101,7 +101,7 @@
+ #define MALLOCLIB_NAME "tbbmalloc" DEBUG_SUFFIX ".dll"
+ #elif __APPLE__
+ #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".dylib"
+-#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __ANDROID__
++#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __ANDROID__ || __HAIKU__
+ #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".so"
+ #elif __unix__  // Note that order of these #elif's is important!
+ #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".so.2"
+diff -ruN a/src/tbb/dynamic_link.cpp b/src/tbb/dynamic_link.cpp
+--- a/src/tbb/dynamic_link.cpp	2021-12-17 23:40:54.016777216 +1000
++++ b/src/tbb/dynamic_link.cpp	2025-03-05 22:08:11.608436224 +1000
+@@ -387,7 +387,7 @@
+     #endif /* !__TBB_DYNAMIC_LOAD_ENABLED */
+         // RTLD_GLOBAL - to guarantee that old TBB will find the loaded library
+         // RTLD_NOLOAD - not to load the library without the full path
+-        library_handle = dlopen(library, RTLD_LAZY | RTLD_GLOBAL | RTLD_NOLOAD);
++        library_handle = dlopen(library, RTLD_LAZY | RTLD_GLOBAL);
+ #endif /* _WIN32 */
+         if (library_handle) {
+             if (!resolve_symbols(library_handle, descriptors, required)) {
+diff -ruN a/src/tbb/rml_tbb.cpp b/src/tbb/rml_tbb.cpp
+--- a/src/tbb/rml_tbb.cpp	2021-12-17 23:40:54.018874368 +1000
++++ b/src/tbb/rml_tbb.cpp	2025-03-05 22:08:11.608436224 +1000
+@@ -50,7 +50,7 @@
+ #define RML_SERVER_NAME "irml" DEBUG_SUFFIX ".dll"
+ #elif __APPLE__
+ #define RML_SERVER_NAME "libirml" DEBUG_SUFFIX ".dylib"
+-#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX
++#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __HAIKU__
+ #define RML_SERVER_NAME "libirml" DEBUG_SUFFIX ".so"
+ #elif __unix__
+ #define RML_SERVER_NAME "libirml" DEBUG_SUFFIX ".so.1"
+diff -ruN a/src/tbbmalloc/frontend.cpp b/src/tbbmalloc/frontend.cpp
+--- a/src/tbbmalloc/frontend.cpp	2021-12-17 23:40:54.023068672 +1000
++++ b/src/tbbmalloc/frontend.cpp	2025-03-05 22:08:11.610533376 +1000
+@@ -772,7 +772,7 @@
+     unsigned int pos;
+ #if __ARCH_x86_32||__ARCH_x86_64
+ 
+-# if __unix__||__APPLE__||__MINGW32__
++# if __unix__||__APPLE__||__MINGW32__||__HAIKU__
+     __asm__ ("bsr %1,%0" : "=r"(pos) : "r"(n));
+ # elif (_WIN32 && (!_WIN64 || __INTEL_COMPILER))
+     __asm
+diff -ruN a/src/tbbmalloc/tbbmalloc.cpp b/src/tbbmalloc/tbbmalloc.cpp
+--- a/src/tbbmalloc/tbbmalloc.cpp	2021-12-17 23:40:54.023330816 +1000
++++ b/src/tbbmalloc/tbbmalloc.cpp	2025-03-05 22:08:11.610533376 +1000
+@@ -43,7 +43,7 @@
+ #define MALLOCLIB_NAME "tbbmalloc" DEBUG_SUFFIX ".dll"
+ #elif __APPLE__
+ #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".dylib"
+-#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __ANDROID__
++#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __ANDROID__ || __HAIKU__
+ #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".so"
+ #elif __unix__
+ #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX  __TBB_STRING(.so.2)
diff --git a/deps/ZLIB/ZLIB.cmake b/deps/ZLIB/ZLIB.cmake
index 916f331..351377c 100644
--- a/deps/ZLIB/ZLIB.cmake
+++ b/deps/ZLIB/ZLIB.cmake
@@ -5,7 +5,6 @@ prusaslicer_add_cmake_project(ZLIB
   URL_HASH SHA256=f5cc4ab910db99b2bdbba39ebbdc225ffc2aa04b4057bc2817f1b94b6978cfc3
   PATCH_COMMAND ${PATCH_CMD} ${CMAKE_CURRENT_LIST_DIR}/0001-Respect-BUILD_SHARED_LIBS.patch
   CMAKE_ARGS
-    -DSKIP_INSTALL_FILES=ON         # Prevent installation of man pages et al.
-    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
+    -DSKIP_INSTALL_FILES=ON         # Prevent installation of man pages et al.    
 )
 
diff --git a/deps/deps-linux.cmake b/deps/deps-linux.cmake
index a7467fc..bb813f2 100644
--- a/deps/deps-linux.cmake
+++ b/deps/deps-linux.cmake
@@ -1,6 +1,4 @@
 
-set(DEP_CMAKE_OPTS "-DCMAKE_POSITION_INDEPENDENT_CODE=ON")
-
 include("deps-unix-common.cmake")
 
 # Some Linuxes may have very old libpng, so it's best to bundle it instead of relying on the system version.
diff --git a/haiku/GCodeViewer.cpp b/haiku/GCodeViewer.cpp
new file mode 100644
index 0000000..1977f47
--- /dev/null
+++ b/haiku/GCodeViewer.cpp
@@ -0,0 +1,108 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include <errno.h>
+#include <string.h>
+
+#include <OS.h>
+#include <Application.h>
+#include <String.h>
+#include <Resources.h>
+#include <Roster.h>
+#include <Path.h>
+#include <AppFileInfo.h>
+#include <kernel/image.h>
+
+class SuperSlicerLauncherApp : public BApplication {
+	public:
+		SuperSlicerLauncherApp(const char *signature, int argc, char **argv);
+		~SuperSlicerLauncherApp() {};
+		void			RefsReceived(BMessage *pmsg);
+		virtual void 	ReadyToRun();
+		BString			GetApplicationPath(void);
+	private:
+		BMessenger  	fTrackerMessenger;
+};
+
+SuperSlicerLauncherApp::SuperSlicerLauncherApp(const char *signature, int argc, char **argv)
+	: BApplication(signature)
+{
+}
+
+BString
+SuperSlicerLauncherApp::GetApplicationPath(void)
+{
+	BPath path;
+	int32 cookie = 0;
+	image_info info;
+	while (get_next_image_info(B_CURRENT_TEAM, &cookie, &info) == B_OK) {
+		if (info.type == B_APP_IMAGE) {
+			path.SetTo(info.name);
+			path.GetParent(&path);			
+			break;
+		}
+	}
+	return path.Path();
+}
+
+void
+SuperSlicerLauncherApp::RefsReceived(BMessage *pmsg)
+{
+	if (pmsg->HasMessenger("TrackerViewToken")) {
+		pmsg->FindMessenger("TrackerViewToken", &fTrackerMessenger);
+	}
+
+	uint32 type;
+	int32 count;
+	status_t ret = pmsg->GetInfo("refs", &type, &count);
+	if (ret != B_OK || type != B_REF_TYPE)
+		return;
+
+	BString commandLine;
+	commandLine += "LD_PRELOAD=";
+	commandLine += GetApplicationPath();
+	commandLine += "/bin/lib/libfakelocaltime.so ";
+	commandLine += GetApplicationPath();
+	commandLine += "/bin/SuperSlicer";
+	commandLine += " --gcodeviewer";
+
+	entry_ref ref;
+	for (int32 i = 0; i < count; i++) {
+   		if (pmsg->FindRef("refs", i, &ref) == B_OK)
+   		 {
+   		    BPath file = BPath(&ref);
+   		    commandLine += " \"";
+   		    commandLine += file.Path();
+   		    commandLine += "\"";
+   		 }
+   	}
+   	commandLine += " &";
+   	
+   	system(commandLine.String());
+
+   	Quit();
+}
+
+void
+SuperSlicerLauncherApp::ReadyToRun()
+{
+	BString commandLine;
+	commandLine += "LD_PRELOAD=";
+	commandLine += GetApplicationPath();
+	commandLine += "/bin/lib/libfakelocaltime.so ";
+	commandLine += GetApplicationPath();
+	commandLine += "/bin/SuperSlicer";
+	commandLine += " --gcodeviewer";
+	commandLine += " &";
+
+    system(commandLine.String());
+
+    Quit();
+}
+
+
+int main(int argc, char **argv)
+{
+	SuperSlicerLauncherApp application("application/x-vnd.superslicer-viewer-launcher", argc, argv);
+	application.Run();
+	return 0;
+}
diff --git a/haiku/SuperSlicer.cpp b/haiku/SuperSlicer.cpp
new file mode 100644
index 0000000..66660f4
--- /dev/null
+++ b/haiku/SuperSlicer.cpp
@@ -0,0 +1,106 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include <errno.h>
+#include <string.h>
+
+#include <OS.h>
+#include <Application.h>
+#include <String.h>
+#include <Resources.h>
+#include <Roster.h>
+#include <Path.h>
+#include <AppFileInfo.h>
+#include <kernel/image.h>
+
+class SuperSlicerLauncherApp : public BApplication {
+	public:
+		SuperSlicerLauncherApp(const char *signature, int argc, char **argv);
+		~SuperSlicerLauncherApp() {};
+		void			RefsReceived(BMessage *pmsg);
+		virtual void 	ReadyToRun();
+		BString			GetApplicationPath(void);
+	private:
+		BMessenger  	fTrackerMessenger;
+};
+
+SuperSlicerLauncherApp::SuperSlicerLauncherApp(const char *signature, int argc, char **argv)
+	: BApplication(signature)
+{
+}
+
+BString
+SuperSlicerLauncherApp::GetApplicationPath(void)
+{
+	BPath path;
+	int32 cookie = 0;
+	image_info info;
+	while (get_next_image_info(B_CURRENT_TEAM, &cookie, &info) == B_OK) {
+		if (info.type == B_APP_IMAGE) {
+			path.SetTo(info.name);
+			path.GetParent(&path);			
+			break;
+		}
+	}
+	return path.Path();
+}
+
+void
+SuperSlicerLauncherApp::RefsReceived(BMessage *pmsg)
+{
+	if (pmsg->HasMessenger("TrackerViewToken")) {
+		pmsg->FindMessenger("TrackerViewToken", &fTrackerMessenger);
+	}
+
+	uint32 type;
+	int32 count;
+	status_t ret = pmsg->GetInfo("refs", &type, &count);
+	if (ret != B_OK || type != B_REF_TYPE)
+		return;
+
+	BString commandLine;
+	commandLine += "LD_PRELOAD=";
+	commandLine += GetApplicationPath();
+	commandLine += "/bin/lib/libfakelocaltime.so ";
+	commandLine += GetApplicationPath();
+	commandLine += "/bin/SuperSlicer";
+
+	entry_ref ref;
+	for (int32 i = 0; i < count; i++) {
+   		if (pmsg->FindRef("refs", i, &ref) == B_OK)
+   		 {
+   		    BPath file = BPath(&ref);
+   		    commandLine += " \"";
+   		    commandLine += file.Path();
+   		    commandLine += "\"";
+   		 }
+   	}
+   	commandLine += " &";
+   	
+   	system(commandLine.String());
+
+   	Quit();
+}
+
+void
+SuperSlicerLauncherApp::ReadyToRun()
+{
+	BString commandLine;
+	commandLine += "LD_PRELOAD=";
+	commandLine += GetApplicationPath();
+	commandLine += "/bin/lib/libfakelocaltime.so ";
+	commandLine += GetApplicationPath();
+	commandLine += "/bin/SuperSlicer";
+	commandLine += " &";
+
+    system(commandLine.String());
+
+    Quit();
+}
+
+
+int main(int argc, char **argv)
+{
+	SuperSlicerLauncherApp application("application/x-vnd.superslicer-launcher", argc, argv);
+	application.Run();
+	return 0;
+}
diff --git a/haiku/libfakelocaltime.c b/haiku/libfakelocaltime.c
new file mode 100644
index 0000000..23aa9b9
--- /dev/null
+++ b/haiku/libfakelocaltime.c
@@ -0,0 +1,87 @@
+#define _GNU_SOURCE
+#include <time.h>
+#include <stdio.h>
+#include <stdint.h>
+
+#define SECONDS_PER_MINUTE 60
+#define SECONDS_PER_HOUR   3600
+#define SECONDS_PER_DAY    86400
+#define DAYS_PER_YEAR      365
+#define DAYS_IN_LEAP_YEAR  366
+#define EPOCH_YEAR         1970
+
+static int is_leap_year(int year) {
+    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
+}
+
+static const int days_per_month[2][12] = {
+    { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
+    { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
+};
+
+static void convert_time(time_t time, struct tm* result) {
+    if (!result) return;
+
+    int year = EPOCH_YEAR;
+    int days = time / SECONDS_PER_DAY;
+    int leap;
+
+    while (1) {
+        leap = is_leap_year(year);
+        int days_in_year = leap ? DAYS_IN_LEAP_YEAR : DAYS_PER_YEAR;
+        if (days < days_in_year)
+            break;
+        days -= days_in_year;
+        year++;
+    }
+
+    int month = 0;
+    while (days >= days_per_month[leap][month]) {
+        days -= days_per_month[leap][month];
+        month++;
+    }
+
+    result->tm_year = year - 1900;
+    result->tm_mon = month;
+    result->tm_mday = days + 1;
+    result->tm_hour = (time % SECONDS_PER_DAY) / SECONDS_PER_HOUR;
+    result->tm_min = (time % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE;
+    result->tm_sec = time % SECONDS_PER_MINUTE;
+    result->tm_wday = (4 + time / SECONDS_PER_DAY) % 7;
+    result->tm_yday = time / SECONDS_PER_DAY;
+    result->tm_isdst = 0;
+}
+
+time_t mktime(struct tm* tm) {
+    if (!tm) return -1;
+
+    int days = 0;
+    int year = 1900 + tm->tm_year;
+    for (int y = EPOCH_YEAR; y < year; y++) {
+        days += is_leap_year(y) ? DAYS_IN_LEAP_YEAR : DAYS_PER_YEAR;
+    }
+
+    int leap = is_leap_year(year);
+    for (int m = 0; m < tm->tm_mon; m++) {
+        days += days_per_month[leap][m];
+    }
+
+    days += tm->tm_mday - 1;
+
+    return (time_t)(days * SECONDS_PER_DAY +
+                    tm->tm_hour * SECONDS_PER_HOUR +
+                    tm->tm_min * SECONDS_PER_MINUTE +
+                    tm->tm_sec);
+}
+
+struct tm* gmtime_r(const time_t* timep, struct tm* result) {
+    if (!timep || !result) return NULL;
+    convert_time(*timep, result);
+    return result;
+}
+
+struct tm* localtime_r(const time_t* timep, struct tm* result) {
+    if (!timep || !result) return NULL;
+    convert_time(*timep, result);
+    return result;
+}
diff --git a/sandboxes/aabb-evaluation/CMakeLists.txt b/sandboxes/aabb-evaluation/CMakeLists.txt
index 20011e3..073c0cd 100644
--- a/sandboxes/aabb-evaluation/CMakeLists.txt
+++ b/sandboxes/aabb-evaluation/CMakeLists.txt
@@ -1,2 +1,2 @@
 add_executable(aabb-evaluation aabb-evaluation.cpp)
-target_link_libraries(aabb-evaluation libslic3r ${Boost_LIBRARIES} ${TBB_LIBRARIES} ${Boost_LIBRARIES} ${CMAKE_DL_LIBS})
+target_link_libraries(aabb-evaluation libslic3r ${Boost_LIBRARIES} ${TBB_LIBRARIES} ${Boost_LIBRARIES} )
diff --git a/sandboxes/slasupporttree/CMakeLists.txt b/sandboxes/slasupporttree/CMakeLists.txt
index 79adb84..133daab 100644
--- a/sandboxes/slasupporttree/CMakeLists.txt
+++ b/sandboxes/slasupporttree/CMakeLists.txt
@@ -1,2 +1,2 @@
 add_executable(slasupporttree slasupporttree.cpp)
-target_link_libraries(slasupporttree libslic3r ${Boost_LIBRARIES} ${TBB_LIBRARIES} ${Boost_LIBRARIES} ${CMAKE_DL_LIBS})
+target_link_libraries(slasupporttree libslic3r ${Boost_LIBRARIES} ${TBB_LIBRARIES} ${Boost_LIBRARIES} )
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index bf721a7..f3ea21f 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -2,7 +2,7 @@ cmake_minimum_required(VERSION 3.13)
 project(Slic3r-native)
 
 add_subdirectory(build-utils)
-if (NOT APPLE)
+if (NOT APPLE AND NOT HAIKU)
     add_subdirectory(test-utils)
 endif ()
 add_subdirectory(admesh)
@@ -27,7 +27,7 @@ endif ()
 
 if (SLIC3R_GUI)
     add_subdirectory(imgui)
-    add_subdirectory(hidapi)
+#    add_subdirectory(hidapi)
     include_directories(hidapi/include)
     add_subdirectory(exif)
     include_directories(exif/include)
@@ -45,7 +45,7 @@ if (SLIC3R_GUI)
         endif()
     endif()
 
-    if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
+    if (CMAKE_SYSTEM_NAME STREQUAL "Linux" OR HAIKU)
         set (wxWidgets_CONFIG_OPTIONS "--toolkit=gtk${SLIC3R_GTK}")
         if (SLIC3R_WX_STABLE)
             find_package(wxWidgets 3.0 REQUIRED COMPONENTS base core adv html gl stc)
@@ -156,7 +156,7 @@ elseif (MSVC)
     set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /MANIFEST:NO")
 else ()
     # Boost on Raspberry-Pi does not link to pthreads explicitely.
-    target_link_libraries(Slic3r ${CMAKE_DL_LIBS} -lstdc++ Threads::Threads)
+    target_link_libraries(Slic3r -lstdc++ Threads::Threads)
 endif ()
 
 # Add the Slic3r GUI library, libcurl, OpenGL and GLU libraries.
@@ -171,6 +171,8 @@ target_link_libraries(Slic3r libslic3r_gui)
         target_link_libraries(Slic3r ws2_32 uxtheme setupapi)
     elseif (APPLE)
         target_link_libraries(Slic3r "-framework OpenGL")
+    elseif (HAIKU)
+        target_link_libraries(Slic3r -lnetwork)
     else ()
         target_link_libraries(Slic3r -ldl)
     endif ()
diff --git a/src/PrusaSlicer.cpp b/src/PrusaSlicer.cpp
index 6fd62dd..fb41926 100644
--- a/src/PrusaSlicer.cpp
+++ b/src/PrusaSlicer.cpp
@@ -50,6 +50,11 @@
 
 #include "PrusaSlicer.hpp"
 
+#ifdef __HAIKU__
+#include <OS.h>
+#include <kernel/image.h>
+#endif
+
 #ifdef SLIC3R_GUI
     #include "slic3r/GUI/GUI_Init.hpp"
 #endif /* SLIC3R_GUI */
@@ -74,7 +79,7 @@ int CLI::run(int argc, char **argv)
     // On Linux, wxGTK has no support for Wayland, and the app crashes on
     // startup if gtk3 is used. This env var has to be set explicitly to
     // instruct the window manager to fall back to X server mode.
-    ::setenv("GDK_BACKEND", "x11", /* replace */ true);
+    ::setenv("GDK_BACKEND", "wayland", /* replace */ true);
 #endif
 
 	// Switch boost::filesystem to utf8.
@@ -608,7 +613,7 @@ int CLI::run(int argc, char **argv)
 
     if (start_gui) {
 #ifdef SLIC3R_GUI
-    #if !defined(_WIN32) && !defined(__APPLE__)
+    #if !defined(_WIN32) && !defined(__APPLE__) && !defined(__HAIKU__)
         // likely some linux / unix system
         const char *display = boost::nowide::getenv("DISPLAY");
         // const char *wayland_display = boost::nowide::getenv("WAYLAND_DISPLAY");
@@ -658,7 +663,19 @@ bool CLI::setup(int argc, char **argv)
 
     // See Invoking prusa-slicer from $PATH environment variable crashes #5542
     // boost::filesystem::path path_to_binary = boost::filesystem::system_complete(argv[0]);
+#ifdef __HAIKU__
+	boost::filesystem::path path_to_binary;
+	int32 cookie = 0;
+	image_info info;
+	while (get_next_image_info(B_CURRENT_TEAM, &cookie, &info) == B_OK) {
+		if (info.type == B_APP_IMAGE) {
+			path_to_binary = info.name;
+			break;
+		}
+	}
+#else
     boost::filesystem::path path_to_binary = boost::dll::program_location();
+#endif
 
     // Path from the Slic3r binary to its resources.
 #ifdef __APPLE__
diff --git a/src/avrdude/CMakeLists.txt b/src/avrdude/CMakeLists.txt
index 091afc6..b500785 100644
--- a/src/avrdude/CMakeLists.txt
+++ b/src/avrdude/CMakeLists.txt
@@ -2,7 +2,7 @@ cmake_minimum_required(VERSION 3.0)
 
 add_definitions(-D_BSD_SOURCE -D_DEFAULT_SOURCE)   # To enable various useful macros and functions on Unices
 remove_definitions(-D_UNICODE -DUNICODE)
-set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+#set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 set(CMAKE_C_STANDARD 99)
 set(CMAKE_C_STANDARD_REQUIRED ON)
 
diff --git a/src/hints/HintsToPot.cpp b/src/hints/HintsToPot.cpp
index 7c8029c..0284dde 100644
--- a/src/hints/HintsToPot.cpp
+++ b/src/hints/HintsToPot.cpp
@@ -2,14 +2,14 @@
 #include <vector>
 #include <string>
 #include <boost/filesystem.hpp>
-#include <boost/dll.hpp>
+//#include <boost/dll.hpp>
 #include <boost/property_tree/ini_parser.hpp>
 #include <boost/nowide/fstream.hpp>
 #include <boost/algorithm/string/predicate.hpp>
 
 bool write_to_pot(boost::filesystem::path path, const std::vector<std::pair<std::string, std::string>>& data)
 {
-	boost::filesystem::ofstream file(std::move(path), std::ios_base::app);
+	std::ofstream file(path.string(), std::ios_base::app);
 	for (const auto& element : data)
 	{
 		//Example of .pot element 
diff --git a/src/libslic3r/CMakeLists.txt b/src/libslic3r/CMakeLists.txt
index 84be9c1..0cab2ca 100644
--- a/src/libslic3r/CMakeLists.txt
+++ b/src/libslic3r/CMakeLists.txt
@@ -432,7 +432,6 @@ target_link_libraries(libslic3r
     semver
     TBB::tbb
     libslic3r_cgal
-    ${CMAKE_DL_LIBS}
     PNG::PNG
     ZLIB::ZLIB
     JPEG::JPEG
diff --git a/src/libslic3r/Platform.cpp b/src/libslic3r/Platform.cpp
index 3387521..72fe64e 100644
--- a/src/libslic3r/Platform.cpp
+++ b/src/libslic3r/Platform.cpp
@@ -82,7 +82,7 @@ void detect_platform()
 			::fclose(f);
 		}
 	}
-#elif defined(__OpenBSD__)
+#elif defined(__OpenBSD__) || defined(__HAIKU__)
     BOOST_LOG_TRIVIAL(info) << "Platform: OpenBSD";
 	s_platform 		  = Platform::BSDUnix;
 	s_platform_flavor = PlatformFlavor::OpenBSD;
diff --git a/src/libslic3r/utils.cpp b/src/libslic3r/utils.cpp
index 6eac962..070a581 100644
--- a/src/libslic3r/utils.cpp
+++ b/src/libslic3r/utils.cpp
@@ -1226,7 +1226,7 @@ std::string log_memory_info(bool ignore_loglevel)
             out = " WorkingSet: " + format_memsize_MB(pmc.WorkingSetSize) + "; PrivateBytes: " + format_memsize_MB(pmc.PrivateUsage) + "; Pagefile(peak): " + format_memsize_MB(pmc.PagefileUsage) + "(" + format_memsize_MB(pmc.PeakPagefileUsage) + ")";
         else
             out += " Used memory: N/A";
-#elif defined(__linux__) or defined(__APPLE__)
+#elif defined(__linux__) or defined(__APPLE__) or defined(__HAIKU__)
         // Get current memory usage.
     #ifdef __APPLE__
         struct mach_task_basic_info info;
@@ -1285,7 +1285,7 @@ size_t total_physical_memory()
 	status.dwLength = sizeof(status);
 	GlobalMemoryStatusEx( &status );
 	return (size_t)status.ullTotalPhys;
-#elif defined(__unix__) || defined(__unix) || defined(unix) || (defined(__APPLE__) && defined(__MACH__))
+#elif defined(__unix__) || defined(__unix) || defined(unix) || defined(__HAIKU__) || (defined(__APPLE__) && defined(__MACH__))
 	// UNIX variants. -------------------------------------------
 	// Prefer sysctl() over sysconf() except sysctl() HW_REALMEM and HW_PHYSMEM
 
diff --git a/src/slic3r/CMakeLists.txt b/src/slic3r/CMakeLists.txt
index 49bccb9..89357c5 100644
--- a/src/slic3r/CMakeLists.txt
+++ b/src/slic3r/CMakeLists.txt
@@ -306,7 +306,7 @@ target_compile_definitions(libslic3r_gui PRIVATE $<$<BOOL:${SLIC3R_ALPHA}>:SLIC3
 
 encoding_check(libslic3r_gui)
 
-target_link_libraries(libslic3r_gui libslic3r avrdude cereal imgui GLEW::GLEW OpenGL::GL hidapi exif angelscript libcurl ${wxWidgets_LIBRARIES})
+target_link_libraries(libslic3r_gui libslic3r avrdude cereal imgui GLEW::GLEW OpenGL::GL exif angelscript libcurl ${wxWidgets_LIBRARIES})
 
 if (MSVC)
     target_link_libraries(libslic3r_gui Setupapi.lib)
diff --git a/src/slic3r/GUI/CreateMMUTiledCanvas.cpp b/src/slic3r/GUI/CreateMMUTiledCanvas.cpp
index c638c77..2d1d3e0 100644
--- a/src/slic3r/GUI/CreateMMUTiledCanvas.cpp
+++ b/src/slic3r/GUI/CreateMMUTiledCanvas.cpp
@@ -1010,7 +1010,7 @@ void CreateMMUTiledCanvas::create_main_tab(wxPanel* tab)
 #ifdef _WIN32
                     command = "explorer \"" + path.string() + "\"";
                     std::system(command.data());
-#elif __APPLE__
+#elif __APPLE__ || __HAIKU__
                     const char* argv[] = { "open", path.string().data(), nullptr };
                     ::wxExecute(const_cast<char**>(argv), wxEXEC_ASYNC, nullptr);
 #else
diff --git a/src/slic3r/GUI/GUI.cpp b/src/slic3r/GUI/GUI.cpp
index 40c59dc..71593cb 100644
--- a/src/slic3r/GUI/GUI.cpp
+++ b/src/slic3r/GUI/GUI.cpp
@@ -455,7 +455,7 @@ void desktop_open_datadir_folder()
 		const wxString widepath = from_u8(path);
 		const wchar_t *argv[] = { L"explorer", widepath.GetData(), nullptr };
 		::wxExecute(const_cast<wchar_t**>(argv), wxEXEC_ASYNC, nullptr);
-#elif __APPLE__
+#elif __APPLE__ || __HAIKU__
 		const char *argv[] = { "open", path.data(), nullptr };
 		::wxExecute(const_cast<char**>(argv), wxEXEC_ASYNC, nullptr);
 #else
diff --git a/src/slic3r/GUI/GUI_App.cpp b/src/slic3r/GUI/GUI_App.cpp
index 902f479..74b58cd 100644
--- a/src/slic3r/GUI/GUI_App.cpp
+++ b/src/slic3r/GUI/GUI_App.cpp
@@ -110,6 +110,12 @@
     #include <gtk/gtk.h>
 #endif
 
+#ifdef __HAIKU__
+#include <unistd.h>
+#include <sys/types.h>
+#include <signal.h>
+#endif
+
 using namespace std::literals;
 
 namespace Slic3r {
@@ -833,6 +839,13 @@ GUI_App::GUI_App(EAppMode mode)
     m_imgui.reset(new ImGuiWrapper{});
 }
 
+#ifdef __HAIKU__
+GUI_App::~GUI_App()
+{
+	kill(::getpid(), SIGKILL);
+}
+#endif
+
 // If formatted for github, plaintext with OpenGL extensions enclosed into <details>.
 // Otherwise HTML formatted for the system info dialog.
 std::string GUI_App::get_gl_info(bool for_github)
@@ -930,7 +943,7 @@ void GUI_App::init_app_config()
         if (boost::filesystem::exists(boost::filesystem::path{ resources_dir() } / ".." / "configuration")) {
             set_data_dir((boost::filesystem::path{ resources_dir() } / ".." / "configuration").string());
         } else {
-#ifndef __linux__
+#if !defined(__linux__) && !defined(__HAIKU__)
             set_data_dir(wxStandardPaths::Get().GetUserDataDir().ToUTF8().data());
         }
 #else
diff --git a/src/slic3r/GUI/GUI_App.hpp b/src/slic3r/GUI/GUI_App.hpp
index 25654af..ddcf158 100644
--- a/src/slic3r/GUI/GUI_App.hpp
+++ b/src/slic3r/GUI/GUI_App.hpp
@@ -167,6 +167,9 @@ public:
     bool            initialized() const { return m_initialized; }
 
     explicit GUI_App(EAppMode mode = EAppMode::Editor);
+#ifdef __HAIKU__
+    ~GUI_App();
+#endif
 
     EAppMode get_app_mode() const { return m_app_mode; }
     bool is_editor() const { return m_app_mode == EAppMode::Editor; }
diff --git a/src/slic3r/GUI/InstanceCheck.cpp b/src/slic3r/GUI/InstanceCheck.cpp
index edf05bb..68e2a96 100644
--- a/src/slic3r/GUI/InstanceCheck.cpp
+++ b/src/slic3r/GUI/InstanceCheck.cpp
@@ -306,6 +306,7 @@ namespace instance_check_internal
 
 bool instance_check(int argc, char** argv, bool app_config_single_instance)
 {
+#ifndef __HAIKU__
 	std::size_t hashed_path;
 #ifdef _WIN32
 	hashed_path = std::hash<std::string>{}(boost::filesystem::system_complete(argv[0]).string());
@@ -366,7 +367,7 @@ bool instance_check(int argc, char** argv, bool app_config_single_instance)
 		return true;
 	}
 	BOOST_LOG_TRIVIAL(info) << "Instance check: Another instance not found or single-instance not set.";
-	
+#endif
 	return false;
 }
 
diff --git a/src/slic3r/GUI/Mouse3DController.cpp b/src/slic3r/GUI/Mouse3DController.cpp
index b47cf74..6c742dc 100644
--- a/src/slic3r/GUI/Mouse3DController.cpp
+++ b/src/slic3r/GUI/Mouse3DController.cpp
@@ -707,6 +707,17 @@ bool Mouse3DController::handle_input(const DataPacketAxis& packet)
     return updated;
 }
 
+#elif defined(__HAIKU__)
+
+void Mouse3DController::init(){}
+void Mouse3DController::shutdown(){}
+void Mouse3DController::connected(std::string device_name){}
+void Mouse3DController::disconnected(){}
+bool Mouse3DController::handle_input(const DataPacketAxis& packet)
+{
+    return false;
+}
+
 #else //__APPLE__
 
 // Initialize the application.
diff --git a/src/slic3r/GUI/Mouse3DController.hpp b/src/slic3r/GUI/Mouse3DController.hpp
index 9fb9cf6..ff092a0 100644
--- a/src/slic3r/GUI/Mouse3DController.hpp
+++ b/src/slic3r/GUI/Mouse3DController.hpp
@@ -6,7 +6,9 @@
 
 #include "libslic3r/Point.hpp"
 
+#ifndef __HAIKU__
 #include "hidapi.h"
+#endif
 
 #include <queue>
 #include <atomic>
@@ -154,7 +156,7 @@ class Mouse3DController
     std::atomic<bool> 	m_connected { false };
     std::string 		m_device_str;
 
-#if ! __APPLE__
+#if !defined(__APPLE__) && !defined(__HAIKU__)
     // Worker thread for enumerating devices, connecting, reading data from the device and closing the device.
     std::thread 		m_thread;
     hid_device* 		m_device { nullptr };
@@ -190,7 +192,7 @@ public:
 
     bool connected() const { return m_connected; }
 
-#if __APPLE__
+#if defined(__APPLE__) || defined(__HAIKU__)
     // Interfacing with the Objective C code (MouseHandlerMac.mm)
     void connected(std::string device_name);
     void disconnected();
@@ -219,7 +221,7 @@ public:
     void show_settings_dialog(bool show) { m_show_settings_dialog = show && this->connected(); }
     void render_settings_dialog(GLCanvas3D& canvas) const;
 
-#if ! __APPLE__
+#if !defined(__APPLE__) && !defined(__HAIKU__)
 private:
     bool connect_device();
     void disconnect_device();
diff --git a/src/slic3r/GUI/NotificationManager.cpp b/src/slic3r/GUI/NotificationManager.cpp
index 528d697..081ec0a 100644
--- a/src/slic3r/GUI/NotificationManager.cpp
+++ b/src/slic3r/GUI/NotificationManager.cpp
@@ -67,7 +67,7 @@ namespace {
 		const wxString widepath = from_u8(path);
 		const wchar_t* argv[] = { L"explorer", widepath.GetData(), nullptr };
 		::wxExecute(const_cast<wchar_t**>(argv), wxEXEC_ASYNC, nullptr);
-#elif __APPLE__
+#elif __APPLE__ || __HAIKU__
 		const char* argv[] = { "open", path.data(), nullptr };
 		::wxExecute(const_cast<char**>(argv), wxEXEC_ASYNC, nullptr);
 #else
diff --git a/src/slic3r/GUI/PhysicalPrinterDialog.cpp b/src/slic3r/GUI/PhysicalPrinterDialog.cpp
index 7ca307f..5996e3e 100644
--- a/src/slic3r/GUI/PhysicalPrinterDialog.cpp
+++ b/src/slic3r/GUI/PhysicalPrinterDialog.cpp
@@ -564,7 +564,7 @@ void PhysicalPrinterDialog::build_printhost_settings(ConfigOptionsGroup* m_optgr
     // Always fill in the "printhost_port" combo box from the config and select it.
     {
         Choice* choice = dynamic_cast<Choice*>(m_optgroup->get_field("printhost_port"));
-        choice->set_values({ m_config->opt_string("printhost_port") });
+        choice->set_values(wxArrayString{ wxString(m_config->opt_string("printhost_port").c_str()) });
         choice->set_selection();
     }
 
diff --git a/src/slic3r/GUI/RemovableDriveManager.cpp b/src/slic3r/GUI/RemovableDriveManager.cpp
index 2f8ac96..4426f36 100644
--- a/src/slic3r/GUI/RemovableDriveManager.cpp
+++ b/src/slic3r/GUI/RemovableDriveManager.cpp
@@ -16,7 +16,9 @@
 #else
 // unix, linux & OSX includes
 #include <errno.h>
+#ifndef __HAIKU__
 #include <sys/mount.h>
+#endif
 #include <sys/stat.h>
 #include <glob.h>
 #include <pwd.h>
diff --git a/src/slic3r/GUI/ScriptExecutor.cpp b/src/slic3r/GUI/ScriptExecutor.cpp
index 3e10680..76a2114 100644
--- a/src/slic3r/GUI/ScriptExecutor.cpp
+++ b/src/slic3r/GUI/ScriptExecutor.cpp
@@ -958,11 +958,18 @@ void ScriptContainer::init(const std::string& tab_key, Tab* tab)
         if (res < 0) throw CompileErrorException("Error, can't build the script for tab " + tab_key);
         // Let the builder load the script, and do the necessary pre-processing (include files, etc)
         //res = builder.AddSectionFromFile(ui_script_file.string().c_str()); //seems to be problematic on cyrillic locale
-        {
-            std::string all_file;
-            boost::filesystem::load_string_file(ui_script_file, all_file);
-            res = builder.AddSectionFromMemory(ui_script_file.string().c_str(), all_file.c_str(), (unsigned int)(all_file.length()), 0);
-        }
+
+		{
+		    std::string all_file;
+		    boost::filesystem::ifstream file(ui_script_file);
+		    if (!file.is_open()) {
+		        throw std::runtime_error("Failed to open file: " + ui_script_file.string());
+		    }
+		    std::ostringstream buffer;
+		    buffer << file.rdbuf();
+		    all_file = buffer.str();
+		    res = builder.AddSectionFromMemory(ui_script_file.string().c_str(), all_file.c_str(), (unsigned int)(all_file.length()), 0);
+		}
         if (res < 0) throw CompileErrorException("Error, can't build the script for tab " + tab_key);
         res = builder.BuildModule();
         if (res < 0) throw CompileErrorException("Error, can't build the script for tab " + tab_key);
diff --git a/src/slic3r/Utils/Serial.cpp b/src/slic3r/Utils/Serial.cpp
index 4db1acc..ac96361 100644
--- a/src/slic3r/Utils/Serial.cpp
+++ b/src/slic3r/Utils/Serial.cpp
@@ -45,7 +45,11 @@
 #ifndef _WIN32
 	#include <sys/ioctl.h>
 	#include <sys/time.h>
+#ifdef __HAIKU__
+	#include <unistd.h>
+#else
 	#include <sys/unistd.h>
+#endif
 	#include <sys/select.h>
 #endif
 
-- 
2.48.1


From 6b5ed8503f6d5d4bf761658279e912ed13e7db8c Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sat, 8 Mar 2025 11:46:27 +1000
Subject: Implement set_thread_name for Haiku


diff --git a/src/libslic3r/Thread.cpp b/src/libslic3r/Thread.cpp
index 6f5efda..33bb3b5 100644
--- a/src/libslic3r/Thread.cpp
+++ b/src/libslic3r/Thread.cpp
@@ -6,6 +6,10 @@
 	#include <pthread.h>
 #endif
 
+#ifdef __HAIKU__
+#include <OS.h>
+#endif
+
 #include <atomic>
 #include <condition_variable>
 #include <mutex>
@@ -157,6 +161,31 @@ std::optional<std::string> get_current_thread_name()
 	return std::nullopt;
 }
 
+#elif defined(__HAIKU__)
+
+bool set_thread_name(std::thread &thread, const char *thread_name)
+{
+	return rename_thread(get_pthread_thread_id(thread.native_handle()), thread_name) == B_OK;
+}
+
+bool set_thread_name(boost::thread &thread, const char *thread_name)
+{
+	return rename_thread(get_pthread_thread_id(thread.native_handle()), thread_name) == B_OK;
+}
+
+bool set_current_thread_name(const char *thread_name)
+{
+	return rename_thread(find_thread(NULL), thread_name) == B_OK;
+}
+
+std::optional<std::string> get_current_thread_name()
+{
+	thread_info info;
+	if (get_thread_info(find_thread(NULL), &info) == B_OK)
+		return std::string(info.name);
+	return std::string("");
+}
+
 #else
 
 // posix
-- 
2.48.1

