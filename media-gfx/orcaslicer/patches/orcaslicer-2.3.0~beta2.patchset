From 08337722c8fddceb2237fd7f7e130dc9b8f2f285 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Mon, 3 Mar 2025 13:33:39 +1000
Subject: Fix for Haiku


diff --git a/CMakeLists.txt b/CMakeLists.txt
index ac1af19..a13cc61 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -187,7 +187,7 @@ endif()
 
 # To be able to link libslic3r with the Perl XS module.
 # Once we get rid of Perl and libslic3r is linked statically, we can get rid of -fPIC
-set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+#set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
 # WIN10SDK_PATH is used to point CMake to the WIN10 SDK installation directory.
 # We pick it from environment if it is not defined in another way
@@ -465,7 +465,7 @@ if(SLIC3R_STATIC)
 endif()
 set(TBB_DEBUG 1)
 set(CMAKE_MAP_IMPORTED_CONFIG_RELWITHDEBINFO RelWithDebInfo Release "")
-find_package(TBB REQUIRED)
+#find_package(TBB REQUIRED)
 # include_directories(${TBB_INCLUDE_DIRS})
 # add_definitions(${TBB_DEFINITIONS})
 # if(MSVC)
diff --git a/cmake/modules/CheckAtomic.cmake b/cmake/modules/CheckAtomic.cmake
index c045e30..b5235e2 100644
--- a/cmake/modules/CheckAtomic.cmake
+++ b/cmake/modules/CheckAtomic.cmake
@@ -69,7 +69,7 @@ if(NOT HAVE_CXX_ATOMICS64_WITHOUT_LIB)
     list(APPEND CMAKE_REQUIRED_LIBRARIES "atomic")
     check_working_cxx_atomics64(HAVE_CXX_ATOMICS64_WITH_LIB)
     if (NOT HAVE_CXX_ATOMICS64_WITH_LIB)
-      message(FATAL_ERROR "Host compiler must support 64-bit std::atomic!")
+#      message(FATAL_ERROR "Host compiler must support 64-bit std::atomic!")
     endif()
   else()
     message(FATAL_ERROR "Host compiler appears to require libatomic for 64-bit operations, but cannot find it.")
@@ -103,4 +103,4 @@ int main() {
 
 if( NOT LLVM_HAS_ATOMICS )
   message(STATUS "Warning: LLVM will be built thread-unsafe because atomic builtins are missing")
-endif()
\ No newline at end of file
+endif()
diff --git a/cmake/modules/FindOpenVDB.cmake b/cmake/modules/FindOpenVDB.cmake
index 76ddb0d..63d84e6 100644
--- a/cmake/modules/FindOpenVDB.cmake
+++ b/cmake/modules/FindOpenVDB.cmake
@@ -367,7 +367,7 @@ if (IlmBase_FOUND AND NOT TARGET IlmBase::Half)
 elseif(NOT IlmBase_FOUND)
   just_fail("IlmBase::Half can not be found!")
 endif()
-find_package(TBB ${_quiet} ${_required} COMPONENTS tbb)
+#find_package(TBB ${_quiet} ${_required} COMPONENTS tbb)
 find_package(ZLIB ${_quiet} ${_required})
 find_package(Boost ${_quiet} ${_required} COMPONENTS iostreams system )
 
@@ -495,9 +495,9 @@ if(OpenVDB_USES_LOG4CPLUS)
   list(APPEND _OPENVDB_DEFINITIONS "-DOPENVDB_USE_LOG4CPLUS")
 endif()
 
-list(APPEND _OPENVDB_VISIBLE_DEPENDENCIES
-  TBB::tbb
-)
+#list(APPEND _OPENVDB_VISIBLE_DEPENDENCIES
+#  TBB::tbb
+#)
 if(UNIX)
   list(APPEND _OPENVDB_VISIBLE_DEPENDENCIES
     Threads::Threads
diff --git a/deps/Blosc/Blosc.cmake b/deps/Blosc/Blosc.cmake
index af4f015..b811f76 100644
--- a/deps/Blosc/Blosc.cmake
+++ b/deps/Blosc/Blosc.cmake
@@ -16,7 +16,6 @@ if(IS_CROSS_COMPILE AND APPLE)
         # Patching upstream does not work this way with git version 2.28 installed on mac worker
         # PATCH_COMMAND  ${GIT_EXECUTABLE} apply --ignore-space-change --whitespace=fix ${CMAKE_CURRENT_LIST_DIR}/blosc-mods.patch
         CMAKE_ARGS
-            -DCMAKE_POSITION_INDEPENDENT_CODE=ON
             -DBUILD_SHARED=${_build_shared} 
             -DBUILD_STATIC=${_build_static}
             -DBUILD_TESTS=OFF 
@@ -35,7 +34,6 @@ else()
         # Patching upstream does not work this way with git version 2.28 installed on mac worker
         # PATCH_COMMAND  ${GIT_EXECUTABLE} apply --ignore-space-change --whitespace=fix ${CMAKE_CURRENT_LIST_DIR}/blosc-mods.patch
         CMAKE_ARGS
-            -DCMAKE_POSITION_INDEPENDENT_CODE=ON
             -DBUILD_SHARED=${_build_shared} 
             -DBUILD_STATIC=${_build_static}
             -DBUILD_TESTS=OFF 
@@ -45,4 +43,4 @@ else()
 endif()
 if (MSVC)
     add_debug_dep(dep_Blosc)
-endif ()
\ No newline at end of file
+endif ()
diff --git a/deps/CGAL/CGAL.cmake b/deps/CGAL/CGAL.cmake
index 18fee7c..7b886e9 100644
--- a/deps/CGAL/CGAL.cmake
+++ b/deps/CGAL/CGAL.cmake
@@ -5,7 +5,7 @@ orcaslicer_add_cmake_project(
     # For whatever reason, this keeps downloading forever (repeats downloads if finished)
     URL      https://github.com/CGAL/cgal/archive/refs/tags/v5.4.zip
     URL_HASH SHA256=d7605e0a5a5ca17da7547592f6f6e4a59430a0bc861948974254d0de43eab4c0
-    DEPENDS dep_Boost dep_GMP dep_MPFR
+    DEPENDS dep_GMP dep_MPFR
 )
 
 include(GNUInstallDirs)
diff --git a/deps/CMakeLists.txt b/deps/CMakeLists.txt
index 0548e40..b9842b7 100644
--- a/deps/CMakeLists.txt
+++ b/deps/CMakeLists.txt
@@ -282,7 +282,9 @@ include(GLEW/GLEW.cmake)
 include(GLFW/GLFW.cmake)
 include(OpenCSG/OpenCSG.cmake)
 
+if (NOT HAIKU)
 include(TBB/TBB.cmake)
+endif()
 
 include(Blosc/Blosc.cmake)
 include(OpenEXR/OpenEXR.cmake)
@@ -301,7 +303,7 @@ include(libnoise/libnoise.cmake)
 # a grep across the repo shows it is used for other things
 # TODO: update openssl and everything that uses <openssl/md5.h> 
 set(OPENSSL_PKG "")
-if(NOT OPENSSL_FOUND)
+if(NOT OPENSSL_FOUND AND NOT HAIKU)
     include(OpenSSL/OpenSSL.cmake)
     set(OPENSSL_PKG dep_OpenSSL)
 endif()
@@ -310,7 +312,7 @@ endif()
 # so, just don't even bother 
 # ...i think this is how it works? change if wrong
 set(CURL_PKG "")
-if (NOT OPENSSL_FOUND OR NOT CURL_FOUND)
+if (NOT OPENSSL_FOUND OR NOT CURL_FOUND AND NOT HAIKU)
     include(CURL/CURL.cmake)
     set(CURL_PKG dep_CURL)
 endif ()
@@ -357,6 +359,7 @@ endif ()
 include(OCCT/OCCT.cmake)
 include(OpenCV/OpenCV.cmake)
 
+if (NOT HAIKU)
 set(_dep_list
     dep_Boost
     dep_TBB
@@ -377,6 +380,15 @@ set(_dep_list
     ${EXPAT_PKG}
     dep_libnoise
     )
+else()
+set(_dep_list
+    dep_OpenCSG
+    dep_OpenCV
+    dep_CGAL
+    dep_OCCT
+    dep_libnoise
+    )
+endif()
 
 if (MSVC)
     # Experimental
diff --git a/deps/CURL/CURL.cmake b/deps/CURL/CURL.cmake
index a5ae1b9..bcc4ed1 100644
--- a/deps/CURL/CURL.cmake
+++ b/deps/CURL/CURL.cmake
@@ -67,7 +67,6 @@ orcaslicer_add_cmake_project(CURL
   CMAKE_ARGS
     -DBUILD_TESTING:BOOL=OFF
     -DBUILD_CURL_EXE:BOOL=OFF
-    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
     -DCURL_STATICLIB=${_curl_static}
     ${_curl_platform_flags}
 )
diff --git a/deps/NanoSVG/NanoSVG.cmake b/deps/NanoSVG/NanoSVG.cmake
index 5c833e3..8f2b2db 100644
--- a/deps/NanoSVG/NanoSVG.cmake
+++ b/deps/NanoSVG/NanoSVG.cmake
@@ -4,7 +4,6 @@
 # AMD Radeon graphics cards
 
 orcaslicer_add_cmake_project(NanoSVG
-    DEPENDS dep_Boost
     URL https://github.com/SoftFever/nanosvg/archive/863f6aa97ef62028126fa2c19bd4350394c2e15e.zip
         URL_HASH SHA256=8d9c1624ad6518dd6dfa31e4f8dc7da9ec243d88bae595c7a037450617fec851
-)
\ No newline at end of file
+)
diff --git a/deps/OCCT/0001-OCCT-fix.patch b/deps/OCCT/0001-OCCT-fix.patch
index d0de170..84380e6 100644
--- a/deps/OCCT/0001-OCCT-fix.patch
+++ b/deps/OCCT/0001-OCCT-fix.patch
@@ -195,3 +195,63 @@ index 5ae9899f..0a17372b 100644
  
    if (!myFTLib->IsValid())
    {
+diff --git a/src/OSD/OSD_Path.cxx b/src/OSD/OSD_Path.cxx
+--- a/src/OSD/OSD_Path.cxx
++++ b/src/OSD/OSD_Path.cxx
+@@ -23,7 +23,7 @@
+ 
+ static OSD_SysType whereAmI()
+ {
+-#if defined(__digital__) || defined(__FreeBSD__) || defined(SUNOS) || defined(__APPLE__) || defined(__QNX__) || defined(__FreeBSD_kernel__)
++#if defined(__digital__) || defined(__FreeBSD__) || defined(SUNOS) || defined(__APPLE__) || defined(__QNX__) || defined(__HAIKU__) || defined(__FreeBSD_kernel__)
+   return OSD_UnixBSD;
+ #elif defined(sgi)  || defined(IRIX) || defined(__sun)  || defined(SOLARIS) ||  defined(__sco__) || defined(__hpux) || defined(HPUX)
+   return OSD_UnixSystemV;
+diff --git a/src/OSD/OSD_signal.cxx b/src/OSD/OSD_signal.cxx
+--- a/src/OSD/OSD_signal.cxx	2025-03-02 15:11:21.891289600 +1000
++++ b/src/OSD/OSD_signal.cxx	2025-02-25 20:54:44.123994112 +1000
+@@ -761,7 +761,7 @@
+ 
+ #include <signal.h>
+ 
+-#if !defined(__ANDROID__) && !defined(__QNX__) && !defined(__EMSCRIPTEN__)
++#if !defined(__ANDROID__) && !defined(__QNX__) && !defined(__EMSCRIPTEN__) && !defined(__HAIKU__)
+   #include <sys/signal.h>
+ #endif
+ 
+diff --git a/src/Standard/Standard_CString.cxx b/src/Standard/Standard_CString.cxx
+--- a/src/Standard/Standard_CString.cxx
++++ b/src/Standard/Standard_CString.cxx
+@@ -81,7 +81,7 @@
+     // glibc version for android platform use locale-independent implementation of
+     // strtod, strtol, strtoll functions. For other system with locale-depended
+     // implementations problems may appear if "C" locale is not set explicitly.
+-    #if !defined(__ANDROID__) && !defined(__QNX__) && !defined(__MINGW32__)
++    #if !defined(__ANDROID__) && !defined(__QNX__) && !defined(__MINGW32__) && !defined(__HAIKU__)
+       #error System does not support xlocale. Import/export could be broken if C locale did not specified by application.
+     #endif
+     #define strtod_l(thePtr, theNextPtr, theLocale)              strtod(thePtr, theNextPtr)
+diff --git a/src/Standard/Standard_StackTrace.cxx b/src/Standard/Standard_StackTrace.cxx
+--- a/src/Standard/Standard_StackTrace.cxx
++++ b/src/Standard/Standard_StackTrace.cxx
+@@ -1,3 +1,4 @@
++
+ // Created on: 2020-11-30
+ // Copyright (c) 2020 OPEN CASCADE SAS
+ //
+@@ -329,6 +330,9 @@
+   }
+ 
+   aNbTraces -= aTopSkip;
++#ifdef __HAIKU__
++  return false;
++#else
+   char** aStrings = ::backtrace_symbols (aStackArr + aTopSkip, aNbTraces);
+   if (aStrings == NULL)
+   {
+@@ -361,4 +365,5 @@
+   }
+   return true;
+ #endif
++#endif
+ }
diff --git a/deps/OpenEXR/OpenEXR.cmake b/deps/OpenEXR/OpenEXR.cmake
index dd754d3..9843b47 100644
--- a/deps/OpenEXR/OpenEXR.cmake
+++ b/deps/OpenEXR/OpenEXR.cmake
@@ -21,7 +21,6 @@ if (APPLE AND IS_CROSS_COMPILE)
         CMAKE_ARGS
             -DCMAKE_INSTALL_PREFIX:STRING=${DESTDIR}
             -DBUILD_SHARED_LIBS:BOOL=OFF
-            -DCMAKE_POSITION_INDEPENDENT_CODE=ON
             -DBUILD_TESTING=OFF 
             -DPYILMBASE_ENABLE:BOOL=OFF 
             -DOPENEXR_VIEWERS_ENABLE:BOOL=OFF
@@ -44,7 +43,6 @@ orcaslicer_add_cmake_project(OpenEXR
     DEPENDS ${ZLIB_PKG}
     GIT_TAG v2.5.5
     CMAKE_ARGS
-        -DCMAKE_POSITION_INDEPENDENT_CODE=ON
         -DBUILD_TESTING=OFF
         -DPYILMBASE_ENABLE:BOOL=OFF
         -DOPENEXR_VIEWERS_ENABLE:BOOL=OFF
diff --git a/deps/OpenVDB/OpenVDB.cmake b/deps/OpenVDB/OpenVDB.cmake
index 7080b8b..87afd75 100644
--- a/deps/OpenVDB/OpenVDB.cmake
+++ b/deps/OpenVDB/OpenVDB.cmake
@@ -10,9 +10,8 @@ orcaslicer_add_cmake_project(OpenVDB
     #  support vs2022, update to 8.2
     URL https://github.com/tamasmeszaros/openvdb/archive/a68fd58d0e2b85f01adeb8b13d7555183ab10aa5.zip 
     URL_HASH SHA256=f353e7b99bd0cbfc27ac9082de51acf32a8bc0b3e21ff9661ecca6f205ec1d81
-    DEPENDS dep_TBB dep_Blosc dep_OpenEXR dep_Boost
+    DEPENDS dep_Blosc dep_OpenEXR
     CMAKE_ARGS
-        -DCMAKE_POSITION_INDEPENDENT_CODE=ON 
         -DOPENVDB_BUILD_PYTHON_MODULE=OFF
         -DUSE_BLOSC=ON
         -DOPENVDB_CORE_SHARED=${_build_shared} 
@@ -34,4 +33,4 @@ if (MSVC)
             WORKING_DIRECTORY "${BINARY_DIR}"
         )
     endif ()
-endif ()
\ No newline at end of file
+endif ()
diff --git a/deps/TBB/TBB.cmake b/deps/TBB/TBB.cmake
index 13d40c0..3d486b2 100644
--- a/deps/TBB/TBB.cmake
+++ b/deps/TBB/TBB.cmake
@@ -13,7 +13,6 @@ orcaslicer_add_cmake_project(
         -DTBB_BUILD_SHARED=OFF
         -DTBB_BUILD_TESTS=OFF
         -DTBB_TEST=OFF
-        -DCMAKE_POSITION_INDEPENDENT_CODE=ON
         -DCMAKE_DEBUG_POSTFIX=_debug
 )
 
diff --git a/deps/ZLIB/ZLIB.cmake b/deps/ZLIB/ZLIB.cmake
index 0d5497e..a86d82e 100644
--- a/deps/ZLIB/ZLIB.cmake
+++ b/deps/ZLIB/ZLIB.cmake
@@ -10,6 +10,5 @@ orcaslicer_add_cmake_project(ZLIB
   PATCH_COMMAND ${patch_command}
   CMAKE_ARGS
     -DSKIP_INSTALL_FILES=ON         # Prevent installation of man pages et al.
-    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
 )
 
diff --git a/deps/deps-linux.cmake b/deps/deps-linux.cmake
index fbe7b71..3640e64 100644
--- a/deps/deps-linux.cmake
+++ b/deps/deps-linux.cmake
@@ -1,5 +1,5 @@
 
-set(DEP_CMAKE_OPTS "-DCMAKE_POSITION_INDEPENDENT_CODE=ON")
+#set(DEP_CMAKE_OPTS "-DCMAKE_POSITION_INDEPENDENT_CODE=ON")
 
 include("deps-unix-common.cmake")
 
@@ -7,4 +7,4 @@ include("deps-unix-common.cmake")
 # find_package(PNG QUIET)
 # if (NOT PNG_FOUND)
 #     message(WARNING "No PNG dev package found in system, building static library. You should install the system package.")
-# endif ()
\ No newline at end of file
+# endif ()
diff --git a/haiku/libfakelocaltime.c b/haiku/libfakelocaltime.c
new file mode 100644
index 0000000..23aa9b9
--- /dev/null
+++ b/haiku/libfakelocaltime.c
@@ -0,0 +1,87 @@
+#define _GNU_SOURCE
+#include <time.h>
+#include <stdio.h>
+#include <stdint.h>
+
+#define SECONDS_PER_MINUTE 60
+#define SECONDS_PER_HOUR   3600
+#define SECONDS_PER_DAY    86400
+#define DAYS_PER_YEAR      365
+#define DAYS_IN_LEAP_YEAR  366
+#define EPOCH_YEAR         1970
+
+static int is_leap_year(int year) {
+    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
+}
+
+static const int days_per_month[2][12] = {
+    { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
+    { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
+};
+
+static void convert_time(time_t time, struct tm* result) {
+    if (!result) return;
+
+    int year = EPOCH_YEAR;
+    int days = time / SECONDS_PER_DAY;
+    int leap;
+
+    while (1) {
+        leap = is_leap_year(year);
+        int days_in_year = leap ? DAYS_IN_LEAP_YEAR : DAYS_PER_YEAR;
+        if (days < days_in_year)
+            break;
+        days -= days_in_year;
+        year++;
+    }
+
+    int month = 0;
+    while (days >= days_per_month[leap][month]) {
+        days -= days_per_month[leap][month];
+        month++;
+    }
+
+    result->tm_year = year - 1900;
+    result->tm_mon = month;
+    result->tm_mday = days + 1;
+    result->tm_hour = (time % SECONDS_PER_DAY) / SECONDS_PER_HOUR;
+    result->tm_min = (time % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE;
+    result->tm_sec = time % SECONDS_PER_MINUTE;
+    result->tm_wday = (4 + time / SECONDS_PER_DAY) % 7;
+    result->tm_yday = time / SECONDS_PER_DAY;
+    result->tm_isdst = 0;
+}
+
+time_t mktime(struct tm* tm) {
+    if (!tm) return -1;
+
+    int days = 0;
+    int year = 1900 + tm->tm_year;
+    for (int y = EPOCH_YEAR; y < year; y++) {
+        days += is_leap_year(y) ? DAYS_IN_LEAP_YEAR : DAYS_PER_YEAR;
+    }
+
+    int leap = is_leap_year(year);
+    for (int m = 0; m < tm->tm_mon; m++) {
+        days += days_per_month[leap][m];
+    }
+
+    days += tm->tm_mday - 1;
+
+    return (time_t)(days * SECONDS_PER_DAY +
+                    tm->tm_hour * SECONDS_PER_HOUR +
+                    tm->tm_min * SECONDS_PER_MINUTE +
+                    tm->tm_sec);
+}
+
+struct tm* gmtime_r(const time_t* timep, struct tm* result) {
+    if (!timep || !result) return NULL;
+    convert_time(*timep, result);
+    return result;
+}
+
+struct tm* localtime_r(const time_t* timep, struct tm* result) {
+    if (!timep || !result) return NULL;
+    convert_time(*timep, result);
+    return result;
+}
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 8133c2b..b6d2a96 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -27,8 +27,8 @@ add_subdirectory(libslic3r)
 if (SLIC3R_GUI)
     add_subdirectory(imgui)
     add_subdirectory(imguizmo)
-    add_subdirectory(hidapi)
-    include_directories(hidapi/include)
+#    add_subdirectory(hidapi)
+#    include_directories(hidapi/include)
 
     if(WIN32)
         message(STATUS "WXWIN environment set to: $ENV{WXWIN}")
@@ -49,7 +49,7 @@ if (SLIC3R_GUI)
             find_package(wxWidgets 3.1 REQUIRED COMPONENTS base core adv html gl aui net media webview)
         endif ()
     else ()
-        find_package(wxWidgets 3.1 REQUIRED COMPONENTS html adv gl core base webview aui net media)
+        find_package(wxWidgets 3.2 REQUIRED COMPONENTS html adv gl core base webview aui net media)
     endif ()
 
     if(UNIX)
@@ -159,6 +159,8 @@ target_link_libraries(OrcaSlicer libslic3r_gui)
         target_link_libraries(OrcaSlicer user32.lib Setupapi.lib)
     elseif (MINGW)
         target_link_libraries(OrcaSlicer ws2_32 uxtheme setupapi)
+    elseif (HAIKU)
+        target_link_libraries(OrcaSlicer -lnetwork -lbsd)
     elseif (APPLE)
         target_link_libraries(OrcaSlicer "-framework OpenGL")
     else ()
diff --git a/src/OrcaSlicer.cpp b/src/OrcaSlicer.cpp
index 7cd84ba..07abbe2 100644
--- a/src/OrcaSlicer.cpp
+++ b/src/OrcaSlicer.cpp
@@ -83,6 +83,11 @@ using namespace nlohmann;
 #include "slic3r/GUI/Plater.hpp"
 #include <GLFW/glfw3.h>
 
+#ifdef __HAIKU__
+#include <OS.h>
+#include <kernel/image.h>
+#endif
+
 #ifdef __WXGTK__
 #include <X11/Xlib.h>
 #endif
@@ -1043,6 +1048,9 @@ int CLI::run(int argc, char **argv)
     save_main_thread_id();
 
 #ifdef __WXGTK__
+#ifdef __HAIKU__
+	::setenv("GDK_BACKEND", "wayland", /* replace */ true);
+#else
     // On Linux, wxGTK has no support for Wayland, and the app crashes on
     // startup if gtk3 is used. This env var has to be set explicitly to
     // instruct the window manager to fall back to X server mode.
@@ -1051,6 +1059,7 @@ int CLI::run(int argc, char **argv)
     // Also on Linux, we need to tell Xlib that we will be using threads,
     // lest we crash when we fire up GStreamer.
     XInitThreads();
+#endif
 #endif
 
 	// Switch boost::filesystem to utf8.
@@ -5965,7 +5974,19 @@ bool CLI::setup(int argc, char **argv)
 
     // See Invoking prusa-slicer from $PATH environment variable crashes #5542
     // boost::filesystem::path path_to_binary = boost::filesystem::system_complete(argv[0]);
+#ifdef __HAIKU__
+	boost::filesystem::path path_to_binary;
+	int32 cookie = 0;
+	image_info info;
+	while (get_next_image_info(B_CURRENT_TEAM, &cookie, &info) == B_OK) {
+		if (info.type == B_APP_IMAGE) {
+			path_to_binary = info.name;
+			break;
+		}
+	}
+#else
     boost::filesystem::path path_to_binary = boost::dll::program_location();
+#endif
 
     // Path from the Slic3r binary to its resources.
 #ifdef __APPLE__
diff --git a/src/OrcaSlicer_profile_validator.cpp b/src/OrcaSlicer_profile_validator.cpp
index f95e309..5a526bf 100644
--- a/src/OrcaSlicer_profile_validator.cpp
+++ b/src/OrcaSlicer_profile_validator.cpp
@@ -89,6 +89,8 @@ int main(int argc, char* argv[])
     desc.add_options()("help,h", "help")
 #ifdef __APPLE__
     ("path,p", po::value<std::string>()->default_value("../../../../../../resources/profiles"), "profile folder")
+#elif defined(__HAIKU__)
+    ("path,p", po::value<std::string>()->default_value("../resources/profiles"), "profile folder")
 #else
     ("path,p", po::value<std::string>()->default_value("../../../resources/profiles"), "profile folder")
 #endif
diff --git a/src/clipper2/CMakeLists.txt b/src/clipper2/CMakeLists.txt
index 275f927..9c54a4d 100644
--- a/src/clipper2/CMakeLists.txt
+++ b/src/clipper2/CMakeLists.txt
@@ -1,7 +1,7 @@
 cmake_minimum_required(VERSION 3.10)
 project(Clipper2 VERSION 1.0.6 LANGUAGES C CXX)
 
-set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+#set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(CMAKE_CXX_EXTENSIONS OFF)
diff --git a/src/hidapi/CMakeLists.txt b/src/hidapi/CMakeLists.txt
index f304546..2f7a6ce 100644
--- a/src/hidapi/CMakeLists.txt
+++ b/src/hidapi/CMakeLists.txt
@@ -3,6 +3,8 @@ if (WIN32)
     set(HIDAPI_IMPL win/hid.c)
 elseif (APPLE)
     set(HIDAPI_IMPL mac/hid.c)
+elseif (HAIKU)
+    set(HIDAPI_IMPL haiku/hid.c)
 else ()
     # Assume Linux or Unix other than Mac OS
     set(HIDAPI_IMPL linux/hid.c)
diff --git a/src/hints/HintsToPot.cpp b/src/hints/HintsToPot.cpp
index a2ff5dd..0ecc8eb 100644
--- a/src/hints/HintsToPot.cpp
+++ b/src/hints/HintsToPot.cpp
@@ -2,7 +2,7 @@
 #include <vector>
 #include <string>
 #include <boost/filesystem.hpp>
-#include <boost/dll.hpp>
+//#include <boost/dll.hpp>
 #include <boost/property_tree/ini_parser.hpp>
 #include <boost/nowide/fstream.hpp>
 #include <boost/algorithm/string/predicate.hpp>
diff --git a/src/libnest2d/CMakeLists.txt b/src/libnest2d/CMakeLists.txt
index c18dc31..98cdbeb 100644
--- a/src/libnest2d/CMakeLists.txt
+++ b/src/libnest2d/CMakeLists.txt
@@ -24,5 +24,5 @@ set(LIBNEST2D_SRCFILES
 add_library(libnest2d STATIC ${LIBNEST2D_SRCFILES})
 
 target_include_directories(libnest2d PUBLIC ${CMAKE_CURRENT_LIST_DIR}/include)
-target_link_libraries(libnest2d PUBLIC NLopt::nlopt TBB::tbb Boost::boost libslic3r)
+target_link_libraries(libnest2d PUBLIC NLopt::nlopt Boost::boost libslic3r)
 target_compile_definitions(libnest2d PUBLIC LIBNEST2D_THREADING_tbb LIBNEST2D_STATIC LIBNEST2D_OPTIMIZER_nlopt LIBNEST2D_GEOMETRIES_libslic3r)
diff --git a/src/libslic3r/AppConfig.cpp b/src/libslic3r/AppConfig.cpp
index 2373704..9db57a3 100644
--- a/src/libslic3r/AppConfig.cpp
+++ b/src/libslic3r/AppConfig.cpp
@@ -158,7 +158,7 @@ void AppConfig::set_defaults()
             set("use_inches", "0");
 
         if (get("default_page").empty())
-            set("default_page", "0");
+            set("default_page", "1");
     }
     else {
 #ifdef _WIN32
@@ -256,7 +256,7 @@ void AppConfig::set_defaults()
 
     // Orca
     if(get("show_splash_screen").empty()) {
-        set_bool("show_splash_screen", true);
+        set_bool("show_splash_screen", false);
     }
 
     if(get("auto_arrange").empty()) {
diff --git a/src/libslic3r/CMakeLists.txt b/src/libslic3r/CMakeLists.txt
index 64e0a9e..dbc8824 100644
--- a/src/libslic3r/CMakeLists.txt
+++ b/src/libslic3r/CMakeLists.txt
@@ -565,8 +565,8 @@ target_link_libraries(libslic3r
     glu-libtess
     qhull
     semver
-    TBB::tbb
-    TBB::tbbmalloc
+    tbb
+    tbbmalloc
     libslic3r_cgal
     ${CMAKE_DL_LIBS}
     PNG::PNG
diff --git a/src/libslic3r/MeshBoolean.cpp b/src/libslic3r/MeshBoolean.cpp
index 779d5a0..f9cf3c3 100644
--- a/src/libslic3r/MeshBoolean.cpp
+++ b/src/libslic3r/MeshBoolean.cpp
@@ -580,41 +580,41 @@ MCAPI_ATTR void MCAPI_CALL mcDebugOutput(McDebugSource source,
     const char* message,
     const void* userParam)
 {
-    BOOST_LOG_TRIVIAL(debug)<<Slic3r::format("mcut mcDebugOutput message ( %d ): %s ", id, message);
+    //BOOST_LOG_TRIVIAL(debug)<<Slic3r::format("mcut mcDebugOutput message ( %d ): %s ", id, message);
 
     switch (source) {
         case MC_DEBUG_SOURCE_API:
-            BOOST_LOG_TRIVIAL(debug)<<("Source: API");
+            //BOOST_LOG_TRIVIAL(debug)<<("Source: API");
             break;
         case MC_DEBUG_SOURCE_KERNEL:
-            BOOST_LOG_TRIVIAL(debug)<<("Source: Kernel");
+            //BOOST_LOG_TRIVIAL(debug)<<("Source: Kernel");
             break;
         }
 
     switch (type) {
         case MC_DEBUG_TYPE_ERROR:
-            BOOST_LOG_TRIVIAL(debug)<<("Type: Error");
+            //BOOST_LOG_TRIVIAL(debug)<<("Type: Error");
             break;
         case MC_DEBUG_TYPE_DEPRECATED_BEHAVIOR:
-            BOOST_LOG_TRIVIAL(debug)<<("Type: Deprecated Behaviour");
+            //BOOST_LOG_TRIVIAL(debug)<<("Type: Deprecated Behaviour");
             break;
         case MC_DEBUG_TYPE_OTHER:
-            BOOST_LOG_TRIVIAL(debug)<<("Type: Other");
+            //BOOST_LOG_TRIVIAL(debug)<<("Type: Other");
             break;
         }
 
     switch (severity) {
         case MC_DEBUG_SEVERITY_HIGH:
-            BOOST_LOG_TRIVIAL(debug)<<("Severity: high");
+            //BOOST_LOG_TRIVIAL(debug)<<("Severity: high");
             break;
         case MC_DEBUG_SEVERITY_MEDIUM:
-            BOOST_LOG_TRIVIAL(debug)<<("Severity: medium");
+            //BOOST_LOG_TRIVIAL(debug)<<("Severity: medium");
             break;
         case MC_DEBUG_SEVERITY_LOW:
-            BOOST_LOG_TRIVIAL(debug)<<("Severity: low");
+            //BOOST_LOG_TRIVIAL(debug)<<("Severity: low");
             break;
         case MC_DEBUG_SEVERITY_NOTIFICATION:
-            BOOST_LOG_TRIVIAL(debug)<<("Severity: notification");
+            //BOOST_LOG_TRIVIAL(debug)<<("Severity: notification");
             break;
         }
 }
@@ -665,7 +665,7 @@ bool do_boolean_single(McutMesh &srcMesh, const McutMesh &cutMesh, const std::st
                      reinterpret_cast<const void *>(cutMesh.vertexCoordsArray.data()), cutMesh.faceIndicesArray.data(), cutMesh.faceSizesArray.data(),
                      static_cast<uint32_t>(cutMesh.vertexCoordsArray.size() / 3), static_cast<uint32_t>(cutMesh.faceSizesArray.size()));
     if (err != MC_NO_ERROR) {
-        BOOST_LOG_TRIVIAL(debug) << "MCUT mcDispatch fails! err=" << err;
+        //BOOST_LOG_TRIVIAL(debug) << "MCUT mcDispatch fails! err=" << err;
         mcReleaseContext(context);
         if (boolean_opts == "UNION") {
             merge_mcut_meshes(srcMesh, cutMesh);
@@ -678,7 +678,7 @@ bool do_boolean_single(McutMesh &srcMesh, const McutMesh &cutMesh, const std::st
     uint32_t numConnComps;
     err = mcGetConnectedComponents(context, MC_CONNECTED_COMPONENT_TYPE_FRAGMENT, 0, NULL, &numConnComps);
     if (err != MC_NO_ERROR || numConnComps==0) {
-        BOOST_LOG_TRIVIAL(debug) << "MCUT mcGetConnectedComponents fails! err=" << err << ", numConnComps" << numConnComps;
+        //BOOST_LOG_TRIVIAL(debug) << "MCUT mcGetConnectedComponents fails! err=" << err << ", numConnComps" << numConnComps;
         mcReleaseContext(context);
         if (numConnComps == 0 && boolean_opts == "UNION") {
             merge_mcut_meshes(srcMesh, cutMesh);
diff --git a/src/libslic3r/Platform.cpp b/src/libslic3r/Platform.cpp
index 3387521..f219223 100644
--- a/src/libslic3r/Platform.cpp
+++ b/src/libslic3r/Platform.cpp
@@ -86,6 +86,10 @@ void detect_platform()
     BOOST_LOG_TRIVIAL(info) << "Platform: OpenBSD";
 	s_platform 		  = Platform::BSDUnix;
 	s_platform_flavor = PlatformFlavor::OpenBSD;
+#elif defined(__HAIKU__)
+    BOOST_LOG_TRIVIAL(info) << "Platform: Haiku";
+	s_platform 		  = Platform::BSDUnix;
+	s_platform_flavor = PlatformFlavor::OpenBSD;
 #else
 	// This should not happen.
     BOOST_LOG_TRIVIAL(info) << "Platform: Unknown";
diff --git a/src/libslic3r/PrintObject.cpp b/src/libslic3r/PrintObject.cpp
index 080c7aa..d0ea0eb 100644
--- a/src/libslic3r/PrintObject.cpp
+++ b/src/libslic3r/PrintObject.cpp
@@ -22,9 +22,9 @@
 #include "format.hpp"
 
 #include <float.h>
-#include <oneapi/tbb/blocked_range.h>
-#include <oneapi/tbb/concurrent_vector.h>
-#include <oneapi/tbb/parallel_for.h>
+#include <tbb/blocked_range.h>
+#include <tbb/concurrent_vector.h>
+#include <tbb/parallel_for.h>
 #include <string_view>
 #include <utility>
 
diff --git a/src/libslic3r/Support/SupportLayer.hpp b/src/libslic3r/Support/SupportLayer.hpp
index 64e3be9..163d9d2 100644
--- a/src/libslic3r/Support/SupportLayer.hpp
+++ b/src/libslic3r/Support/SupportLayer.hpp
@@ -1,8 +1,8 @@
 #ifndef slic3r_SupportLayer_hpp_
 #define slic3r_SupportLayer_hpp_
 
-#include <oneapi/tbb/scalable_allocator.h>
-#include <oneapi/tbb/spin_mutex.h>
+#include <tbb/scalable_allocator.h>
+#include <tbb/spin_mutex.h>
 // for Slic3r::deque
 #include "../libslic3r.h"
 #include "../ClipperUtils.hpp"
diff --git a/src/miniz/miniz.h b/src/miniz/miniz.h
index f0549f3..cd45055 100644
--- a/src/miniz/miniz.h
+++ b/src/miniz/miniz.h
@@ -125,7 +125,7 @@
 /* If MINIZ_NO_TIME is specified then the ZIP archive functions will not be able to get the current time, or */
 /* get/set file times, and the C run-time funcs that get/set times won't be called. */
 /* The current downside is the times written to your archives will be from 1979. */
-/*#define MINIZ_NO_TIME */
+#define MINIZ_NO_TIME
 
 /* Define MINIZ_NO_ARCHIVE_APIS to disable all ZIP archive API's. */
 /*#define MINIZ_NO_ARCHIVE_APIS */
diff --git a/src/slic3r/CMakeLists.txt b/src/slic3r/CMakeLists.txt
index 1e5ae34..70171a7 100644
--- a/src/slic3r/CMakeLists.txt
+++ b/src/slic3r/CMakeLists.txt
@@ -622,7 +622,7 @@ source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SLIC3R_GUI_SOURCES})
 encoding_check(libslic3r_gui)
 
 find_package(libnoise REQUIRED)
-target_link_libraries(libslic3r_gui libslic3r cereal::cereal imgui imguizmo minilzo GLEW::GLEW OpenGL::GL hidapi ${wxWidgets_LIBRARIES} glfw libcurl OpenSSL::SSL OpenSSL::Crypto noise::noise)
+target_link_libraries(libslic3r_gui libslic3r cereal::cereal imgui imguizmo minilzo GLEW::GLEW OpenGL::GL ${wxWidgets_LIBRARIES} glfw libcurl OpenSSL::SSL OpenSSL::Crypto noise::noise)
 
 if (MSVC)
     target_link_libraries(libslic3r_gui Setupapi.lib)
@@ -643,7 +643,7 @@ elseif (APPLE)
     target_link_libraries(libslic3r_gui ${DISKARBITRATION_LIBRARY})
 endif()
 
-if (SLIC3R_STATIC)
+if (SLIC3R_STATIC OR HAIKU)
     # FIXME: This was previously exported by wx-config but the wxWidgets
     # cmake build forgets this and the build fails in debug mode (or on raspberry release)
     target_compile_definitions(libslic3r_gui PUBLIC -DwxDEBUG_LEVEL=0)
@@ -685,5 +685,12 @@ if (UNIX AND NOT APPLE)
     target_include_directories(libslic3r_gui PRIVATE ${GSTREAMER_INCLUDE_DIRS} ${GST_BASE_INCLUDE_DIRS})
 endif ()
 
+if (HAIKU)
+	find_package(PkgConfig REQUIRED)
+	pkg_check_modules(webkit2gtk REQUIRED webkit2gtk-4.1)
+	target_link_libraries (libslic3r_gui ${webkit2gtk_LIBRARIES})
+	target_link_libraries (libslic3r_gui -lexecinfo)
+endif ()
+
 # Add a definition so that we can tell we are compiling slic3r.
 target_compile_definitions(libslic3r_gui PRIVATE SLIC3R_CURRENTLY_COMPILING_GUI_MODULE)
diff --git a/src/slic3r/GUI/BBLTopbar.cpp b/src/slic3r/GUI/BBLTopbar.cpp
index 0bf251d..103d32e 100644
--- a/src/slic3r/GUI/BBLTopbar.cpp
+++ b/src/slic3r/GUI/BBLTopbar.cpp
@@ -276,7 +276,7 @@ void BBLTopbar::Init(wxFrame* parent)
 
     //this->AddSeparator();
     this->AddSpacer(FromDIP(4));
-
+#ifndef __HAIKU__
     wxBitmap iconize_bitmap = create_scaled_bitmap("topbar_min", nullptr, TOPBAR_ICON_SIZE);
     wxAuiToolBarItem* iconize_btn = this->AddTool(wxID_ICONIZE_FRAME, "", iconize_bitmap);
 
@@ -295,7 +295,7 @@ void BBLTopbar::Init(wxFrame* parent)
 
     wxBitmap close_bitmap = create_scaled_bitmap("topbar_close", nullptr, TOPBAR_ICON_SIZE);
     wxAuiToolBarItem* close_btn = this->AddTool(wxID_CLOSE_FRAME, "", close_bitmap);
-
+#endif
     Realize();
     // m_toolbar_h = this->GetSize().GetHeight();
     m_toolbar_h = FromDIP(30);
@@ -309,9 +309,11 @@ void BBLTopbar::Init(wxFrame* parent)
     this->Bind(wxEVT_AUITOOLBAR_TOOL_DROPDOWN, &BBLTopbar::OnFileToolItem, this, ID_TOP_FILE_MENU);
     this->Bind(wxEVT_AUITOOLBAR_TOOL_DROPDOWN, &BBLTopbar::OnDropdownToolItem, this, ID_TOP_DROPDOWN_MENU);
     this->Bind(wxEVT_AUITOOLBAR_TOOL_DROPDOWN, &BBLTopbar::OnCalibToolItem, this, ID_CALIB);
+#ifndef __HAIKU__
     this->Bind(wxEVT_AUITOOLBAR_TOOL_DROPDOWN, &BBLTopbar::OnIconize, this, wxID_ICONIZE_FRAME);
     this->Bind(wxEVT_AUITOOLBAR_TOOL_DROPDOWN, &BBLTopbar::OnFullScreen, this, wxID_MAXIMIZE_FRAME);
     this->Bind(wxEVT_AUITOOLBAR_TOOL_DROPDOWN, &BBLTopbar::OnCloseFrame, this, wxID_CLOSE_FRAME);
+#endif
     this->Bind(wxEVT_LEFT_DCLICK, &BBLTopbar::OnMouseLeftDClock, this);
     this->Bind(wxEVT_LEFT_DOWN, &BBLTopbar::OnMouseLeftDown, this);
     this->Bind(wxEVT_LEFT_UP, &BBLTopbar::OnMouseLeftUp, this);
@@ -452,12 +454,16 @@ void BBLTopbar::SetTitle(wxString title)
 
 void BBLTopbar::SetMaximizedSize()
 {
+#ifndef __HAIKU__
     maximize_btn->SetBitmap(maximize_bitmap);
+#endif
 }
 
 void BBLTopbar::SetWindowSize()
 {
+#ifndef __HAIKU__
     maximize_btn->SetBitmap(window_bitmap);
+#endif
 }
 
 void BBLTopbar::UpdateToolbarWidth(int width)
@@ -505,7 +511,7 @@ void BBLTopbar::Rescale() {
     /*item = this->FindTool(ID_MODEL_STORE);
     item->SetBitmap(create_scaled_bitmap("topbar_store", this, TOPBAR_ICON_SIZE));
     */
-
+#ifndef __HAIKU__
     item = this->FindTool(wxID_ICONIZE_FRAME);
     item->SetBitmap(create_scaled_bitmap("topbar_min", this, TOPBAR_ICON_SIZE));
 
@@ -521,7 +527,7 @@ void BBLTopbar::Rescale() {
 
     item = this->FindTool(wxID_CLOSE_FRAME);
     item->SetBitmap(create_scaled_bitmap("topbar_close", this, TOPBAR_ICON_SIZE));
-
+#endif
     Realize();
 }
 
diff --git a/src/slic3r/GUI/Field.cpp b/src/slic3r/GUI/Field.cpp
index 6c4ff93..b1f54d6 100644
--- a/src/slic3r/GUI/Field.cpp
+++ b/src/slic3r/GUI/Field.cpp
@@ -1839,7 +1839,7 @@ void ColourPicker::sys_color_changed()
 }
 
 void ColourPicker::on_button_click(wxCommandEvent &event) {
-#if !defined(__linux__) && !defined(__LINUX__)
+#if !defined(__linux__) && !defined(__LINUX__) && !defined(__HAIKU__)
     if (m_clrData) {
         std::vector<std::string> colors = wxGetApp().app_config->get_custom_color_from_config();
         for (int i = 0; i < colors.size(); i++) {
@@ -1852,7 +1852,7 @@ void ColourPicker::on_button_click(wxCommandEvent &event) {
 
 void ColourPicker::convert_to_picker_widget(wxColourPickerCtrl *widget)
 {
-#if !defined(__linux__) && !defined(__LINUX__)
+#if !defined(__linux__) && !defined(__LINUX__) && !defined(__HAIKU__)
     m_picker_widget = dynamic_cast<wxColourPickerWidget*>(widget->GetPickerCtrl());
     if (m_picker_widget) {
         m_picker_widget->Bind(wxEVT_BUTTON, &ColourPicker::on_button_click, this);
diff --git a/src/slic3r/GUI/GLCanvas3D.cpp b/src/slic3r/GUI/GLCanvas3D.cpp
index 8ad93ff..5c16639 100644
--- a/src/slic3r/GUI/GLCanvas3D.cpp
+++ b/src/slic3r/GUI/GLCanvas3D.cpp
@@ -3952,6 +3952,11 @@ void GLCanvas3D::on_mouse(wxMouseEvent& evt)
     evt.SetY(evt.GetY() * scale);
 #endif
 
+#ifdef __HAIKU__
+	wxPoint win_pos = m_canvas->GetPosition();
+	printf("on_mouse %d %d %d %d\n", win_pos.x, win_pos.y, evt.GetX(), evt.GetY());
+#endif
+
     Point pos(evt.GetX(), evt.GetY());
 
     ImGuiWrapper* imgui = wxGetApp().imgui();
diff --git a/src/slic3r/GUI/GUI_App.cpp b/src/slic3r/GUI/GUI_App.cpp
index 58504a0..d733754 100644
--- a/src/slic3r/GUI/GUI_App.cpp
+++ b/src/slic3r/GUI/GUI_App.cpp
@@ -108,6 +108,12 @@
 #include "ModelMall.hpp"
 #include "HintNotification.hpp"
 
+#ifdef __HAIKU__
+#include <unistd.h>
+#include <sys/types.h>
+#include <signal.h>
+#endif
+
 //#ifdef WIN32
 //#include "BaseException.h"
 //#endif
@@ -1843,6 +1849,9 @@ GUI_App::~GUI_App()
     }
 
     BOOST_LOG_TRIVIAL(info) << __FUNCTION__<< boost::format(": exit");
+#ifdef __HAIKU__
+	kill(::getpid(), SIGKILL);
+#endif
 }
 
 // If formatted for github, plaintext with OpenGL extensions enclosed into <details>.
@@ -1859,7 +1868,7 @@ wxGLContext* GUI_App::init_glcontext(wxGLCanvas& canvas)
 
 bool GUI_App::init_opengl()
 {
-#ifdef __linux__
+#if defined(__linux__) || defined(__HAIKU__)
     bool status = m_opengl_mgr.init_gl();
     m_opengl_initialized = true;
     return status;
@@ -1951,7 +1960,7 @@ void GUI_App::init_app_config()
         }
         else{
             boost::filesystem::path data_dir_path;
-            #ifndef __linux__
+            #if !defined(__linux_) && !defined(__HAIKU__)
                 std::string data_dir = wxStandardPaths::Get().GetUserDataDir().ToUTF8().data();
                 //BBS create folder if not exists
                 data_dir_path = boost::filesystem::path(data_dir);
@@ -2049,6 +2058,8 @@ std::map<std::string, std::string> GUI_App::get_extra_header()
     extra_headers.insert(std::make_pair("X-BBL-OS-Type", "macos"));
 #elif defined(__LINUX__)
     extra_headers.insert(std::make_pair("X-BBL-OS-Type", "linux"));
+#elif defined(__HAIKU__)
+    extra_headers.insert(std::make_pair("X-BBL-OS-Type", "haiku"));
 #endif
     int major = 0, minor = 0, micro = 0;
     wxGetOsVersion(&major, &minor, &micro);
@@ -2644,11 +2655,11 @@ bool GUI_App::on_init_inner()
 
         // An ugly solution to GH #5537 in which GUI_App::init_opengl (normally called from events wxEVT_PAINT
         // and wxEVT_SET_FOCUS before GUI_App::post_init is called) wasn't called before GUI_App::post_init and OpenGL wasn't initialized.
-//#ifdef __linux__
-//        if (!m_post_initialized && m_opengl_initialized) {
-//#else
+#if defined(__linux__) || defined(__HAIKU__)
+        if (!m_post_initialized && m_opengl_initialized) {
+#else
         if (!m_post_initialized && !m_adding_script_handler) {
-//#endif
+#endif
             m_post_initialized = true;
 #ifdef WIN32
             this->mainframe->register_win32_callbacks();
@@ -4217,6 +4228,9 @@ void GUI_App::check_new_version(bool show_tips, int by_user)
 #endif
 #ifdef __LINUX__
     platform = "linux";
+#endif
+#ifdef __HAIKU__
+    platform = "haiku";
 #endif
     std::string query_params = (boost::format("?name=slicer&version=%1%&guide_version=%2%")
         % VersionInfo::convert_full_version(SLIC3R_VERSION)
@@ -4916,7 +4930,7 @@ bool GUI_App::switch_language()
     }
 }
 
-#ifdef __linux__
+#if defined(__linux__) || defined(__HAIKU__)
 static const wxLanguageInfo* linux_get_existing_locale_language(const wxLanguageInfo* language,
                                                                 const wxLanguageInfo* system_language)
 {
@@ -5121,7 +5135,7 @@ bool GUI_App::load_language(wxString language, bool initial)
                                                         m_language_info_best->CanonicalName.ToUTF8().data();
                         app_config->set("language", m_language_info_best->CanonicalName.ToUTF8().data());
                     }
-#ifdef __linux__
+#if defined(__linux__) || defined(__HAIKU__)
                     wxString lc_all;
                     if (wxGetEnv("LC_ALL", &lc_all) && !lc_all.IsEmpty()) {
                         // Best language returned by wxWidgets on Linux apparently does not respect LC_ALL.
@@ -5176,7 +5190,7 @@ bool GUI_App::load_language(wxString language, bool initial)
 		BOOST_LOG_TRIVIAL(info) << "Using Czech dictionaries for Slovak language";
     }
 
-#ifdef __linux__
+#if defined(__linux__) || defined(__HAIKU__)
     // If we can't find this locale , try to use different one for the language
     // instead of just reporting that it is impossible to switch.
     if (! wxLocale::IsAvailable(language_info->Language) && m_language_info_system) {
diff --git a/src/slic3r/GUI/GUI_App.hpp b/src/slic3r/GUI/GUI_App.hpp
index 5358795..81d39e1 100644
--- a/src/slic3r/GUI/GUI_App.hpp
+++ b/src/slic3r/GUI/GUI_App.hpp
@@ -234,7 +234,7 @@ private:
     bool            m_app_conf_exists{ false };
     EAppMode        m_app_mode{ EAppMode::Editor };
     bool            m_is_recreating_gui{ false };
-#ifdef __linux__
+#if defined(__linux__) || defined(__HAIKU__)
     bool            m_opengl_initialized{ false };
 #endif
 
diff --git a/src/slic3r/GUI/InstanceCheck.cpp b/src/slic3r/GUI/InstanceCheck.cpp
index 09d4da3..6875b62 100644
--- a/src/slic3r/GUI/InstanceCheck.cpp
+++ b/src/slic3r/GUI/InstanceCheck.cpp
@@ -220,6 +220,11 @@ namespace instance_check_internal
 		return false;
 	}
 
+#elif defined(__HAIKU__)
+	static bool  send_message(const std::string &message_text, const std::string &version)
+	{
+		return false;
+	}
 #elif defined(__linux__)
 
 	static bool  send_message(const std::string &message_text, const std::string &version)
diff --git a/src/slic3r/GUI/MediaPlayCtrl.cpp b/src/slic3r/GUI/MediaPlayCtrl.cpp
index 92367a5..9ccc927 100644
--- a/src/slic3r/GUI/MediaPlayCtrl.cpp
+++ b/src/slic3r/GUI/MediaPlayCtrl.cpp
@@ -18,8 +18,10 @@
 #include <boost/process/windows.hpp>
 #else
 #include <sys/ipc.h>
+#ifndef __HAIKU__
 #include <sys/shm.h>
 #endif
+#endif
 
 #include <wx/clipbrd.h>
 #include "wx/evtloop.h"
@@ -789,6 +791,8 @@ bool MediaPlayCtrl::get_stream_url(std::string *url)
         }
     }
     CloseHandle(shm);
+#elif defined(__HAIKU__)
+	return false;
 #else
     std::string file_url = data_dir() + "/cameratools/url.txt";
     key_t key = ::ftok(file_url.c_str(), 1000);
diff --git a/src/slic3r/GUI/Mouse3DController.cpp b/src/slic3r/GUI/Mouse3DController.cpp
index 2282559..d816cd5 100644
--- a/src/slic3r/GUI/Mouse3DController.cpp
+++ b/src/slic3r/GUI/Mouse3DController.cpp
@@ -800,6 +800,17 @@ bool Mouse3DController::handle_input(const DataPacketAxis& packet)
     return updated;
 }
 
+#elif defined(__HAIKU__)
+
+void Mouse3DController::init(){}
+void Mouse3DController::shutdown(){}
+void Mouse3DController::connected(std::string device_name){}
+void Mouse3DController::disconnected(){}
+bool Mouse3DController::handle_input(const DataPacketAxis& packet)
+{
+    return false;
+}
+
 #else //__APPLE__
 
 // Initialize the application.
diff --git a/src/slic3r/GUI/Mouse3DController.hpp b/src/slic3r/GUI/Mouse3DController.hpp
index 9fb9cf6..54e572b 100644
--- a/src/slic3r/GUI/Mouse3DController.hpp
+++ b/src/slic3r/GUI/Mouse3DController.hpp
@@ -6,7 +6,7 @@
 
 #include "libslic3r/Point.hpp"
 
-#include "hidapi.h"
+//#include "hidapi.h"
 
 #include <queue>
 #include <atomic>
@@ -154,7 +154,7 @@ class Mouse3DController
     std::atomic<bool> 	m_connected { false };
     std::string 		m_device_str;
 
-#if ! __APPLE__
+#if !defined(__APPLE__) && !defined(__HAIKU__)
     // Worker thread for enumerating devices, connecting, reading data from the device and closing the device.
     std::thread 		m_thread;
     hid_device* 		m_device { nullptr };
@@ -190,7 +190,7 @@ public:
 
     bool connected() const { return m_connected; }
 
-#if __APPLE__
+#if defined(__APPLE__) || defined(__HAIKU__)
     // Interfacing with the Objective C code (MouseHandlerMac.mm)
     void connected(std::string device_name);
     void disconnected();
@@ -219,7 +219,7 @@ public:
     void show_settings_dialog(bool show) { m_show_settings_dialog = show && this->connected(); }
     void render_settings_dialog(GLCanvas3D& canvas) const;
 
-#if ! __APPLE__
+#if !defined(__APPLE__) && !defined(__HAIKU__)
 private:
     bool connect_device();
     void disconnect_device();
diff --git a/src/slic3r/GUI/PhysicalPrinterDialog.cpp b/src/slic3r/GUI/PhysicalPrinterDialog.cpp
index 1ec7b53..c46b64a 100644
--- a/src/slic3r/GUI/PhysicalPrinterDialog.cpp
+++ b/src/slic3r/GUI/PhysicalPrinterDialog.cpp
@@ -374,7 +374,10 @@ void PhysicalPrinterDialog::build_printhost_settings(ConfigOptionsGroup* m_optgr
     // Always fill in the "printhost_port" combo box from the config and select it.
     {
         Choice* choice = dynamic_cast<Choice*>(m_optgroup->get_field("printhost_port"));
-        choice->set_values({ m_config->opt_string("printhost_port") });
+        
+        wxArrayString ports;
+       	ports.Add(m_config->opt_string("printhost_port"));
+        choice->set_values(ports);
         choice->set_selection();
     }
 
diff --git a/src/slic3r/GUI/PrinterCloudAuthDialog.cpp b/src/slic3r/GUI/PrinterCloudAuthDialog.cpp
index 4d29d9b..8da0438 100644
--- a/src/slic3r/GUI/PrinterCloudAuthDialog.cpp
+++ b/src/slic3r/GUI/PrinterCloudAuthDialog.cpp
@@ -13,7 +13,7 @@
 
 #include <nlohmann/json.hpp>
 #include "MainFrame.hpp"
-#include <boost/dll.hpp>
+//#include <boost/dll.hpp>
 
 #include <sstream>
 #include <slic3r/GUI/Widgets/WebView.hpp>
@@ -101,4 +101,4 @@ void PrinterCloudAuthDialog::OnScriptMessage(wxWebViewEvent& evt)
 }
 
 }
-} // namespace Slic3r::GUI
\ No newline at end of file
+} // namespace Slic3r::GUI
diff --git a/src/slic3r/GUI/RemovableDriveManager.cpp b/src/slic3r/GUI/RemovableDriveManager.cpp
index 83ec469..c67ed43 100644
--- a/src/slic3r/GUI/RemovableDriveManager.cpp
+++ b/src/slic3r/GUI/RemovableDriveManager.cpp
@@ -16,7 +16,9 @@
 #else
 // unix, linux & OSX includes
 #include <errno.h>
+#ifndef __HAIKU__
 #include <sys/mount.h>
+#endif
 #include <sys/stat.h>
 #include <glob.h>
 #include <pwd.h>
diff --git a/src/slic3r/GUI/WebDownPluginDlg.cpp b/src/slic3r/GUI/WebDownPluginDlg.cpp
index a4f3cc9..d83cba3 100644
--- a/src/slic3r/GUI/WebDownPluginDlg.cpp
+++ b/src/slic3r/GUI/WebDownPluginDlg.cpp
@@ -21,7 +21,7 @@
 #include <boost/lexical_cast.hpp>
 
 #include "MainFrame.hpp"
-#include <boost/dll.hpp>
+//#include <boost/dll.hpp>
 #include <slic3r/GUI/Widgets/WebView.hpp>
 #include <slic3r/Utils/Http.hpp>
 #include <libslic3r/miniz_extension.hpp>
diff --git a/src/slic3r/GUI/WebGuideDialog.cpp b/src/slic3r/GUI/WebGuideDialog.cpp
index 3cc8374..daf5ea5 100644
--- a/src/slic3r/GUI/WebGuideDialog.cpp
+++ b/src/slic3r/GUI/WebGuideDialog.cpp
@@ -27,7 +27,7 @@
 #include <boost/filesystem.hpp>
 
 #include "MainFrame.hpp"
-#include <boost/dll.hpp>
+//#include <boost/dll.hpp>
 #include <slic3r/GUI/Widgets/WebView.hpp>
 #include <slic3r/Utils/Http.hpp>
 #include <libslic3r/miniz_extension.hpp>
diff --git a/src/slic3r/GUI/WebUserLoginDialog.cpp b/src/slic3r/GUI/WebUserLoginDialog.cpp
index b95aa50..ce8b8d2 100644
--- a/src/slic3r/GUI/WebUserLoginDialog.cpp
+++ b/src/slic3r/GUI/WebUserLoginDialog.cpp
@@ -21,7 +21,7 @@
 
 #include <nlohmann/json.hpp>
 #include "MainFrame.hpp"
-#include <boost/dll.hpp>
+//#include <boost/dll.hpp>
 
 #include <sstream>
 #include <slic3r/GUI/Widgets/WebView.hpp>
diff --git a/src/slic3r/GUI/Widgets/Label.cpp b/src/slic3r/GUI/Widgets/Label.cpp
index 7482f3c..a431b56 100644
--- a/src/slic3r/GUI/Widgets/Label.cpp
+++ b/src/slic3r/GUI/Widgets/Label.cpp
@@ -60,7 +60,7 @@ wxFont Label::Body_8;
 
 void Label::initSysFont()
 {
-#if defined(__linux__) || defined(_WIN32)
+#if defined(__linux__) || defined(_WIN32) || defined(__HAIKU__)
     const std::string &resource_path = Slic3r::resources_dir();
     wxString font_path = wxString::FromUTF8(resource_path + "/fonts/HarmonyOS_Sans_SC_Bold.ttf");
     bool result = wxFont::AddPrivateFont(font_path);
diff --git a/src/slic3r/GUI/Widgets/StateColor.cpp b/src/slic3r/GUI/Widgets/StateColor.cpp
index f2e1b07..674edbc 100644
--- a/src/slic3r/GUI/Widgets/StateColor.cpp
+++ b/src/slic3r/GUI/Widgets/StateColor.cpp
@@ -200,11 +200,15 @@ std::map<wxColour, wxColour> revert(std::map<wxColour, wxColour> const & map)
 
 wxColour StateColor::lightModeColorFor(wxColour const &color)
 {
+#ifdef __HAIKU__
+	return darkModeColorFor2(color);
+#else
     static std::map<wxColour, wxColour> gLightColors = revert(gDarkColors);
     auto iter = gLightColors.find(color);
     wxASSERT(iter != gLightColors.end());
     if (iter != gLightColors.end()) return iter->second;
     return color;
+#endif
 }
 
 wxColour StateColor::darkModeColorFor(wxColour const &color) { return darkModeColorFor2(color); }
diff --git a/src/slic3r/GUI/Widgets/WebView.cpp b/src/slic3r/GUI/Widgets/WebView.cpp
index a84a150..de9493f 100644
--- a/src/slic3r/GUI/Widgets/WebView.cpp
+++ b/src/slic3r/GUI/Widgets/WebView.cpp
@@ -20,7 +20,7 @@
 #include <WebView2.h>
 #include <Shellapi.h>
 #include <slic3r/Utils/Http.hpp>
-#elif defined __linux__
+#elif defined(__linux__) || defined(__HAIKU__)
 #include <gtk/gtk.h>
 #define WEBKIT_API
 struct WebKitWebView;
diff --git a/src/slic3r/GUI/wxMediaCtrl2.cpp b/src/slic3r/GUI/wxMediaCtrl2.cpp
index 925874e..4b4e114 100644
--- a/src/slic3r/GUI/wxMediaCtrl2.cpp
+++ b/src/slic3r/GUI/wxMediaCtrl2.cpp
@@ -10,7 +10,7 @@
 #include <shellapi.h>
 #endif
 
-#ifdef __LINUX__
+#if defined(__LINUX__) || defined(__HAIKU__)
 #include "Printer/gstbambusrc.h"
 #include <gst/gst.h> // main gstreamer header
 class WXDLLIMPEXP_MEDIA
@@ -40,7 +40,7 @@ wxMediaCtrl2::wxMediaCtrl2(wxWindow *parent)
     }
 #endif
     wxMediaCtrl::Create(parent, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxMEDIACTRLPLAYERCONTROLS_NONE);
-#ifdef __LINUX__
+#if defined(__LINUX__) || defined(__HAIKU__)
     /* Register only after we have created the wxMediaCtrl, since only then are we guaranteed to have fired up Gstreamer's plugin registry. */
     auto playbin = reinterpret_cast<wxGStreamerMediaBackend *>(m_imp)->m_playbin;
     g_object_set (G_OBJECT (playbin),
@@ -216,13 +216,13 @@ void wxMediaCtrl2::Stop()
     wxMediaCtrl::Stop();
 }
 
-#ifdef __LINUX__
+#if defined(__LINUX__) || defined(__HAIKU__)
 extern "C" int gst_bambu_last_error;
 #endif
 
 int wxMediaCtrl2::GetLastError() const
 {
-#ifdef __LINUX__
+#if defined(__LINUX__) || defined(__HAIKU__)
     return gst_bambu_last_error;
 #else
     return m_error;
@@ -231,7 +231,7 @@ int wxMediaCtrl2::GetLastError() const
 
 wxSize wxMediaCtrl2::GetVideoSize() const
 {
-#ifdef __LINUX__
+#if defined(__LINUX__) || defined(__HAIKU__)
     // Gstreamer doesn't give us a VideoSize until we're playing, which
     // confuses the MediaPlayCtrl into claiming that it is stuck
     // "Loading...".  Fake it out for now.
diff --git a/src/slic3r/Utils/Serial.cpp b/src/slic3r/Utils/Serial.cpp
index 4db1acc..3e0ab5a 100644
--- a/src/slic3r/Utils/Serial.cpp
+++ b/src/slic3r/Utils/Serial.cpp
@@ -45,7 +45,11 @@
 #ifndef _WIN32
 	#include <sys/ioctl.h>
 	#include <sys/time.h>
+#ifdef __HAIKU__
+    #include <unistd.h>
+#else
 	#include <sys/unistd.h>
+#endif
 	#include <sys/select.h>
 #endif
 
-- 
2.48.1


From bed5df72943e222d8a2a676d4c5cc392317d7d22 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Thu, 6 Mar 2025 09:59:29 +1000
Subject: Implement rename threads for Haiku


diff --git a/src/libslic3r/Thread.cpp b/src/libslic3r/Thread.cpp
index 3030b6d..11b2535 100644
--- a/src/libslic3r/Thread.cpp
+++ b/src/libslic3r/Thread.cpp
@@ -6,6 +6,10 @@
 	#include <pthread.h>
 #endif
 
+#ifdef __HAIKU__
+#include <OS.h>
+#endif
+
 #include <atomic>
 #include <condition_variable>
 #include <mutex>
@@ -156,6 +160,31 @@ std::optional<std::string> get_current_thread_name()
 	return std::nullopt;
 }
 
+#elif defined(__HAIKU__)
+
+bool set_thread_name(std::thread &thread, const char *thread_name)
+{
+	return rename_thread(get_pthread_thread_id(thread.native_handle()), thread_name) == B_OK;
+}
+
+bool set_thread_name(boost::thread &thread, const char *thread_name)
+{
+	return rename_thread(get_pthread_thread_id(thread.native_handle()), thread_name) == B_OK;
+}
+
+bool set_current_thread_name(const char *thread_name)
+{
+	return rename_thread(find_thread(NULL), thread_name) == B_OK;
+}
+
+std::optional<std::string> get_current_thread_name()
+{
+	thread_info info;
+	if (get_thread_info(find_thread(NULL), &info) == B_OK)
+		return std::string(info.name);
+	return std::string("");
+}
+
 #else
 
 // posix
-- 
2.48.1

