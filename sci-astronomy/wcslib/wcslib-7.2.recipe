SUMMARY="Astronomical World Coordinate System transformations library"
DESCRIPTION="WCSLIB is a C library, supplied with a full set of Fortran wrappers, \
that implements the World Coordinate System (WCS) convention in FITS \
(Flexible Image Transport System). Since PGPLOT is not yet available on Haiku,
this package doesn't include PGBOX (routines for drawing general curvilinear \
coordinate graticules)."
HOMEPAGE="http://www.atnf.csiro.au/people/mcalabre/WCS/"
COPYRIGHT="1995-2020 Mark Calabretta - Australia Telescope National Facility, CSIRO."
LICENSE="GNU GPL v3"
REVISION="1"
SOURCE_URI="ftp://ftp.atnf.csiro.au/pub/software/wcslib/wcslib-$portVersion.tar.bz2"
CHECKSUM_SHA256="63959eb4859517a1ecca48c91542318bebeed62e4a1663656de9a983af376e39"
PATCHES="wcslib-$portVersion.patchset"

ARCHITECTURES="x86_gcc2 x86_64 ?arm ?ppc ?sparc"
SECONDARY_ARCHITECTURES="x86"

portVersionCompat="$portVersion compat >= 7.1"
libVersion="$portVersion"
libVersionCompat="$libVersion compat >= ${libVersion%%.*}"

commandSuffix=$secondaryArchSuffix
commandBinDir=$binDir
if [ "$targetArchitecture" = x86_gcc2 ]; then
	commandSuffix=
	commandBinDir=$prefix/bin
fi

PROVIDES="
	wcslib$secondaryArchSuffix = $portVersionCompat
	lib:libwcs$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libcfitsio$secondaryArchSuffix
	"
if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
REQUIRES+="
	lib:libgfortran$secondaryArchSuffix
	"
fi

PROVIDES_devel="
	wcslib${secondaryArchSuffix}_devel = $portVersionCompat
	devel:libwcs$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES_devel="
	wcslib$secondaryArchSuffix == $portVersion base
	haiku$secondaryArchSuffix
	lib:libcfitsio$secondaryArchSuffix
	"
if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
REQUIRES_devel+="
	lib:libgfortran$secondaryArchSuffix
	"
fi

PROVIDES_utils="
	wcslib${secondaryArchSuffix}_utils = $portVersion
	cmd:hpxcvt$secondaryArchSuffix = $portVersionCompat
	cmd:fitshdr$secondaryArchSuffix = $portVersionCompat
	cmd:wcsware$secondaryArchSuffix = $portVersionCompat
	"
REQUIRES_utils="
	wcslib$secondaryArchSuffix == $portVersion base
	haiku$secondaryArchSuffix
	lib:libcfitsio$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libcfitsio$secondaryArchSuffix
	"
if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
BUILD_REQUIRES+="
	devel:libgfortran$secondaryArchSuffix
	"
fi
BUILD_PREREQUIRES="
	cmd:aclocal
	cmd:autoreconf
	cmd:awk
	cmd:gcc$secondaryArchSuffix
	cmd:make
	cmd:xargs
	"
if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
BUILD_PREREQUIRES+="
	cmd:gfortran$secondaryArchSuffix
	"
fi

defineDebugInfoPackage wcslib$secondaryArchSuffix \
	"$libDir"/libwcs.so.$libVersion

BUILD()
{
	autoreconf -vfi
	runConfigure --omit-dirs binDir ./configure \
		--bindir="$commandBinDir" \
		--with-cfitsiolib=`finddir B_SYSTEM_LIB_DIRECTORY` \
		--with-cfitsioinc=`finddir B_SYSTEM_HEADERS_DIRECTORY` \
		--without-pgplot \
		--enable-fortran

	make $jobArgs
}

INSTALL()
{
	make install

	rm -f $libDir/libwcs.a

	prepareInstalledDevelLib libwcs
	fixPkgconfig

	# copy pdf documentation
	mkdir -p $developDocDir
	cp -rd *.pdf $developDocDir

	# copy html documentation
	cp -rd html $developDocDir/

	# devel package
	packageEntries devel $developDir

	# utils package
	packageEntries utils $commandBinDir
}

TEST()
{
	make check $jobArgs
}
