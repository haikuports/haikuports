From: наб <nabijaczleweli@nabijaczleweli.xyz>
Date: Wed, 14 Dec 2022 03:51:13 +0100
Subject: builtin: Don't early-exit when first hash -r is found

This fixes incorrectly-accepted "hash -rv" being equivalent to hash -r
(well, hash -r[literally anything] being equivalent to hash -r)

Also remove -v from the manual, it doesn't appear to have ever existed

Bug-Debian: https://bugs.debian.org/819829
---
 src/dash.1 | 6 ++----
 src/exec.c | 8 +++++++-
 2 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/src/dash.1 b/src/dash.1
index 169d5df..4bb348a 100644
--- a/src/dash.1
+++ b/src/dash.1
@@ -1443,7 +1443,8 @@ cmd \-a \-c arg file file
 cmd \-carg -a file file
 cmd \-a \-carg \-\- file file
 .Ed
-.It hash Fl rv Ar command ...
+.It hash Op Ar command ...
+.It hash Fl r
 The shell maintains a hash table which remembers the
 locations of commands.
 With no arguments whatsoever,
@@ -1459,9 +1460,6 @@ With arguments, the
 .Ic hash
 command removes the specified commands from the hash table (unless
 they are functions) and then locates them.
-With the
-.Fl v
-option, hash prints the locations of the commands as it finds them.
 The
 .Fl r
 option causes the hash command to delete all the entries in the hash table
diff --git a/src/exec.c b/src/exec.c
index 93424b2..67fa529 100644
--- a/src/exec.c
+++ b/src/exec.c
@@ -36,6 +36,7 @@
 #include <sys/stat.h>
 #include <unistd.h>
 #include <fcntl.h>
+#include <stdbool.h>
 #include <stdlib.h>
 #ifdef HAVE_PATHS_H
 #include <paths.h>
@@ -303,11 +304,16 @@ hashcmd(int argc, char **argv)
 	int c;
 	struct cmdentry entry;
 	char *name;
+	bool clear;
 
-	while ((c = nextopt("r")) != '\0') {
+	clear = false;
+	while ((c = nextopt("r")) != '\0')
+		clear = true;
+	if(clear) {
 		clearcmdentry();
 		return 0;
 	}
+
 	if (*argptr == NULL) {
 		for (pp = cmdtable ; pp < &cmdtable[CMDTABLESIZE] ; pp++) {
 			for (cmdp = *pp ; cmdp ; cmdp = cmdp->next) {
