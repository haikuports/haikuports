SUMMARY="Context-aware bash history search replacement (ctrl-r)"
DESCRIPTION="McFly replaces your default ctrl-r shell history search with an intelligent search \
engine that takes into account your working directory and the context of recently executed \
commands. McFly's suggestions are prioritized in real time with a small neural network.

TL;DR: an upgraded ctrl-r where history results make sense for what you're working on right now.

Features:
* Rebinds ctrl-r to bring up a full-screen reverse history search prioritized with a small neural \
network.
* Augments your shell history to track command exit status, timestamp, and execution directory in \
a SQLite database.
* Maintains your normal shell history file as well so that you can stop using McFly whenever you \
want.
* Unicode support throughout.
* Includes a simple action to scrub any history item from the McFly database and your shell \
history files.
* Designed to be extensible for other shells in the future.
* Written in Rust, so it's fast and safe.
* You can type % to match any number of characters when searching.
* Supports Zsh, Bash (version 3+), and PowerShell (version 7+)

To enable McFly on:
* bash: add 'eval \"\$(mcfly init bash)\"' to the end of ~/config/settings/profile
* zsh: add 'eval \"\$(mcfly init zsh)\"' to the end of ~/config/settings/zsh/zshrc

And then restart Terminal."
HOMEPAGE="https://github.com/cantino/mcfly"
COPYRIGHT="2018 Andrew Cantino"
LICENSE="MIT"
REVISION="1"
SOURCE_URI="https://github.com/cantino/mcfly/archive/refs/tags/v$portVersion.tar.gz"
CHECKSUM_SHA256="194383276095b71dd6d085fb959ba7981384cbe09776fd5f182e95bbed5a3a13"
PATCHES="mcfly-$portVersion.patchset"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

# On x86_gcc2 we don't want to install the commands in bin/<arch>/, but in bin/.
commandSuffix=$secondaryArchSuffix
commandBinDir=$binDir
if [ "$targetArchitecture" = x86_gcc2 ]; then
	commandSuffix=
	commandBinDir=$prefix/bin
fi

PROVIDES="
	mcfly$secondaryArchSuffix = $portVersion
	cmd:mcfly$commandSuffix = $portVersion
	"
REQUIRES="
	haiku$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
BUILD_PREREQUIRES="
	cmd:cargo
	cmd:gcc$secondaryArchSuffix
	cmd:rustc
	"

BUILD()
{
	cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
	cargo build --release
}

INSTALL()
{
	install -d $commandBinDir $documentationDir/packages/mcfly
	install -t $commandBinDir target/release/mcfly
	install -t $documentationDir/packages/mcfly README.md
}
