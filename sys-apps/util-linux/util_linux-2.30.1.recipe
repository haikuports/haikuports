SUMMARY="A random collection of Linux utilities"
DESCRIPTION="Various useful Linux utilities."
HOMEPAGE="https://www.kernel.org/pub/linux/utils/util-linux/"
COPYRIGHT="Various Authors"
LICENSE="GNU GPL v2
	GNU LGPL v2
	BSD (4-clause)
	Public Domain"
REVISION="1"
SOURCE_URI="https://www.kernel.org/pub/linux/utils/util-linux/v2.30/util-linux-$portVersion.tar.gz"
CHECKSUM_SHA256="88bb1d08f0d67fb1b548c3e2160f7f40fb552cdf6b771a5dd1b94e1e04fc1d9a"
SOURCE_DIR="util-linux-$portVersion"
PATCHES="util_linux-$portVersion.patchset"

ARCHITECTURES="?x86_gcc2 x86 x86_64"
SECONDARY_ARCHITECTURES="x86"

# On x86_gcc2 we don't want to install the commands in bin/<arch>/, but in bin/.
commandSuffix=$secondaryArchSuffix
if [ "$targetArchitecture" = x86_gcc2 ]; then
	commandSuffix=
fi

PROVIDES="
	util_linux$secondaryArchSuffix = $portVersion compat >= 2
	cmd:cal$commandSuffix = $portVersion
	cmd:nologin$commandSuffix = $portVersion
	cmd:rename$commandSuffix = $portVersion
	cmd:ul$commandSuffix = $portVersion
	lib:libsmartcols$secondaryArchSuffix = $portVersion compat >= 1

	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libintl$secondaryArchSuffix
	lib:libncurses$secondaryArchSuffix
	lib:libz$secondaryArchSuffix
	"

PROVIDES_devel="
	util_linux${secondaryArchSuffix}_devel = $portVersion compat >= 2
	devel:libsmartcols$secondaryArchSuffix = $portVersion compat >= 1
	"
REQUIRES_devel="
	util_linux$secondaryArchSuffix == $portVersion base
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libintl$secondaryArchSuffix
	devel:libncurses$secondaryArchSuffix
	devel:libz$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:aclocal
	cmd:autoconf
	cmd:autom4te
	cmd:automake
	cmd:bison
	cmd:gcc$secondaryArchSuffix
	cmd:gettext$secondaryArchSuffix
	cmd:libtoolize$secondaryArchSuffix
	cmd:make
	cmd:pkg_config$secondaryArchSuffix
	"

BUILD()
{
	export CFLAGS="-D_BSD_SOURCE -DB_USE_POSITIVE_POSIX_ERRORS"
	export LDFLAGS="-lnetwork -lbsd -lposix_error_mapper"

	autogen.sh
	runConfigure ./configure \
		--disable-all-programs \
		--enable-cal \
		--enable-libsmartcols \
		--enable-rename \
		--enable-nologin \
		--enable-ul
	make
}

INSTALL()
{
	make install

	# Cleanup
	rm -rf $prefix/sbin

	# Remove libtool file
	rm -f $libDir/libsmartcols.la

	prepareInstalledDevelLib libsmartcols
	fixPkgconfig

	packageEntries devel \
		$developDir
}

TEST()
{
	make check
}
