From 7dd472c907c0ec240c6ab74c435d937fc7311552 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Thu, 12 May 2016 19:46:43 +0000
Subject: Haiku patch


diff --git a/configure.ac b/configure.ac
index 3c5f922..31cef67 100644
--- a/configure.ac
+++ b/configure.ac
@@ -128,14 +128,14 @@ else
    WARNINGS="-Wall -Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith \
        -Wmissing-declarations -Wredundant-decls -Wnested-externs \
        -Wsign-compare -Wreturn-type -Wswitch -Wshadow \
-       -Wcast-qual -Wwrite-strings -Wextra -Wunused-parameter -Wformat=2"
+       -Wcast-qual -Wwrite-strings"
 fi], [
 if test "$GCC" = yes; then
    AC_MSG_RESULT(yes)
    WARNINGS="-Wall -Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith \
        -Wmissing-declarations -Wredundant-decls -Wnested-externs \
        -Wsign-compare -Wreturn-type -Wswitch -Wshadow \
-       -Wcast-qual -Wwrite-strings -Wextra -Wunused-parameter -Wformat=2"
+       -Wcast-qual -Wwrite-strings"
 else
    WARNINGS=
    AC_MSG_RESULT(no)
diff --git a/src/der.c b/src/der.c
index af5f149..3fc57fd 100644
--- a/src/der.c
+++ b/src/der.c
@@ -199,6 +199,7 @@ static int
 der_data(char *buf, size_t blen, uint32_t tag, const void *q, uint32_t len)
 {
 	const uint8_t *d = q;
+	uint32_t i;
 	switch (tag) {
 	case DER_TAG_PRINTABLE_STRING:
 	case DER_TAG_UTF8_STRING:
@@ -209,7 +210,7 @@ der_data(char *buf, size_t blen, uint32_t tag, const void *q, uint32_t len)
 		break;
 	}
 		
-	for (uint32_t i = 0; i < len; i++) {
+	for (i = 0; i < len; i++) {
 		uint32_t z = i << 1;
 		if (z < blen - 2)
 			snprintf(buf + z, blen - z, "%.2x", d[i]);
@@ -222,12 +223,13 @@ der_offs(struct magic_set *ms, struct magic *m, size_t nbytes)
 {
 	const uint8_t *b = CAST(const void *, ms->search.s);
 	size_t offs = 0, len = ms->search.rm_len ? ms->search.rm_len : nbytes;
+	uint32_t tlen;
 
 	if (gettag(b, &offs, len) == DER_BAD)
 		return -1;
 	DPRINTF(("%s1: %d %zu %u\n", __func__, ms->offset, offs, m->offset));
 
-	uint32_t tlen = getlength(b, &offs, len);
+	tlen = getlength(b, &offs, len);
 	if (tlen == DER_BAD)
 		return -1;
 	DPRINTF(("%s2: %d %zu %u\n", __func__, ms->offset, offs, tlen));
@@ -256,6 +258,7 @@ der_cmp(struct magic_set *ms, struct magic *m)
 	size_t offs = 0, len = ms->search.s_len;
 	uint32_t tag, tlen;
 	char buf[128];
+	size_t slen;
 
 	tag = gettag(b, &offs, len);
 	if (tag == DER_BAD)
@@ -269,7 +272,7 @@ der_cmp(struct magic_set *ms, struct magic *m)
 	if ((ms->flags & MAGIC_DEBUG) != 0)
 		fprintf(stderr, "%s: tag %p got=%s exp=%s\n", __func__, b,
 		    buf, s);
-	size_t slen = strlen(buf);
+	slen = strlen(buf);
 
 	if (strncmp(buf, s, slen) != 0)
 		return 0;
diff --git a/src/readelf.c b/src/readelf.c
index 39598f7..84a5196 100644
--- a/src/readelf.c
+++ b/src/readelf.c
@@ -909,6 +909,7 @@ do_auxv_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,
 	const char *tag;
 	int is_string;
 	size_t nval;
+	size_t off;
 
 	if (type != NT_AUXV || (*flags & FLAGS_IS_CORE) == 0)
 		return 0;
@@ -916,7 +917,7 @@ do_auxv_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,
 	*flags |= FLAGS_DID_AUXV;
 
 	nval = 0;
-	for (size_t off = 0; off + elsize <= descsz; off += elsize) {
+	for (off = 0; off + elsize <= descsz; off += elsize) {
 		(void)memcpy(xauxv_addr, &nbuf[doff + off], xauxv_sizeof);
 		/* Limit processing to 50 vector entries to prevent DoS */
 		if (nval++ >= 50) {
-- 
2.7.0

