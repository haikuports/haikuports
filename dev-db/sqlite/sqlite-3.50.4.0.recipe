SUMMARY="An SQL Database Engine in a C library"
DESCRIPTION="SQLite is a software library that implements a self-contained, \
serverless, zero-configuration, transactional SQL database engine. SQLite is \
the most widely deployed SQL database engine in the world. The source code for \
SQLite is in the public domain."
HOMEPAGE="https://www.sqlite.org/"
COPYRIGHT="Public Domain"
LICENSE="SQLite"
REVISION="1"
sqliteVersion=$(echo $portVersion | sed -e 's/\.\([0-9]\>\)/0\1/g' -e 's/\.//g')
SOURCE_URI="https://www.sqlite.org/2025/sqlite-autoconf-$sqliteVersion.tar.gz"
CHECKSUM_SHA256="a3db587a1b92ee5ddac2f66b3edb41b26f9c867275782d46c3a088977d6a5b18"
SOURCE_DIR="sqlite-autoconf-$sqliteVersion"

ARCHITECTURES="all"
SECONDARY_ARCHITECTURES="x86"

libVersion="${portVersion%.*}"
libVersionCompat="$libVersion compat >= 0"
portVersionCompat="$portVersion compat >= 3"

PROVIDES="
	sqlite$secondaryArchSuffix = $portVersionCompat
	lib:libsqlite3$secondaryArchSuffix = $libVersionCompat
	"
if [ -z "$secondaryArchSuffix" ]; then
PROVIDES="$PROVIDES
	cmd:sqlite3 = $portVersionCompat
	"
fi

REQUIRES="
	haiku$secondaryArchSuffix
	lib:libreadline$secondaryArchSuffix
	lib:libz$secondaryArchSuffix
	"

PROVIDES_devel="
	sqlite${secondaryArchSuffix}_devel = $portVersion
	devel:libsqlite3$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES_devel="
	sqlite$secondaryArchSuffix == $portVersion base
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libreadline$secondaryArchSuffix >= 8
	devel:libz$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:make
	"

defineDebugInfoPackage sqlite$secondaryArchSuffix \
	"$libDir"/libsqlite3.so.$libVersion

BUILD()
{
	export CPPFLAGS="$CPPFLAGS \
		-DSQLITE_ENABLE_COLUMN_METADATA=1 \
		-DSQLITE_ENABLE_UNLOCK_NOTIFY \
		-DSQLITE_ENABLE_DBSTAT_VTAB \
		-DSQLITE_SECURE_DELETE=1 \
		-DSQLITE_ENABLE_FTS3=1 \
		-DSQLITE_ENABLE_FTS3_PARENTHESIS \
		-DSQLITE_ENABLE_FTS5 \
		-DSQLITE_ENABLE_RTREE"
	./configure --prefix=$prefix \
		--mandir=$manDir \
		--includedir=$includeDir \
		--libdir=$libDir \
		--soname=legacy \
		--disable-static

	# Not using "make $jobArgs" because parallel builds are not supported.
	make
}

INSTALL()
{
	make install

	prepareInstalledDevelLib libsqlite3
	fixPkgconfig

	# devel package
	packageEntries devel \
		$developDir

	# Remove stuff we don't need in the secondary architecture base package.
	if [ -n "$secondaryArchSuffix" ]; then
		rm -rf $binDir
		rm -rf $documentationDir
	fi
}

TEST()
{
	make check
}
