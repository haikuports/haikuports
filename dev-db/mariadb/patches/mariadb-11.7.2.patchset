From 6405565ec48af1ddc66efe72d1e9f3f96592e583 Mon Sep 17 00:00:00 2001
From: DigitalBox98 <digitalbox098@gmail.com>
Date: Tue, 18 Feb 2025 13:31:11 +0000
Subject: m_string.h patch


diff --git a/include/m_string.h b/include/m_string.h
index 060ab2c..faa43de 100644
--- a/include/m_string.h
+++ b/include/m_string.h
@@ -55,7 +55,9 @@
 
 # define bmove_align(A,B,C)     memcpy((A),(B),(C))
 
+#ifndef bcmp
 # define bcmp(A,B,C)		memcmp((A),(B),(C))
+#endif
 
 #if !defined(bzero)
 # define bzero(A,B)             memset((A),0,(B))
-- 
2.45.2


From 2a90430c37143ed0c8d449fd72eca598c7ebb3b6 Mon Sep 17 00:00:00 2001
From: DigitalBox98 <digitalbox098@gmail.com>
Date: Tue, 18 Feb 2025 16:50:22 +0000
Subject: patch vector_mhnsw.cc


diff --git a/sql/vector_mhnsw.cc b/sql/vector_mhnsw.cc
index 4ef5f64..0081b5d 100644
--- a/sql/vector_mhnsw.cc
+++ b/sql/vector_mhnsw.cc
@@ -119,77 +119,8 @@ struct FVector
     abs2= scale * scale * dot_product(dims, dims, vec_len) / 2;
   }
 
-#ifdef AVX2_IMPLEMENTATION
-  /************* AVX2 *****************************************************/
-  static constexpr size_t AVX2_bytes= 256/8;
-  static constexpr size_t AVX2_dims= AVX2_bytes/sizeof(int16_t);
-
-  AVX2_IMPLEMENTATION
-  static float dot_product(const int16_t *v1, const int16_t *v2, size_t len)
-  {
-    typedef float v8f __attribute__((vector_size(AVX2_bytes)));
-    union { v8f v; __m256 i; } tmp;
-    __m256i *p1= (__m256i*)v1;
-    __m256i *p2= (__m256i*)v2;
-    v8f d= {0};
-    for (size_t i= 0; i < (len + AVX2_dims-1)/AVX2_dims; p1++, p2++, i++)
-    {
-      tmp.i= _mm256_cvtepi32_ps(_mm256_madd_epi16(*p1, *p2));
-      d+= tmp.v;
-    }
-    return d[0] + d[1] + d[2] + d[3] + d[4] + d[5] + d[6] + d[7];
-  }
-
-  AVX2_IMPLEMENTATION
-  static size_t alloc_size(size_t n)
-  { return alloc_header + MY_ALIGN(n*2, AVX2_bytes) + AVX2_bytes - 1; }
-
-  AVX2_IMPLEMENTATION
-  static FVector *align_ptr(void *ptr)
-  { return (FVector*)(MY_ALIGN(((intptr)ptr) + alloc_header, AVX2_bytes)
-                      - alloc_header); }
-
-  AVX2_IMPLEMENTATION
-  void fix_tail(size_t vec_len)
-  {
-    bzero(dims + vec_len, (MY_ALIGN(vec_len, AVX2_dims) - vec_len)*2);
-  }
-#endif
-
-#ifdef AVX512_IMPLEMENTATION
-  /************* AVX512 ****************************************************/
-  static constexpr size_t AVX512_bytes= 512/8;
-  static constexpr size_t AVX512_dims= AVX512_bytes/sizeof(int16_t);
-
-  AVX512_IMPLEMENTATION
-  static float dot_product(const int16_t *v1, const int16_t *v2, size_t len)
-  {
-    __m512i *p1= (__m512i*)v1;
-    __m512i *p2= (__m512i*)v2;
-    __m512 d= _mm512_setzero_ps();
-    for (size_t i= 0; i < (len + AVX512_dims-1)/AVX512_dims; p1++, p2++, i++)
-      d= _mm512_add_ps(d, _mm512_cvtepi32_ps(_mm512_madd_epi16(*p1, *p2)));
-    return _mm512_reduce_add_ps(d);
-  }
-
-  AVX512_IMPLEMENTATION
-  static size_t alloc_size(size_t n)
-  { return alloc_header + MY_ALIGN(n*2, AVX512_bytes) + AVX512_bytes - 1; }
-
-  AVX512_IMPLEMENTATION
-  static FVector *align_ptr(void *ptr)
-  { return (FVector*)(MY_ALIGN(((intptr)ptr) + alloc_header, AVX512_bytes)
-                      - alloc_header); }
-
-  AVX512_IMPLEMENTATION
-  void fix_tail(size_t vec_len)
-  {
-    bzero(dims + vec_len, (MY_ALIGN(vec_len, AVX512_dims) - vec_len)*2);
-  }
-#endif
-
   /************* no-SIMD default ******************************************/
-  DEFAULT_IMPLEMENTATION
+ #ifdef DEFAULT_IMPLEMENTATION
   static float dot_product(const int16_t *v1, const int16_t *v2, size_t len)
   {
     int64_t d= 0;
@@ -198,15 +129,13 @@ struct FVector
     return static_cast<float>(d);
   }
 
-  DEFAULT_IMPLEMENTATION
   static size_t alloc_size(size_t n) { return alloc_header + n*2; }
 
-  DEFAULT_IMPLEMENTATION
   static FVector *align_ptr(void *ptr) { return (FVector*)ptr; }
 
-  DEFAULT_IMPLEMENTATION
   void fix_tail(size_t) {  }
-
+ #endif
+ 
   float distance_to(const FVector *other, size_t vec_len) const
   {
     return abs2 + other->abs2 - scale * other->scale *
-- 
2.45.2


From 0d419757657a13ade783223076e60d7d6987e1c3 Mon Sep 17 00:00:00 2001
From: DigitalBox98 <digitalbox098@gmail.com>
Date: Tue, 18 Feb 2025 18:57:18 +0000
Subject: fix


diff --git a/sql/vector_mhnsw.cc b/sql/vector_mhnsw.cc
index 0081b5d..2f67b4d 100644
--- a/sql/vector_mhnsw.cc
+++ b/sql/vector_mhnsw.cc
@@ -120,7 +120,7 @@ struct FVector
   }
 
   /************* no-SIMD default ******************************************/
- #ifdef DEFAULT_IMPLEMENTATION
+#ifdef DEFAULT_IMPLEMENTATION
   static float dot_product(const int16_t *v1, const int16_t *v2, size_t len)
   {
     int64_t d= 0;
@@ -134,8 +134,9 @@ struct FVector
   static FVector *align_ptr(void *ptr) { return (FVector*)ptr; }
 
   void fix_tail(size_t) {  }
- #endif
- 
+#endif 
+
+
   float distance_to(const FVector *other, size_t vec_len) const
   {
     return abs2 + other->abs2 - scale * other->scale *
-- 
2.45.2


From fbb56d530eb7d205b7fbf9e7b2ce96d5ed1e2f60 Mon Sep 17 00:00:00 2001
From: DigitalBox98 <digitalbox098@gmail.com>
Date: Tue, 18 Feb 2025 19:29:24 +0000
Subject: patch mysqld.cc


diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index 5cad7ac..04921a8 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -224,10 +224,6 @@ inline void setup_fpu()
 #endif /* FP_X_DNML */
 #endif /* __FreeBSD__ && HAVE_IEEEFP_H && !HAVE_FEDISABLEEXCEPT && FP_X_INV */
 
-#ifdef HAVE_FEDISABLEEXCEPT
-  fedisableexcept(FE_ALL_EXCEPT);
-#endif
-
 #ifdef HAVE_FESETROUND
     /* Set FPU rounding mode to "round-to-nearest" */
   fesetround(FE_TONEAREST);
-- 
2.45.2


From 8d9d2f0cbb842089b36b63a9772bb42ea6594951 Mon Sep 17 00:00:00 2001
From: DigitalBox98 <digitalbox098@gmail.com>
Date: Tue, 18 Feb 2025 19:55:21 +0000
Subject: Fix for bloom_filters.h


diff --git a/sql/bloom_filters.h b/sql/bloom_filters.h
index 315673d..ca5ca93 100644
--- a/sql/bloom_filters.h
+++ b/sql/bloom_filters.h
@@ -59,124 +59,6 @@ struct PatternedSimdBloomFilter
     return std::max<uint32_t>(512, static_cast<uint32_t>(bits_per_val * n + 0.5));
   }
 
-#ifdef AVX2_IMPLEMENTATION
-  AVX2_IMPLEMENTATION
-  __m256i CalcHash(__m256i vecData)
-  {
-    // (almost) xxHash parallel version, 64bit input, 64bit output, seed=0
-    static constexpr __m256i rotl48={
-      0x0504030201000706ULL, 0x0D0C0B0A09080F0EULL,
-      0x1514131211101716ULL, 0x1D1C1B1A19181F1EULL
-    };
-    static constexpr __m256i rotl24={
-      0x0201000706050403ULL, 0x0A09080F0E0D0C0BULL,
-      0x1211101716151413ULL, 0x1A19181F1E1D1C1BULL,
-    };
-    static constexpr uint64_t prime_mx2= 0x9FB21C651E98DF25ULL;
-    static constexpr uint64_t bitflip= 0xC73AB174C5ECD5A2ULL;
-    __m256i step1= _mm256_xor_si256(vecData, _mm256_set1_epi64x(bitflip));
-    __m256i step2= _mm256_shuffle_epi8(step1, rotl48);
-    __m256i step3= _mm256_shuffle_epi8(step1, rotl24);
-    __m256i step4= _mm256_xor_si256(step1, _mm256_xor_si256(step2, step3));
-    __m256i step5= _mm256_mul_epi32(step4, _mm256_set1_epi64x(prime_mx2));
-    __m256i step6= _mm256_srli_epi64(step5, 35);
-    __m256i step7= _mm256_add_epi64(step6, _mm256_set1_epi64x(8));
-    __m256i step8= _mm256_xor_si256(step5, step7);
-    __m256i step9= _mm256_mul_epi32(step8, _mm256_set1_epi64x(prime_mx2));
-    return _mm256_xor_si256(step9, _mm256_srli_epi64(step9, 28));
-  }
-
-  AVX2_IMPLEMENTATION
-  __m256i GetBlockIdx(__m256i vecHash)
-  {
-    __m256i vecNumBlocksMask = _mm256_set1_epi64x(num_blocks - 1);
-    __m256i vecBlockIdx = _mm256_srli_epi64(vecHash, mask_idx_bits + rotate_bits);
-    return _mm256_and_si256(vecBlockIdx, vecNumBlocksMask);
-  }
-
-  AVX2_IMPLEMENTATION
-  __m256i ConstructMask(__m256i vecHash)
-  {
-    __m256i vecMaskIdxMask = _mm256_set1_epi64x((1 << mask_idx_bits) - 1);
-    __m256i vecMaskMask = _mm256_set1_epi64x((1ull << bits_per_mask) - 1);
-    __m256i vec64 = _mm256_set1_epi64x(64);
-
-    __m256i vecMaskIdx = _mm256_and_si256(vecHash, vecMaskIdxMask);
-    __m256i vecMaskByteIdx = _mm256_srli_epi64(vecMaskIdx, 3);
-    __m256i vecMaskBitIdx = _mm256_and_si256(vecMaskIdx, _mm256_set1_epi64x(0x7));
-    __m256i vecRawMasks = _mm256_i64gather_epi64((const longlong *)masks, vecMaskByteIdx, 1);
-    __m256i vecUnrotated = _mm256_and_si256(_mm256_srlv_epi64(vecRawMasks, vecMaskBitIdx), vecMaskMask);
-
-    __m256i vecRotation = _mm256_and_si256(_mm256_srli_epi64(vecHash, mask_idx_bits), _mm256_set1_epi64x((1 << rotate_bits) - 1));
-    __m256i vecShiftUp = _mm256_sllv_epi64(vecUnrotated, vecRotation);
-    __m256i vecShiftDown = _mm256_srlv_epi64(vecUnrotated, _mm256_sub_epi64(vec64, vecRotation));
-    return _mm256_or_si256(vecShiftDown, vecShiftUp);
-  }
-
-  AVX2_IMPLEMENTATION
-  void Insert(const T **data)
-  {
-    __m256i vecDataA = _mm256_loadu_si256(reinterpret_cast<__m256i *>(data + 0));
-    __m256i vecDataB = _mm256_loadu_si256(reinterpret_cast<__m256i *>(data + 4));
-
-    __m256i vecHashA= CalcHash(vecDataA);
-    __m256i vecHashB= CalcHash(vecDataB);
-
-    __m256i vecMaskA = ConstructMask(vecHashA);
-    __m256i vecMaskB = ConstructMask(vecHashB);
-
-    __m256i vecBlockIdxA = GetBlockIdx(vecHashA);
-    __m256i vecBlockIdxB = GetBlockIdx(vecHashB);
-
-    uint64_t block0 = _mm256_extract_epi64(vecBlockIdxA, 0);
-    uint64_t block1 = _mm256_extract_epi64(vecBlockIdxA, 1);
-    uint64_t block2 = _mm256_extract_epi64(vecBlockIdxA, 2);
-    uint64_t block3 = _mm256_extract_epi64(vecBlockIdxA, 3);
-    uint64_t block4 = _mm256_extract_epi64(vecBlockIdxB, 0);
-    uint64_t block5 = _mm256_extract_epi64(vecBlockIdxB, 1);
-    uint64_t block6 = _mm256_extract_epi64(vecBlockIdxB, 2);
-    uint64_t block7 = _mm256_extract_epi64(vecBlockIdxB, 3);
-
-    bv[block0] |= _mm256_extract_epi64(vecMaskA, 0);
-    bv[block1] |= _mm256_extract_epi64(vecMaskA, 1);
-    bv[block2] |= _mm256_extract_epi64(vecMaskA, 2);
-    bv[block3] |= _mm256_extract_epi64(vecMaskA, 3);
-    bv[block4] |= _mm256_extract_epi64(vecMaskB, 0);
-    bv[block5] |= _mm256_extract_epi64(vecMaskB, 1);
-    bv[block6] |= _mm256_extract_epi64(vecMaskB, 2);
-    bv[block7] |= _mm256_extract_epi64(vecMaskB, 3);
-  }
-
-  AVX2_IMPLEMENTATION
-  uint8_t Query(T **data)
-  {
-    __m256i vecDataA = _mm256_loadu_si256(reinterpret_cast<__m256i *>(data + 0));
-    __m256i vecDataB = _mm256_loadu_si256(reinterpret_cast<__m256i *>(data + 4));
-
-    __m256i vecHashA= CalcHash(vecDataA);
-    __m256i vecHashB= CalcHash(vecDataB);
-
-    __m256i vecMaskA = ConstructMask(vecHashA);
-    __m256i vecMaskB = ConstructMask(vecHashB);
-
-    __m256i vecBlockIdxA = GetBlockIdx(vecHashA);
-    __m256i vecBlockIdxB = GetBlockIdx(vecHashB);
-
-    __m256i vecBloomA = _mm256_i64gather_epi64(bv.data(), vecBlockIdxA, sizeof(longlong));
-    __m256i vecBloomB = _mm256_i64gather_epi64(bv.data(), vecBlockIdxB, sizeof(longlong));
-    __m256i vecCmpA = _mm256_cmpeq_epi64(_mm256_and_si256(vecMaskA, vecBloomA), vecMaskA);
-    __m256i vecCmpB = _mm256_cmpeq_epi64(_mm256_and_si256(vecMaskB, vecBloomB), vecMaskB);
-    uint32_t res_a = static_cast<uint32_t>(_mm256_movemask_epi8(vecCmpA));
-    uint32_t res_b = static_cast<uint32_t>(_mm256_movemask_epi8(vecCmpB));
-    uint64_t res_bytes = res_a | (static_cast<uint64_t>(res_b) << 32);
-    uint8_t res_bits = static_cast<uint8_t>(_mm256_movemask_epi8(_mm256_set1_epi64x(res_bytes)) & 0xff);
-    return res_bits;
-  }
-
-  /* AVX-512 version can be (and was) implemented, but the speedup is,
-     basically, unnoticeable, well below the noise level */
-#endif
-
   /********************************************************
   ********* non-SIMD fallback version ********************/
 
@@ -216,7 +98,6 @@ struct PatternedSimdBloomFilter
                     : unrotated;
   }
 
-  DEFAULT_IMPLEMENTATION
   void Insert(const T **data)
   {
     for (size_t i = 0; i < 8; i++)
@@ -227,7 +108,6 @@ struct PatternedSimdBloomFilter
     }
   }
 
-  DEFAULT_IMPLEMENTATION
   uint8_t Query(T **data)
   {
     uint8_t res_bits = 0;
diff --git a/sql/vector_mhnsw.cc b/sql/vector_mhnsw.cc
index 2f67b4d..d32c3cb 100644
--- a/sql/vector_mhnsw.cc
+++ b/sql/vector_mhnsw.cc
@@ -120,7 +120,7 @@ struct FVector
   }
 
   /************* no-SIMD default ******************************************/
-#ifdef DEFAULT_IMPLEMENTATION
+ #ifdef DEFAULT_IMPLEMENTATION
   static float dot_product(const int16_t *v1, const int16_t *v2, size_t len)
   {
     int64_t d= 0;
@@ -134,7 +134,7 @@ struct FVector
   static FVector *align_ptr(void *ptr) { return (FVector*)ptr; }
 
   void fix_tail(size_t) {  }
-#endif 
+ #endif
 
 
   float distance_to(const FVector *other, size_t vec_len) const
-- 
2.45.2


From f90d32ff8a29578fadd1d412b1cd1bdbdf654b40 Mon Sep 17 00:00:00 2001
From: DigitalBox98 <digitalbox098@gmail.com>
Date: Tue, 18 Feb 2025 20:14:27 +0000
Subject: fix sql_plugin.cc


diff --git a/sql/sql_plugin.cc b/sql/sql_plugin.cc
index 0c297db..d439078 100644
--- a/sql/sql_plugin.cc
+++ b/sql/sql_plugin.cc
@@ -48,9 +48,14 @@ static PSI_memory_key key_memory_mysql_plugin;
 static PSI_memory_key key_memory_mysql_plugin_dl;
 static PSI_memory_key key_memory_plugin_bookmark;
 
-#ifdef HAVE_LINK_H
-#include <link.h>
-#endif
+//#ifdef HAVE_LINK_H
+//#include <link.h>
+//#endif
+
+struct link_map {
+    void *l_addr;   // Base address shared object is loaded at
+    char *l_name;   // Absolute file name object was found in
+};
 
 extern struct st_maria_plugin *mysql_optional_plugins[];
 extern struct st_maria_plugin *mysql_mandatory_plugins[];
-- 
2.45.2


From 6b43d25e976d2cba21808adb6c5297b3b3885bc0 Mon Sep 17 00:00:00 2001
From: DigitalBox98 <digitalbox098@gmail.com>
Date: Thu, 20 Feb 2025 23:33:06 +0000
Subject: Fix socket.cpp


diff --git a/plugin/handler_socket/libhsclient/socket.cpp b/plugin/handler_socket/libhsclient/socket.cpp
index f1cdc9f..e881d7b 100644
--- a/plugin/handler_socket/libhsclient/socket.cpp
+++ b/plugin/handler_socket/libhsclient/socket.cpp
@@ -174,7 +174,7 @@ socket_accept(int listen_fd, auto_file& fd, const socket_args& args,
   sockaddr_storage& addr_r, size_socket& addrlen_r, std::string& err_r)
 {
   fd.reset(accept(listen_fd, reinterpret_cast<sockaddr *>(&addr_r),
-    &addrlen_r));
+    (socklen_t*)&addrlen_r));
   if (fd.get() < 0) {
     return errno_string("accept", errno, err_r);
   }
-- 
2.45.2


From 0029a0d17b8ea5936f6ad0c615436768e86e2cf7 Mon Sep 17 00:00:00 2001
From: DigitalBox98 <digitalbox098@gmail.com>
Date: Thu, 20 Feb 2025 23:35:58 +0000
Subject: Fix my_global.h


diff --git a/include/my_global.h b/include/my_global.h
index b51d34b..e3397f2 100644
--- a/include/my_global.h
+++ b/include/my_global.h
@@ -915,10 +915,14 @@ typedef long		longlong;
 #endif
 #endif
 #ifndef HAVE_INT64
-typedef longlong int64;
+  #ifndef __haiku_int64
+    typedef longlong int64;
+  #endif
 #endif
 #ifndef HAVE_UINT64
-typedef ulonglong uint64;
+  #ifndef __haiku_uint64
+    typedef ulonglong uint64;
+  #endif
 #endif
 
 #if defined(NO_CLIENT_LONG_LONG)
-- 
2.45.2


From 8849b696dc0ebc07b9fe3b1d02200a824328513c Mon Sep 17 00:00:00 2001
From: Begasus <begasus@gmail.com>
Date: Thu, 20 Feb 2025 17:30:26 +0100
Subject: Fix install path


diff --git a/include/CMakeLists.txt b/include/CMakeLists.txt
index 5452b56..18574fc 100644
--- a/include/CMakeLists.txt
+++ b/include/CMakeLists.txt
@@ -104,7 +104,7 @@ IF(NOT ${CMAKE_CURRENT_BINARY_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
 ENDIF()
 
 MACRO(INSTALL_COMPAT_HEADER file footer)
-  INSTALL(CODE "FILE(WRITE \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${INSTALL_INCLUDEDIR}/${file}
+  INSTALL(CODE "FILE(WRITE \$ENV{DESTDIR}\/${INSTALL_INCLUDEDIR}/${file}
 \"/* Do not edit this file directly, it was auto-generated by cmake */
 
 #warning This file should not be included by clients, include only <mysql.h>
diff --git a/storage/mroonga/vendor/groonga/vendor/plugins/groonga-normalizer-mysql/CMakeLists.txt b/storage/mroonga/vendor/groonga/vendor/plugins/groonga-normalizer-mysql/CMakeLists.txt
index 96f9b3e..bf42ab9 100644
--- a/storage/mroonga/vendor/groonga/vendor/plugins/groonga-normalizer-mysql/CMakeLists.txt
+++ b/storage/mroonga/vendor/groonga/vendor/plugins/groonga-normalizer-mysql/CMakeLists.txt
@@ -78,4 +78,4 @@ endif()
 install(FILES
   "README.md"
   "doc/text/lgpl-2.0.txt"
-  DESTINATION "share/${GROONGA_NORMALIZER_MYSQL_PROJECT_NAME}")
+  DESTINATION "documentation/${GROONGA_NORMALIZER_MYSQL_PROJECT_NAME}")
-- 
2.45.2


From 0552732c00bc6cf145551e7abb1447d5470e60c6 Mon Sep 17 00:00:00 2001
From: Begasus <begasus@gmail.com>
Date: Sun, 23 Feb 2025 19:16:05 +0100
Subject: Add missing ctype.h


diff --git a/mysys/get_password.c b/mysys/get_password.c
index bf47491..ffa57f8 100644
--- a/mysys/get_password.c
+++ b/mysys/get_password.c
@@ -31,6 +31,7 @@
 #else /* ! HAVE_GETPASS */
 #ifndef _WIN32
 #include <sys/ioctl.h>
+#include <ctype.h>
 #ifdef HAVE_TERMIOS_H				/* For tty-password */
 #include	<termios.h>
 #define TERMIO	struct termios
-- 
2.45.2

