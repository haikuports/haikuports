From 8f2080ae310b4dc317f29bacf399a9d73476d9ee Mon Sep 17 00:00:00 2001
From: Ken Mays <kmays2000@gmail.com>
Date: Sat, 31 Oct 2020 06:48:13 +0000
Subject: Fix SFML Configs for Haiku


diff --git a/CMakeLists.txt b/CMakeLists.txt
index e821a49..39a3fc5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -140,6 +140,8 @@ endif()
 # For miscellaneous files
 if(SFML_OS_WINDOWS OR SFML_OS_IOS)
     set(DEFAULT_INSTALL_MISC_DIR .)
+elseif (SFML_OS_HAIKU)
+    set(DEFAULT_INSTALL_MISC_DIR data/SFML)
 elseif(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_OPENBSD)
     set(DEFAULT_INSTALL_MISC_DIR share/SFML)
 elseif(SFML_OS_MACOSX)
@@ -277,7 +279,7 @@ endif()
 # on Linux and BSD-like OS, install pkg-config files by default
 set(SFML_INSTALL_PKGCONFIG_DEFAULT FALSE)
 
-if(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_OPENBSD)
+if(SFML_OS_LINUX OR SFML_OS_HAIKU OR SFML_OS_FREEBSD OR SFML_OS_OPENBSD)
     set(SFML_INSTALL_PKGCONFIG_DEFAULT TRUE)
 endif()
 
diff --git a/include/SFML/Config.hpp b/include/SFML/Config.hpp
index 40b677e..77b142a 100644
--- a/include/SFML/Config.hpp
+++ b/include/SFML/Config.hpp
@@ -69,7 +69,7 @@
     #endif
 
 #elif defined(__unix__)
-
+   
     // UNIX system, see which one it is
     #if defined(__ANDROID__)
 
@@ -81,8 +81,13 @@
          // Linux
         #define SFML_SYSTEM_LINUX
 
-    #elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
+	#elif defined(__Haiku__) || defined(__HAIKU__)
+
+         // Haiku
+        #define SFML_SYSTEM_HAIKU
 
+    #elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
+  
         // FreeBSD
         #define SFML_SYSTEM_FREEBSD
 
@@ -97,11 +102,13 @@
         #error This UNIX operating system is not supported by SFML library
 
     #endif
+    
+#define SFML_SYSTEM_HAIKU
 
-#else
+// #else
 
     // Unsupported system
-    #error This operating system is not supported by SFML library
+//    #error This operating system is not supported by SFML library
 
 #endif
 
-- 
2.28.0


From 09ed9de4f504c3c55504c43edc1d2c5444b49999 Mon Sep 17 00:00:00 2001
From: Jacob Secunda <codeforevolution@haiku-os.org>
Date: Sat, 14 Nov 2020 06:48:13 +0000
Subject: Fix SFML for Haiku


diff --git a/cmake/Config.cmake b/cmake/Config.cmake
index 0a28660..dce817b 100644
--- a/cmake/Config.cmake
+++ b/cmake/Config.cmake
@@ -64,6 +64,11 @@ elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Android")
 # let's avoid it so the actual error is more visible
 elseif(${CYGWIN})
     message(FATAL_ERROR "Unfortunately SFML doesn't support Cygwin's 'hybrid' status between both Windows and Linux derivatives.\nIf you insist on using the GCC, please use a standalone build of MinGW without the Cygwin environment instead.")
+elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Haiku")
+    set(SFML_OS_HAIKU 1)
+
+    # don't use the OpenGL ES implementation on Haiku
+    set(OPENGL_ES 0)
 else()
     message(FATAL_ERROR "Unsupported operating system or environment")
     return()
@@ -71,7 +76,7 @@ endif()
 
 # set pkgconfig install directory
 # this could be e.g. macports on mac or msys2 on windows etc.
-set(SFML_PKGCONFIG_DIR "/lib${LIB_SUFFIX}/pkgconfig")
+set(SFML_PKGCONFIG_DIR "/${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 
 if(SFML_OS_FREEBSD OR SFML_OS_OPENBSD)
     set(SFML_PKGCONFIG_DIR "/libdata/pkgconfig")
diff --git a/include/SFML/Config.hpp b/include/SFML/Config.hpp
index 77b142a..57167e2 100644
--- a/include/SFML/Config.hpp
+++ b/include/SFML/Config.hpp
@@ -1,7 +1,7 @@
 ////////////////////////////////////////////////////////////
 //
 // SFML - Simple and Fast Multimedia Library
-// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
 //
 // This software is provided 'as-is', without any express or implied warranty.
 // In no event will the authors be held liable for any damages arising from the use of this software.
@@ -36,7 +36,7 @@
 
 ////////////////////////////////////////////////////////////
 // Identify the operating system
-// see http://nadeausoftware.com/articles/2012/01/c_c_tip_how_use_compiler_predefined_macros_detect_operating_system
+// see https://sourceforge.net/p/predef/wiki/Home/
 ////////////////////////////////////////////////////////////
 #if defined(_WIN32)
 
@@ -68,6 +68,11 @@
 
     #endif
 
+#elif defined(__HAIKU__)
+
+    // Haiku
+    #define SFML_SYSTEM_HAIKU
+
 #elif defined(__unix__)
    
     // UNIX system, see which one it is
diff --git a/include/SFML/OpenGL.hpp b/include/SFML/OpenGL.hpp
index 6db5d01..7072da3 100644
--- a/include/SFML/OpenGL.hpp
+++ b/include/SFML/OpenGL.hpp
@@ -1,7 +1,7 @@
 ////////////////////////////////////////////////////////////
 //
 // SFML - Simple and Fast Multimedia Library
-// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
 //
 // This software is provided 'as-is', without any express or implied warranty.
 // In no event will the authors be held liable for any damages arising from the use of this software.
@@ -45,7 +45,7 @@
 
     #include <GL/gl.h>
 
-#elif defined(SFML_SYSTEM_LINUX) || defined(SFML_SYSTEM_FREEBSD) || defined(SFML_SYSTEM_OPENBSD)
+#elif defined(SFML_SYSTEM_LINUX) || defined(SFML_SYSTEM_FREEBSD) || defined(SFML_SYSTEM_OPENBSD) || defined(SFML_SYSTEM_HAIKU)
 
     #if defined(SFML_OPENGL_ES)
         #include <GLES/gl.h>
@@ -67,7 +67,7 @@
 
     #include <GLES/gl.h>
     #include <GLES/glext.h>
-    
+
     // We're not using OpenGL ES 2+ yet, but we can use the sRGB extension
     #include <GLES2/gl2platform.h>
     #include <GLES2/gl2ext.h>
diff --git a/src/SFML/System/Clock.cpp b/src/SFML/System/Clock.cpp
index 9f09533..a943996 100644
--- a/src/SFML/System/Clock.cpp
+++ b/src/SFML/System/Clock.cpp
@@ -1,7 +1,7 @@
 ////////////////////////////////////////////////////////////
 //
 // SFML - Simple and Fast Multimedia Library
-// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
 //
 // This software is provided 'as-is', without any express or implied warranty.
 // In no event will the authors be held liable for any damages arising from the use of this software.
@@ -29,6 +29,8 @@
 
 #if defined(SFML_SYSTEM_WINDOWS)
     #include <SFML/System/Win32/ClockImpl.hpp>
+#elif defined(SFML_SYSTEM_HAIKU)
+    #include <SFML/System/Haiku/ClockImpl.hpp>
 #else
     #include <SFML/System/Unix/ClockImpl.hpp>
 #endif
diff --git a/src/SFML/System/Haiku/ClockImpl.cpp b/src/SFML/System/Haiku/ClockImpl.cpp
new file mode 100644
index 0000000..7cc5916
--- /dev/null
+++ b/src/SFML/System/Haiku/ClockImpl.cpp
@@ -0,0 +1,45 @@
+////////////////////////////////////////////////////////////
+//
+// SFML - Simple and Fast Multimedia Library
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
+//
+// This software is provided 'as-is', without any express or implied warranty.
+// In no event will the authors be held liable for any damages arising from the use of this software.
+//
+// Permission is granted to anyone to use this software for any purpose,
+// including commercial applications, and to alter it and redistribute it freely,
+// subject to the following restrictions:
+//
+// 1. The origin of this software must not be misrepresented;
+//    you must not claim that you wrote the original software.
+//    If you use this software in a product, an acknowledgment
+//    in the product documentation would be appreciated but is not required.
+//
+// 2. Altered source versions must be plainly marked as such,
+//    and must not be misrepresented as being the original software.
+//
+// 3. This notice may not be removed or altered from any source distribution.
+//
+////////////////////////////////////////////////////////////
+
+////////////////////////////////////////////////////////////
+// Headers
+////////////////////////////////////////////////////////////
+#include <SFML/System/Unix/ClockImpl.hpp>
+#include <kernel/OS.h>
+
+
+namespace sf
+{
+namespace priv
+{
+////////////////////////////////////////////////////////////
+Time ClockImpl::getCurrentTime()
+{
+    // Return the current time as microseconds
+    return sf::microseconds(system_time());
+}
+
+} // namespace priv
+
+} // namespace sf
diff --git a/src/SFML/System/Haiku/ClockImpl.hpp b/src/SFML/System/Haiku/ClockImpl.hpp
new file mode 100644
index 0000000..78b53eb
--- /dev/null
+++ b/src/SFML/System/Haiku/ClockImpl.hpp
@@ -0,0 +1,61 @@
+////////////////////////////////////////////////////////////
+//
+// SFML - Simple and Fast Multimedia Library
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
+//
+// This software is provided 'as-is', without any express or implied warranty.
+// In no event will the authors be held liable for any damages arising from the use of this software.
+//
+// Permission is granted to anyone to use this software for any purpose,
+// including commercial applications, and to alter it and redistribute it freely,
+// subject to the following restrictions:
+//
+// 1. The origin of this software must not be misrepresented;
+//    you must not claim that you wrote the original software.
+//    If you use this software in a product, an acknowledgment
+//    in the product documentation would be appreciated but is not required.
+//
+// 2. Altered source versions must be plainly marked as such,
+//    and must not be misrepresented as being the original software.
+//
+// 3. This notice may not be removed or altered from any source distribution.
+//
+////////////////////////////////////////////////////////////
+
+#ifndef SFML_CLOCKIMPL_HPP
+#define SFML_CLOCKIMPL_HPP
+
+////////////////////////////////////////////////////////////
+// Headers
+////////////////////////////////////////////////////////////
+#include <SFML/Config.hpp>
+#include <SFML/System/Time.hpp>
+
+
+namespace sf
+{
+namespace priv
+{
+////////////////////////////////////////////////////////////
+/// \brief Haiku implementation of sf::Clock
+///
+////////////////////////////////////////////////////////////
+class ClockImpl
+{
+public:
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Get the current time
+    ///
+    /// \return Current time
+    ///
+    ////////////////////////////////////////////////////////////
+    static Time getCurrentTime();
+};
+
+} // namespace priv
+
+} // namespace sf
+
+
+#endif // SFML_CLOCKIMPL_HPP
diff --git a/src/SFML/System/Haiku/MutexImpl.cpp b/src/SFML/System/Haiku/MutexImpl.cpp
new file mode 100644
index 0000000..050a112
--- /dev/null
+++ b/src/SFML/System/Haiku/MutexImpl.cpp
@@ -0,0 +1,64 @@
+////////////////////////////////////////////////////////////
+//
+// SFML - Simple and Fast Multimedia Library
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
+//
+// This software is provided 'as-is', without any express or implied warranty.
+// In no event will the authors be held liable for any damages arising from the use of this software.
+//
+// Permission is granted to anyone to use this software for any purpose,
+// including commercial applications, and to alter it and redistribute it freely,
+// subject to the following restrictions:
+//
+// 1. The origin of this software must not be misrepresented;
+//    you must not claim that you wrote the original software.
+//    If you use this software in a product, an acknowledgment
+//    in the product documentation would be appreciated but is not required.
+//
+// 2. Altered source versions must be plainly marked as such,
+//    and must not be misrepresented as being the original software.
+//
+// 3. This notice may not be removed or altered from any source distribution.
+//
+////////////////////////////////////////////////////////////
+
+////////////////////////////////////////////////////////////
+// Headers
+////////////////////////////////////////////////////////////
+#include <SFML/System/Haiku/MutexImpl.hpp>
+
+
+namespace sf
+{
+namespace priv
+{
+////////////////////////////////////////////////////////////
+MutexImpl::MutexImpl()
+{
+    recursive_lock_init(&m_mutex, "SFML mutex");
+}
+
+
+////////////////////////////////////////////////////////////
+MutexImpl::~MutexImpl()
+{
+    recursive_lock_destroy(&m_mutex);
+}
+
+
+////////////////////////////////////////////////////////////
+void MutexImpl::lock()
+{
+    recursive_lock_lock(&m_mutex);
+}
+
+
+////////////////////////////////////////////////////////////
+void MutexImpl::unlock()
+{
+    recursive_lock_unlock(&m_mutex);
+}
+
+} // namespace priv
+
+} // namespace sf
diff --git a/src/SFML/System/Haiku/MutexImpl.hpp b/src/SFML/System/Haiku/MutexImpl.hpp
new file mode 100644
index 0000000..92ab4cf
--- /dev/null
+++ b/src/SFML/System/Haiku/MutexImpl.hpp
@@ -0,0 +1,83 @@
+////////////////////////////////////////////////////////////
+//
+// SFML - Simple and Fast Multimedia Library
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
+//
+// This software is provided 'as-is', without any express or implied warranty.
+// In no event will the authors be held liable for any damages arising from the use of this software.
+//
+// Permission is granted to anyone to use this software for any purpose,
+// including commercial applications, and to alter it and redistribute it freely,
+// subject to the following restrictions:
+//
+// 1. The origin of this software must not be misrepresented;
+//    you must not claim that you wrote the original software.
+//    If you use this software in a product, an acknowledgment
+//    in the product documentation would be appreciated but is not required.
+//
+// 2. Altered source versions must be plainly marked as such,
+//    and must not be misrepresented as being the original software.
+//
+// 3. This notice may not be removed or altered from any source distribution.
+//
+////////////////////////////////////////////////////////////
+
+#ifndef SFML_MUTEXIMPL_HPP
+#define SFML_MUTEXIMPL_HPP
+
+////////////////////////////////////////////////////////////
+// Headers
+////////////////////////////////////////////////////////////
+#include <SFML/System/NonCopyable.hpp>
+#include <kernel/lock.h>
+
+
+namespace sf
+{
+namespace priv
+{
+////////////////////////////////////////////////////////////
+/// \brief Haiku implementation of mutexes
+////////////////////////////////////////////////////////////
+class MutexImpl : NonCopyable
+{
+public:
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Default constructor
+    ///
+    ////////////////////////////////////////////////////////////
+    MutexImpl();
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Destructor
+    ///
+    ////////////////////////////////////////////////////////////
+    ~MutexImpl();
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Lock the mutex
+    ///
+    ////////////////////////////////////////////////////////////
+    void lock();
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Unlock the mutex
+    ///
+    ////////////////////////////////////////////////////////////
+    void unlock();
+
+private:
+
+    ////////////////////////////////////////////////////////////
+    // Member data
+    ////////////////////////////////////////////////////////////
+    struct recursive_lock m_mutex; ///< Haiku recursive mutex "handle"
+};
+
+} // namespace priv
+
+} // namespace sf
+
+
+#endif // SFML_MUTEXIMPL_HPP
diff --git a/src/SFML/System/Haiku/SleepImpl.cpp b/src/SFML/System/Haiku/SleepImpl.cpp
new file mode 100644
index 0000000..fc3f656
--- /dev/null
+++ b/src/SFML/System/Haiku/SleepImpl.cpp
@@ -0,0 +1,53 @@
+////////////////////////////////////////////////////////////
+//
+// SFML - Simple and Fast Multimedia Library
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
+//
+// This software is provided 'as-is', without any express or implied warranty.
+// In no event will the authors be held liable for any damages arising from the use of this software.
+//
+// Permission is granted to anyone to use this software for any purpose,
+// including commercial applications, and to alter it and redistribute it freely,
+// subject to the following restrictions:
+//
+// 1. The origin of this software must not be misrepresented;
+//    you must not claim that you wrote the original software.
+//    If you use this software in a product, an acknowledgment
+//    in the product documentation would be appreciated but is not required.
+//
+// 2. Altered source versions must be plainly marked as such,
+//    and must not be misrepresented as being the original software.
+//
+// 3. This notice may not be removed or altered from any source distribution.
+//
+////////////////////////////////////////////////////////////
+
+////////////////////////////////////////////////////////////
+// Headers
+////////////////////////////////////////////////////////////
+#include <SFML/System/Haiku/SleepImpl.hpp>
+#include <kernel/OS.h>
+
+
+namespace sf
+{
+namespace priv
+{
+////////////////////////////////////////////////////////////
+void sleepImpl(Time time)
+{
+    // Let's calculate the end time! (There isn't much to it!)
+    Uint64 endTime = system_time() + time.asMicroseconds();
+
+    // Wait...
+    // If snooze_until returns B_INTERRUPTED, we continue sleeping
+    // until the complete duration has passed. We stop sleeping if it
+    // was due to an error.
+    while (snooze_until(endTime, B_SYSTEM_TIMEBASE) == B_INTERRUPTED)
+    {
+    }
+}
+
+} // namespace priv
+
+} // namespace sf
diff --git a/src/SFML/System/Haiku/SleepImpl.hpp b/src/SFML/System/Haiku/SleepImpl.hpp
new file mode 100644
index 0000000..91f883a
--- /dev/null
+++ b/src/SFML/System/Haiku/SleepImpl.hpp
@@ -0,0 +1,52 @@
+////////////////////////////////////////////////////////////
+//
+// SFML - Simple and Fast Multimedia Library
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
+//
+// This software is provided 'as-is', without any express or implied warranty.
+// In no event will the authors be held liable for any damages arising from the use of this software.
+//
+// Permission is granted to anyone to use this software for any purpose,
+// including commercial applications, and to alter it and redistribute it freely,
+// subject to the following restrictions:
+//
+// 1. The origin of this software must not be misrepresented;
+//    you must not claim that you wrote the original software.
+//    If you use this software in a product, an acknowledgment
+//    in the product documentation would be appreciated but is not required.
+//
+// 2. Altered source versions must be plainly marked as such,
+//    and must not be misrepresented as being the original software.
+//
+// 3. This notice may not be removed or altered from any source distribution.
+//
+////////////////////////////////////////////////////////////
+
+#ifndef SFML_SLEEPIMPL_HPP
+#define SFML_SLEEPIMPL_HPP
+
+////////////////////////////////////////////////////////////
+// Headers
+////////////////////////////////////////////////////////////
+#include <SFML/Config.hpp>
+#include <SFML/System/Time.hpp>
+
+
+namespace sf
+{
+namespace priv
+{
+////////////////////////////////////////////////////////////
+/// \brief Haiku implementation of sf::Sleep
+///
+/// \param time Time to sleep
+///
+////////////////////////////////////////////////////////////
+void sleepImpl(Time time);
+
+} // namespace priv
+
+} // namespace sf
+
+
+#endif // SFML_SLEEPIMPL_HPP
diff --git a/src/SFML/System/Haiku/ThreadImpl.cpp b/src/SFML/System/Haiku/ThreadImpl.cpp
new file mode 100644
index 0000000..890a549
--- /dev/null
+++ b/src/SFML/System/Haiku/ThreadImpl.cpp
@@ -0,0 +1,97 @@
+////////////////////////////////////////////////////////////
+//
+// SFML - Simple and Fast Multimedia Library
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
+//
+// This software is provided 'as-is', without any express or implied warranty.
+// In no event will the authors be held liable for any damages arising from the use of this software.
+//
+// Permission is granted to anyone to use this software for any purpose,
+// including commercial applications, and to alter it and redistribute it freely,
+// subject to the following restrictions:
+//
+// 1. The origin of this software must not be misrepresented;
+//    you must not claim that you wrote the original software.
+//    If you use this software in a product, an acknowledgment
+//    in the product documentation would be appreciated but is not required.
+//
+// 2. Altered source versions must be plainly marked as such,
+//    and must not be misrepresented as being the original software.
+//
+// 3. This notice may not be removed or altered from any source distribution.
+//
+////////////////////////////////////////////////////////////
+
+////////////////////////////////////////////////////////////
+// Headers
+////////////////////////////////////////////////////////////
+#include <SFML/System/Haiku/ThreadImpl.hpp>
+#include <SFML/System/Thread.hpp>
+
+
+namespace sf
+{
+namespace priv
+{
+////////////////////////////////////////////////////////////
+ThreadImpl::ThreadImpl(Thread* owner) :
+m_isActive(true)
+{
+    m_thread = spawn_thread(&ThreadImpl::entryPoint, "SFML thread", B_NORMAL_PRIORITY, owner);
+
+    if (m_thread < B_NO_ERROR) {
+        m_isActive = false;
+        std::cerr << "Failed to create thread" << std::endl;
+        return;
+    }
+
+    if (resume_thread(m_thread) == B_OK) {
+        m_isActive = true;
+    } else {
+        m_isActive = false;
+        std::cerr << "Failed to start thread" << std::endl;
+    }
+}
+
+
+////////////////////////////////////////////////////////////
+void ThreadImpl::wait()
+{
+    if (m_isActive)
+    {
+        // A thread cannot wait for itself!
+        assert(find_thread(NULL) != m_thread);
+
+        wait_for_thread(m_thread, NULL);
+    }
+}
+
+
+////////////////////////////////////////////////////////////
+void ThreadImpl::terminate()
+{
+    // Haiku has "pthread_cancel", though not an equivalent for its native
+    // threading API...huh...
+    if (m_isActive)
+    {
+        // Don't do this at home kids!
+        kill_thread(m_thread);
+    }
+}
+
+
+////////////////////////////////////////////////////////////
+status_t ThreadImpl::entryPoint(void* userData)
+{
+    // The Thread instance is stored in the user data
+    Thread* owner = static_cast<Thread*>(userData);
+
+    // Forward to the owner
+    owner->run();
+
+    return B_NO_ERROR;
+}
+
+} // namespace priv
+
+} // namespace sf
diff --git a/src/SFML/System/Haiku/ThreadImpl.hpp b/src/SFML/System/Haiku/ThreadImpl.hpp
new file mode 100644
index 0000000..5a4fa3e
--- /dev/null
+++ b/src/SFML/System/Haiku/ThreadImpl.hpp
@@ -0,0 +1,93 @@
+////////////////////////////////////////////////////////////
+//
+// SFML - Simple and Fast Multimedia Library
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
+//
+// This software is provided 'as-is', without any express or implied warranty.
+// In no event will the authors be held liable for any damages arising from the use of this software.
+//
+// Permission is granted to anyone to use this software for any purpose,
+// including commercial applications, and to alter it and redistribute it freely,
+// subject to the following restrictions:
+//
+// 1. The origin of this software must not be misrepresented;
+//    you must not claim that you wrote the original software.
+//    If you use this software in a product, an acknowledgment
+//    in the product documentation would be appreciated but is not required.
+//
+// 2. Altered source versions must be plainly marked as such,
+//    and must not be misrepresented as being the original software.
+//
+// 3. This notice may not be removed or altered from any source distribution.
+//
+////////////////////////////////////////////////////////////
+
+#ifndef SFML_THREADIMPL_HPP
+#define SFML_THREADIMPL_HPP
+
+////////////////////////////////////////////////////////////
+// Headers
+////////////////////////////////////////////////////////////
+#include <SFML/Config.hpp>
+#include <SFML/System/NonCopyable.hpp>
+#include <kernel/OS.h>
+
+
+namespace sf
+{
+class Thread;
+
+namespace priv
+{
+////////////////////////////////////////////////////////////
+/// \brief Haiku implementation of threads
+////////////////////////////////////////////////////////////
+class ThreadImpl : NonCopyable
+{
+public:
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Default constructor, launch the thread
+    ///
+    /// \param owner The Thread instance to run
+    ///
+    ////////////////////////////////////////////////////////////
+    ThreadImpl(Thread* owner);
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Wait until the thread finishes
+    ///
+    ////////////////////////////////////////////////////////////
+    void wait();
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Terminate the thread
+    ///
+    ////////////////////////////////////////////////////////////
+    void terminate();
+
+private:
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Global entry point for all threads
+    ///
+    /// \param userData User-defined data (contains the Thread instance)
+    ///
+    /// \return Os specific error code
+    ///
+    ////////////////////////////////////////////////////////////
+    static status_t entryPoint(void* userData);
+
+    ////////////////////////////////////////////////////////////
+    // Member data
+    ////////////////////////////////////////////////////////////
+    thread_id m_thread;   ///< Haiku thread instance
+    bool      m_isActive; ///< Thread state (active or inactive)
+};
+
+} // namespace priv
+
+} // namespace sf
+
+
+#endif // SFML_THREADIMPL_HPP
diff --git a/src/SFML/System/Haiku/ThreadLocalImpl.cpp b/src/SFML/System/Haiku/ThreadLocalImpl.cpp
new file mode 100644
index 0000000..78326bc
--- /dev/null
+++ b/src/SFML/System/Haiku/ThreadLocalImpl.cpp
@@ -0,0 +1,72 @@
+////////////////////////////////////////////////////////////
+//
+// SFML - Simple and Fast Multimedia Library
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
+//
+// This software is provided 'as-is', without any express or implied warranty.
+// In no event will the authors be held liable for any damages arising from the use of this software.
+//
+// Permission is granted to anyone to use this software for any purpose,
+// including commercial applications, and to alter it and redistribute it freely,
+// subject to the following restrictions:
+//
+// 1. The origin of this software must not be misrepresented;
+//    you must not claim that you wrote the original software.
+//    If you use this software in a product, an acknowledgment
+//    in the product documentation would be appreciated but is not required.
+//
+// 2. Altered source versions must be plainly marked as such,
+//    and must not be misrepresented as being the original software.
+//
+// 3. This notice may not be removed or altered from any source distribution.
+//
+////////////////////////////////////////////////////////////
+
+////////////////////////////////////////////////////////////
+// Headers
+////////////////////////////////////////////////////////////
+#include <SFML/System/Haiku/ThreadLocalImpl.hpp>
+
+
+namespace sf
+{
+namespace priv
+{
+////////////////////////////////////////////////////////////
+ThreadLocalImpl::ThreadLocalImpl() :
+m_slotIndex(-1)
+{
+    m_slotIndex = tls_allocate();
+
+    // Each process on Haiku can allocate a maximum of 64 TLS variables
+    if (m_slotIndex < 0)
+        m_slotIndex = B_NO_MEMORY;
+        std:cerr << "Couldn't allocate a tls slot, no more slots available" << std::endl;
+}
+
+
+////////////////////////////////////////////////////////////
+ThreadLocalImpl::~ThreadLocalImpl()
+{
+    // So, uh, there's no way to free a TLS slot in Haiku.
+    // Because of this, please, be careful when using the all powerful
+    // ThreadLocal object!
+}
+
+
+////////////////////////////////////////////////////////////
+void ThreadLocalImpl::setValue(void* value)
+{
+    tls_set(m_slotIndex, value);
+}
+
+
+////////////////////////////////////////////////////////////
+void* ThreadLocalImpl::getValue() const
+{
+    return tls_get(m_slotIndex);
+}
+
+} // namespace priv
+
+} // namespace sf
diff --git a/src/SFML/System/Haiku/ThreadLocalImpl.hpp b/src/SFML/System/Haiku/ThreadLocalImpl.hpp
new file mode 100644
index 0000000..8a31897
--- /dev/null
+++ b/src/SFML/System/Haiku/ThreadLocalImpl.hpp
@@ -0,0 +1,87 @@
+////////////////////////////////////////////////////////////
+//
+// SFML - Simple and Fast Multimedia Library
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
+//
+// This software is provided 'as-is', without any express or implied warranty.
+// In no event will the authors be held liable for any damages arising from the use of this software.
+//
+// Permission is granted to anyone to use this software for any purpose,
+// including commercial applications, and to alter it and redistribute it freely,
+// subject to the following restrictions:
+//
+// 1. The origin of this software must not be misrepresented;
+//    you must not claim that you wrote the original software.
+//    If you use this software in a product, an acknowledgment
+//    in the product documentation would be appreciated but is not required.
+//
+// 2. Altered source versions must be plainly marked as such,
+//    and must not be misrepresented as being the original software.
+//
+// 3. This notice may not be removed or altered from any source distribution.
+//
+////////////////////////////////////////////////////////////
+
+#ifndef SFML_THREADLOCALIMPL_HPP
+#define SFML_THREADLOCALIMPL_HPP
+
+////////////////////////////////////////////////////////////
+// Headers
+////////////////////////////////////////////////////////////
+#include <SFML/System/NonCopyable.hpp>
+#include <support/TLS.h>
+
+
+namespace sf
+{
+namespace priv
+{
+////////////////////////////////////////////////////////////
+/// \brief Haiku implementation of thread-local storage
+////////////////////////////////////////////////////////////
+class ThreadLocalImpl : NonCopyable
+{
+public:
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Default constructor -- allocate the storage
+    ///
+    ////////////////////////////////////////////////////////////
+    ThreadLocalImpl();
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Destructor -- Does nothing on Haiku
+    ///
+    ////////////////////////////////////////////////////////////
+    ~ThreadLocalImpl();
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Set the thread-specific value of the variable
+    ///
+    /// \param value Value of the variable for this thread
+    ///
+    ////////////////////////////////////////////////////////////
+    void setValue(void* value);
+
+    ////////////////////////////////////////////////////////////
+    /// \brief Retrieve the thread-specific value of the variable
+    ///
+    /// \return Value of the variable for this thread
+    ///
+    ////////////////////////////////////////////////////////////
+    void* getValue() const;
+
+private:
+
+    ////////////////////////////////////////////////////////////
+    // Member data
+    ////////////////////////////////////////////////////////////
+    int32 m_slotIndex; //!< Index of our thread-local storage slot
+};
+
+} // namespace priv
+
+} // namespace sf
+
+
+#endif // SFML_THREADLOCALIMPL_HPP
diff --git a/src/SFML/System/Sleep.cpp b/src/SFML/System/Sleep.cpp
index 35db5e8..905ad46 100644
--- a/src/SFML/System/Sleep.cpp
+++ b/src/SFML/System/Sleep.cpp
@@ -1,7 +1,7 @@
 ////////////////////////////////////////////////////////////
 //
 // SFML - Simple and Fast Multimedia Library
-// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
 //
 // This software is provided 'as-is', without any express or implied warranty.
 // In no event will the authors be held liable for any damages arising from the use of this software.
@@ -29,6 +29,8 @@
 
 #if defined(SFML_SYSTEM_WINDOWS)
     #include <SFML/System/Win32/SleepImpl.hpp>
+#elif defined(SFML_SYSTEM_HAIKU)
+    #include <SFML/System/Haiku/SleepImpl.hpp>
 #else
     #include <SFML/System/Unix/SleepImpl.hpp>
 #endif
diff --git a/src/SFML/System/Thread.cpp b/src/SFML/System/Thread.cpp
index 098018a..6a97826 100644
--- a/src/SFML/System/Thread.cpp
+++ b/src/SFML/System/Thread.cpp
@@ -1,7 +1,7 @@
 ////////////////////////////////////////////////////////////
 //
 // SFML - Simple and Fast Multimedia Library
-// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)
+// Copyright (C) 2007-2020 Laurent Gomila (laurent@sfml-dev.org)
 //
 // This software is provided 'as-is', without any express or implied warranty.
 // In no event will the authors be held liable for any damages arising from the use of this software.
@@ -30,6 +30,8 @@
 
 #if defined(SFML_SYSTEM_WINDOWS)
     #include <SFML/System/Win32/ThreadImpl.hpp>
+#elif defined(SFML_SYSTEM_HAIKU)
+    #include <SFML/System/Haiku/ThreadImpl.hpp>
 #else
     #include <SFML/System/Unix/ThreadImpl.hpp>
 #endif
-- 
2.28.0

