From dbe060fad2b764cbe49812864389fdbfb1323e9e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zolt=C3=A1n=20Mizsei?= <zmizsei@extrowerk.com>
Date: Sat, 11 Nov 2017 10:59:41 +0100
Subject: Embree: Haiku platform support


diff --git a/common/sys/alloc.cpp b/common/sys/alloc.cpp
index e24df4e..d51fd84 100644
--- a/common/sys/alloc.cpp
+++ b/common/sys/alloc.cpp
@@ -262,6 +262,8 @@ namespace embree
         hugepages = true;
         return ptr;
       }
+#elif defined(__HAIKU__)
+	hugepages = false;
 #else
       void* ptr = mmap(0, bytes, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON | MAP_HUGETLB, -1, 0);
       if (ptr != MAP_FAILED) {
diff --git a/common/sys/platform.h b/common/sys/platform.h
index 4f834ef..eea43f2 100644
--- a/common/sys/platform.h
+++ b/common/sys/platform.h
@@ -85,6 +85,13 @@
 #  endif
 #endif
 
+/* detect Haiku platform */
+#if defined(__HAIKU__)
+#  if !defined(__UNIX__)
+#     define __UNIX__
+#  endif
+#endif
+
 /* try to detect other Unix systems */
 #if defined(__unix__) || defined (unix) || defined(__unix) || defined(_unix)
 #  if !defined(__UNIX__)
diff --git a/common/sys/sysinfo.cpp b/common/sys/sysinfo.cpp
index 2a6dfed..9284cf6 100644
--- a/common/sys/sysinfo.cpp
+++ b/common/sys/sysinfo.cpp
@@ -49,6 +49,10 @@ namespace embree
     return "Mac OS X (32bit)";
 #elif defined(__MACOSX__) && defined(__X86_64__)
     return "Mac OS X (64bit)";
+#elif defined(__HAIKU__) && !defined(__X86_64__)
+    return "Haiku (32bit)";
+#elif defined(__HAIKU__) && defined(__X86_64__)
+    return "Haiku (64bit)";
 #elif defined(__UNIX__) && !defined(__X86_64__)
     return "Unix (32bit)";
 #elif defined(__UNIX__) && defined(__X86_64__)
@@ -406,7 +410,7 @@ namespace embree
 /// Linux Platform
 ////////////////////////////////////////////////////////////////////////////////
 
-#if defined(__LINUX__)
+#if defined(__LINUX__) || defined(__HAIKU__)
 
 #include <stdio.h>
 #include <unistd.h>
diff --git a/tutorials/common/math/sampling.h b/tutorials/common/math/sampling.h
index 46444f0..1bec7b3 100644
--- a/tutorials/common/math/sampling.h
+++ b/tutorials/common/math/sampling.h
@@ -26,6 +26,18 @@
 
 namespace embree {
 
+#ifdef __HAIKU__
+/* FIXME! */
+inline void sincosf (float x, float* sine, float* cosine)
+{
+	#if defined(__GNUC__) && defined(__linux__) && !defined(__clang__)
+		__builtin_sincosf(x, sine, cosine);
+	#else
+		*sine = std::sin(x);
+		*cosine = std::cos(x);
+	#endif
+}
+#endif
 
 inline Vec3fa cartesian(const float phi, const float sinTheta, const float cosTheta)
 {
-- 
2.19.1


From 3597bd1a386a817b7ddf7a3038c4e6523bc6132e Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 24 Nov 2018 17:07:38 +0100
Subject: fix for Haiku x86


diff --git a/common/math/math.h b/common/math/math.h
index bd66796..4bdfa05 100644
--- a/common/math/math.h
+++ b/common/math/math.h
@@ -176,7 +176,10 @@ namespace embree
   __forceinline  int64_t min(int64_t  a, int64_t  b) { return a<b ? a:b; }
   __forceinline    float min(float    a, float    b) { return a<b ? a:b; }
   __forceinline   double min(double   a, double   b) { return a<b ? a:b; }
-#if defined(__X86_64__)
+#if !defined(__X86_64__) && defined (__HAIKU__)
+  __forceinline  ssize_t min(ssize_t  a, ssize_t  b) { return a<b ? a:b; }
+#endif
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline   size_t min(size_t   a, size_t   b) { return a<b ? a:b; }
 #endif
 
@@ -193,7 +196,10 @@ namespace embree
   __forceinline  int64_t max(int64_t  a, int64_t  b) { return a<b ? b:a; }
   __forceinline    float max(float    a, float    b) { return a<b ? b:a; }
   __forceinline   double max(double   a, double   b) { return a<b ? b:a; }
-#if defined(__X86_64__)
+#if !defined(__X86_64__) && defined (__HAIKU__)
+  __forceinline  ssize_t max(ssize_t  a, ssize_t  b) { return a<b ? b:a; }
+#endif
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline   size_t max(size_t   a, size_t   b) { return a<b ? b:a; }
 #endif
 
diff --git a/common/sys/array.h b/common/sys/array.h
index db61047..efdfe36 100644
--- a/common/sys/array.h
+++ b/common/sys/array.h
@@ -152,7 +152,7 @@ namespace embree
     __forceinline       Ty& operator[](const unsigned i)       { assert(i<N); return data[i]; }
     __forceinline const Ty& operator[](const unsigned i) const { assert(i<N); return data[i]; }
 
-#if defined(__X86_64__)
+#if defined(__X86_64__) || defined(__HAIKU__)
     __forceinline       Ty& operator[](const size_t i)       { assert(i<N); return data[i]; }
     __forceinline const Ty& operator[](const size_t i) const { assert(i<N); return data[i]; }
 #endif
diff --git a/common/sys/intrinsics.h b/common/sys/intrinsics.h
index d59a16e..e486d2e 100644
--- a/common/sys/intrinsics.h
+++ b/common/sys/intrinsics.h
@@ -111,7 +111,7 @@ namespace embree
     return i;
   }
   
-#if defined(__X86_64__)
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline size_t __bscf(size_t& v) 
   {
     size_t i = __bsf(v);
@@ -240,7 +239,7 @@ namespace embree
 #endif
   }
   
-#if defined(__X86_64__)
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline unsigned __bsf(unsigned v) 
   {
 #if defined(__AVX2__) 
@@ -406,6 +405,12 @@ namespace embree
   __forceinline unsigned __popcnt(unsigned in) {
     return _mm_popcnt_u32(in);
   }
+
+#if !defined(__X86_64__) && defined(__HAIKU__)
+  __forceinline size_t __popcnt(size_t in) {
+    return _mm_popcnt_u32(in);
+  }
+#endif
   
 #if defined(__X86_64__)
   __forceinline size_t __popcnt(size_t in) {
diff --git a/kernels/builders/bvh_builder_sah.h b/kernels/builders/bvh_builder_sah.h
index 307d78c..34072f0 100644
--- a/kernels/builders/bvh_builder_sah.h
+++ b/kernels/builders/bvh_builder_sah.h
@@ -52,7 +52,7 @@ namespace embree
         {
           if (RTC_BUILD_SETTINGS_HAS(settings,maxBranchingFactor)) branchingFactor = settings.maxBranchingFactor;
           if (RTC_BUILD_SETTINGS_HAS(settings,maxDepth          )) maxDepth        = settings.maxDepth;
-          if (RTC_BUILD_SETTINGS_HAS(settings,sahBlockSize      )) logBlockSize    = __bsr(settings.sahBlockSize);
+          if (RTC_BUILD_SETTINGS_HAS(settings,sahBlockSize      )) logBlockSize    = __bsr((size_t)settings.sahBlockSize);
           if (RTC_BUILD_SETTINGS_HAS(settings,minLeafSize       )) minLeafSize     = settings.minLeafSize;
           if (RTC_BUILD_SETTINGS_HAS(settings,maxLeafSize       )) maxLeafSize     = settings.maxLeafSize;
           if (RTC_BUILD_SETTINGS_HAS(settings,travCost          )) travCost        = settings.travCost;
-- 
2.19.1

