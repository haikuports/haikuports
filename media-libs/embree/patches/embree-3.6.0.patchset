From f84bf30cb06b3fb70e374415377399f966d84d98 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zolt=C3=A1n=20Mizsei?= <zmizsei@extrowerk.com>
Date: Sat, 24 Aug 2019 09:32:55 +0200
Subject: Applied patches


diff --git a/common/math/math.h b/common/math/math.h
index caef5aa..2007bda 100644
--- a/common/math/math.h
+++ b/common/math/math.h
@@ -176,7 +176,10 @@ namespace embree
   __forceinline  int64_t min(int64_t  a, int64_t  b) { return a<b ? a:b; }
   __forceinline    float min(float    a, float    b) { return a<b ? a:b; }
   __forceinline   double min(double   a, double   b) { return a<b ? a:b; }
-#if defined(__X86_64__)
+#if !defined(__X86_64__) && defined (__HAIKU__)
+  __forceinline  ssize_t min(ssize_t  a, ssize_t  b) { return a<b ? a:b; }
+#endif
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline   size_t min(size_t   a, size_t   b) { return a<b ? a:b; }
 #endif
 
@@ -193,7 +196,10 @@ namespace embree
   __forceinline  int64_t max(int64_t  a, int64_t  b) { return a<b ? b:a; }
   __forceinline    float max(float    a, float    b) { return a<b ? b:a; }
   __forceinline   double max(double   a, double   b) { return a<b ? b:a; }
-#if defined(__X86_64__)
+#if !defined(__X86_64__) && defined (__HAIKU__)
+  __forceinline  ssize_t max(ssize_t  a, ssize_t  b) { return a<b ? b:a; }
+#endif
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline   size_t max(size_t   a, size_t   b) { return a<b ? b:a; }
 #endif
 
diff --git a/common/sys/alloc.cpp b/common/sys/alloc.cpp
index e24df4e..8f0453a 100644
--- a/common/sys/alloc.cpp
+++ b/common/sys/alloc.cpp
@@ -253,6 +253,7 @@ namespace embree
       return nullptr;
     }
 
+#ifndef __HAIKU__
     /* try direct huge page allocation first */
     if (isHugePageCandidate(bytes)) 
     {
@@ -270,6 +271,7 @@ namespace embree
       }
 #endif
     } 
+#endif
 
     /* fallback to 4k pages */
     void* ptr = (char*) mmap(0, bytes, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);
diff --git a/common/sys/array.h b/common/sys/array.h
index d64ebb1..a0b9a5c 100644
--- a/common/sys/array.h
+++ b/common/sys/array.h
@@ -152,7 +152,7 @@ namespace embree
     __forceinline       Ty& operator[](const unsigned i)       { assert(i<N); return data[i]; }
     __forceinline const Ty& operator[](const unsigned i) const { assert(i<N); return data[i]; }
 
-#if defined(__X86_64__)
+#if defined(__X86_64__) || defined(__HAIKU__)
     __forceinline       Ty& operator[](const size_t i)       { assert(i<N); return data[i]; }
     __forceinline const Ty& operator[](const size_t i) const { assert(i<N); return data[i]; }
 #endif
diff --git a/common/sys/intrinsics.h b/common/sys/intrinsics.h
index 5ec477c..8355bd8 100644
--- a/common/sys/intrinsics.h
+++ b/common/sys/intrinsics.h
@@ -87,7 +87,7 @@ namespace embree
 #endif
   }
   
-#if defined(__X86_64__)
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline size_t bsf(size_t v) {
 #if defined(__AVX2__) 
     return _tzcnt_u64(v);
@@ -111,7 +111,7 @@ namespace embree
     return i;
   }
   
-#if defined(__X86_64__)
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline size_t bscf(size_t& v) 
   {
     size_t i = bsf(v);
@@ -407,6 +407,12 @@ namespace embree
     return _mm_popcnt_u32(in);
   }
   
+#if !defined(__X86_64__) && defined(__HAIKU__)
+  __forceinline size_t __popcnt(size_t in) {
+    return _mm_popcnt_u32(in);
+  }
+#endif
+  
 #if defined(__X86_64__)
   __forceinline size_t popcnt(size_t in) {
     return _mm_popcnt_u64(in);
diff --git a/common/sys/platform.h b/common/sys/platform.h
index 477fa6f..c0778e8 100644
--- a/common/sys/platform.h
+++ b/common/sys/platform.h
@@ -86,7 +86,7 @@
 #endif
 
 /* try to detect other Unix systems */
-#if defined(__unix__) || defined (unix) || defined(__unix) || defined(_unix)
+#if defined(__unix__) || defined (unix) || defined(__unix) || defined(_unix) || defined(__HAIKU__)
 #  if !defined(__UNIX__)
 #     define __UNIX__
 #  endif
diff --git a/common/sys/sysinfo.cpp b/common/sys/sysinfo.cpp
index e5aa1d9..e070000 100644
--- a/common/sys/sysinfo.cpp
+++ b/common/sys/sysinfo.cpp
@@ -53,6 +53,10 @@ namespace embree
     return "Unix (32bit)";
 #elif defined(__UNIX__) && defined(__X86_64__)
     return "Unix (64bit)";
+#elif defined(__HAIKU__) && !defined(__X86_64__)
+    return "Haiku (32bit)";
+#elif defined(__HAIKU__) && defined(__X86_64__)
+    return "Haiku (64bit)";
 #else
     return "Unknown";
 #endif
@@ -435,7 +439,7 @@ namespace embree
 /// Linux Platform
 ////////////////////////////////////////////////////////////////////////////////
 
-#if defined(__LINUX__)
+#if defined(__LINUX__) || defined(__HAIKU__)
 
 #include <stdio.h>
 #include <unistd.h>
diff --git a/kernels/builders/bvh_builder_sah.h b/kernels/builders/bvh_builder_sah.h
index 6418a9b..5de64ff 100644
--- a/kernels/builders/bvh_builder_sah.h
+++ b/kernels/builders/bvh_builder_sah.h
@@ -55,7 +55,7 @@ namespace embree
         {
           if (RTC_BUILD_ARGUMENTS_HAS(settings,maxBranchingFactor)) branchingFactor = settings.maxBranchingFactor;
           if (RTC_BUILD_ARGUMENTS_HAS(settings,maxDepth          )) maxDepth        = settings.maxDepth;
-          if (RTC_BUILD_ARGUMENTS_HAS(settings,sahBlockSize      )) logBlockSize    = bsr(settings.sahBlockSize);
+          if (RTC_BUILD_ARGUMENTS_HAS(settings,sahBlockSize      )) logBlockSize    = bsr((size_t)settings.sahBlockSize);
           if (RTC_BUILD_ARGUMENTS_HAS(settings,minLeafSize       )) minLeafSize     = settings.minLeafSize;
           if (RTC_BUILD_ARGUMENTS_HAS(settings,maxLeafSize       )) maxLeafSize     = settings.maxLeafSize;
           if (RTC_BUILD_ARGUMENTS_HAS(settings,traversalCost     )) travCost        = settings.traversalCost;
-- 
2.23.0

