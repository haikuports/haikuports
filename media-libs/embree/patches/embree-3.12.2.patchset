From 4c5ad4e7ddc1a9c1ecf77f43efcf243bc63bed0b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zolt=C3=A1n=20Mizsei?= <zmizsei@extrowerk.com>
Date: Sat, 24 Aug 2019 09:32:55 +0200
Subject: Applied patches


diff --git a/common/math/math.h b/common/math/math.h
index 5af0691..eb7e522 100644
--- a/common/math/math.h
+++ b/common/math/math.h
@@ -166,7 +166,10 @@ namespace embree
   __forceinline  int64_t min(int64_t  a, int64_t  b) { return a<b ? a:b; }
   __forceinline    float min(float    a, float    b) { return a<b ? a:b; }
   __forceinline   double min(double   a, double   b) { return a<b ? a:b; }
-#if defined(__X86_64__)
+#if !defined(__X86_64__) && defined (__HAIKU__)
+  __forceinline  ssize_t min(ssize_t  a, ssize_t  b) { return a<b ? a:b; }
+#endif
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline   size_t min(size_t   a, size_t   b) { return a<b ? a:b; }
 #endif
 
@@ -183,7 +186,10 @@ namespace embree
   __forceinline  int64_t max(int64_t  a, int64_t  b) { return a<b ? b:a; }
   __forceinline    float max(float    a, float    b) { return a<b ? b:a; }
   __forceinline   double max(double   a, double   b) { return a<b ? b:a; }
-#if defined(__X86_64__)
+#if !defined(__X86_64__) && defined (__HAIKU__)
+  __forceinline  ssize_t max(ssize_t  a, ssize_t  b) { return a<b ? b:a; }
+#endif
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline   size_t max(size_t   a, size_t   b) { return a<b ? b:a; }
 #endif
 
diff --git a/common/sys/alloc.cpp b/common/sys/alloc.cpp
index 4e89282..bafa02f 100644
--- a/common/sys/alloc.cpp
+++ b/common/sys/alloc.cpp
@@ -240,6 +240,7 @@ namespace embree
       return nullptr;
     }
 
+#ifndef __HAIKU__
     /* try direct huge page allocation first */
     if (isHugePageCandidate(bytes)) 
     {
@@ -257,6 +258,7 @@ namespace embree
       }
 #endif
     } 
+#endif
 
     /* fallback to 4k pages */
     void* ptr = (char*) mmap(0, bytes, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);
diff --git a/common/sys/array.h b/common/sys/array.h
index 6f6f98e..53eca57 100644
--- a/common/sys/array.h
+++ b/common/sys/array.h
@@ -139,7 +139,7 @@ namespace embree
     __forceinline       Ty& operator[](const unsigned i)       { assert(i<N); return data[i]; }
     __forceinline const Ty& operator[](const unsigned i) const { assert(i<N); return data[i]; }
 
-#if defined(__X86_64__)
+#if defined(__X86_64__) || defined(__HAIKU__)
     __forceinline       Ty& operator[](const size_t i)       { assert(i<N); return data[i]; }
     __forceinline const Ty& operator[](const size_t i) const { assert(i<N); return data[i]; }
 #endif
diff --git a/common/sys/intrinsics.h b/common/sys/intrinsics.h
index 3f0619c..275dd21 100644
--- a/common/sys/intrinsics.h
+++ b/common/sys/intrinsics.h
@@ -74,7 +74,7 @@ namespace embree
 #endif
   }
   
-#if defined(__X86_64__)
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline size_t bsf(size_t v) {
 #if defined(__AVX2__) 
     return _tzcnt_u64(v);
@@ -98,7 +98,7 @@ namespace embree
     return i;
   }
   
-#if defined(__X86_64__)
+#if defined(__X86_64__) || defined (__HAIKU__)
   __forceinline size_t bscf(size_t& v) 
   {
     size_t i = bsf(v);
@@ -394,6 +394,12 @@ namespace embree
     return _mm_popcnt_u32(in);
   }
   
+#if !defined(__X86_64__) && defined(__HAIKU__)
+  __forceinline size_t __popcnt(size_t in) {
+    return _mm_popcnt_u32(in);
+  }
+#endif
+  
 #if defined(__X86_64__)
   __forceinline size_t popcnt(size_t in) {
     return _mm_popcnt_u64(in);
diff --git a/common/sys/platform.h b/common/sys/platform.h
index 96f9aab..8b9a988 100644
--- a/common/sys/platform.h
+++ b/common/sys/platform.h
@@ -73,7 +73,7 @@
 #endif
 
 /* try to detect other Unix systems */
-#if defined(__unix__) || defined (unix) || defined(__unix) || defined(_unix)
+#if defined(__unix__) || defined (unix) || defined(__unix) || defined(_unix) || defined(__HAIKU__)
 #  if !defined(__UNIX__)
 #     define __UNIX__
 #  endif
diff --git a/common/sys/sysinfo.cpp b/common/sys/sysinfo.cpp
index eb0a10e..13e58ce 100644
--- a/common/sys/sysinfo.cpp
+++ b/common/sys/sysinfo.cpp
@@ -45,6 +45,10 @@ namespace embree
     return "Unix (32bit)";
 #elif defined(__UNIX__) && defined(__X86_64__)
     return "Unix (64bit)";
+#elif defined(__HAIKU__) && !defined(__X86_64__)
+    return "Haiku (32bit)";
+#elif defined(__HAIKU__) && defined(__X86_64__)
+    return "Haiku (64bit)";
 #else
     return "Unknown";
 #endif
@@ -480,7 +484,7 @@ namespace embree
 /// Linux Platform
 ////////////////////////////////////////////////////////////////////////////////
 
-#if defined(__LINUX__)
+#if defined(__LINUX__) || defined(__HAIKU__)
 
 #include <stdio.h>
 #include <unistd.h>
diff --git a/kernels/builders/bvh_builder_sah.h b/kernels/builders/bvh_builder_sah.h
index 79ccdf9..6451594 100644
--- a/kernels/builders/bvh_builder_sah.h
+++ b/kernels/builders/bvh_builder_sah.h
@@ -43,7 +43,7 @@ namespace embree
         {
           if (RTC_BUILD_ARGUMENTS_HAS(settings,maxBranchingFactor)) branchingFactor = settings.maxBranchingFactor;
           if (RTC_BUILD_ARGUMENTS_HAS(settings,maxDepth          )) maxDepth        = settings.maxDepth;
-          if (RTC_BUILD_ARGUMENTS_HAS(settings,sahBlockSize      )) logBlockSize    = bsr(settings.sahBlockSize);
+          if (RTC_BUILD_ARGUMENTS_HAS(settings,sahBlockSize      )) logBlockSize    = bsr((size_t)settings.sahBlockSize);
           if (RTC_BUILD_ARGUMENTS_HAS(settings,minLeafSize       )) minLeafSize     = settings.minLeafSize;
           if (RTC_BUILD_ARGUMENTS_HAS(settings,maxLeafSize       )) maxLeafSize     = settings.maxLeafSize;
           if (RTC_BUILD_ARGUMENTS_HAS(settings,traversalCost     )) travCost        = settings.traversalCost;
-- 
2.28.0


From 94bf7fdde66dc3021eb01e8a5632de069226288d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zolt=C3=A1n=20Mizsei?= <zmizsei@extrowerk.com>
Date: Tue, 5 Jan 2021 20:45:01 +0100
Subject: CPU count


diff --git a/common/sys/sysinfo.cpp b/common/sys/sysinfo.cpp
index 13e58ce..272e00d 100644
--- a/common/sys/sysinfo.cpp
+++ b/common/sys/sysinfo.cpp
@@ -10,6 +10,9 @@
 #include <pthread_np.h>
 typedef cpuset_t cpu_set_t;
 #endif
+#if defined(__HAIKU__)
+#include <kernel/OS.h>
+#endif
 
 ////////////////////////////////////////////////////////////////////////////////
 /// All Platforms
@@ -603,6 +606,10 @@ namespace embree
 #if defined(__MACOSX__)
     nThreads = sysconf(_SC_NPROCESSORS_ONLN); // does not work in Linux LXC container
     assert(nThreads);
+#elif defined(__HAIKU__)
+    system_info info;
+    get_system_info( &info );
+    nThreads = info.cpu_count;
 #else
     cpu_set_t set;
     if (pthread_getaffinity_np(pthread_self(), sizeof(set), &set) == 0)
-- 
2.28.0

