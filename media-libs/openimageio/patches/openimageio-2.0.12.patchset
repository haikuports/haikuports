From 5a64a6b23447c2c548578e014cc126c5292eea7b Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sun, 7 Jun 2015 22:05:26 +0000
Subject: Haiku patch


diff --git a/src/cmake/compiler.cmake b/src/cmake/compiler.cmake
index fb0b43a..b7b840c 100644
--- a/src/cmake/compiler.cmake
+++ b/src/cmake/compiler.cmake
@@ -400,6 +400,9 @@ else ()
         add_definitions (-DBOOST_ALL_DYN_LINK)
         add_definitions (-DOPENEXR_DLL)
     endif ()
+    if (HAIKU)
+        set (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined")
+    endif ()
 endif ()
 
 if (DEFINED ENV{TRAVIS} OR DEFINED ENV{APPVEYOR} OR DEFINED ENV{CI})
diff --git a/src/libOpenImageIO/CMakeLists.txt b/src/libOpenImageIO/CMakeLists.txt
index e3e673a..bf167d8 100644
--- a/src/libOpenImageIO/CMakeLists.txt
+++ b/src/libOpenImageIO/CMakeLists.txt
@@ -164,6 +164,8 @@ if (MSVC)
     target_link_libraries (OpenImageIO psapi.lib)
 elseif(MINGW)
     target_link_libraries (OpenImageIO psapi ws2_32)
+elseif (HAIKU)
+    target_link_libraries (OpenImageIO network)
 endif ()
 
 if (VISIBILITY_MAP_FILE)
diff --git a/src/libutil/farmhash.cpp b/src/libutil/farmhash.cpp
index 9b50f14..af7bf4b 100644
--- a/src/libutil/farmhash.cpp
+++ b/src/libutil/farmhash.cpp
@@ -167,6 +167,13 @@
 #define bswap_64(x) bswap64(x)
 #endif
 
+#elif defined(__HAIKU__)
+
+#undef bswap_32
+#undef bswap_64
+#define bswap_32 __builtin_bswap32
+#define bswap_64 __builtin_bswap64
+
 #else
 
 #undef bswap_32
diff --git a/src/libutil/sysutil.cpp b/src/libutil/sysutil.cpp
index defbd78..b17f19c 100644
--- a/src/libutil/sysutil.cpp
+++ b/src/libutil/sysutil.cpp
@@ -80,6 +80,12 @@
 #    include <unistd.h>
 #endif
 
+#if defined (__HAIKU__)
+# include <sys/types.h>
+# include <sys/resource.h>
+# include <unistd.h>
+#endif
+
 #include <OpenImageIO/dassert.h>
 #include <OpenImageIO/strutil.h>
 #include <OpenImageIO/sysutil.h>
@@ -276,7 +282,7 @@ Sysutil::this_program_path()
     size_t cb = sizeof(filename);
     int r     = 1;
     sysctl(mib, 4, filename, &cb, NULL, 0);
-#elif defined(__GNU__) || defined(__OpenBSD__) || defined(_WIN32)
+#elif defined(__GNU__) || defined(__OpenBSD__) || defined(_WIN32) || defined(__HAIKU__)
     int r = 0;
 #else
     // No idea what platform this is
diff --git a/src/libutil/xxhash.cpp b/src/libutil/xxhash.cpp
index 46a8ce1..becaadd 100644
--- a/src/libutil/xxhash.cpp
+++ b/src/libutil/xxhash.cpp
@@ -126,8 +126,10 @@ typedef unsigned long long U64;
 #if defined(__GNUC__)  && !defined(XXH_USE_UNALIGNED_ACCESS)
 #  define _PACKED __attribute__ ((packed))
 #else
+#ifndef __HAIKU__
 #  define _PACKED
 #endif
+#endif
 
 #if !defined(XXH_USE_UNALIGNED_ACCESS) && !defined(__GNUC__)
 #  ifdef __IBMC__
diff --git a/src/make/detectplatform.mk b/src/make/detectplatform.mk
index dacdc2e..4918389 100644
--- a/src/make/detectplatform.mk
+++ b/src/make/detectplatform.mk
@@ -46,6 +46,14 @@ ifeq (${platform},unknown)
     endif
   endif
 
+  # Haiku
+  ifeq (${uname},haiku)
+    platform := haiku
+    ifeq (${hw},x86_64)
+      platform := haiku64
+    endif
+ endif
+
   # Windows
   ifeq (${uname},cygwin)
     platform := windows
-- 
2.21.0


From 4208089ae2fb0924fda1ec1d6f82510231f7a01b Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Wed, 6 Nov 2019 23:18:49 +0100
Subject: tiff uses uint32 instead of uint32_t


diff --git a/src/tiff.imageio/tiffinput.cpp b/src/tiff.imageio/tiffinput.cpp
index 416ebfa..205f6a4 100644
--- a/src/tiff.imageio/tiffinput.cpp
+++ b/src/tiff.imageio/tiffinput.cpp
@@ -34,6 +34,7 @@
 #include <cstdio>
 #include <cstdlib>
 
+
 #include <boost/thread/tss.hpp>
 
 #include <tiffio.h>
@@ -51,6 +52,10 @@
 
 #include "imageio_pvt.h"
 
+#if defined(__HAIKU__) && defined(__INTEL__)
+#define uint32_t        uint32
+#endif
+
 
 OIIO_PLUGIN_NAMESPACE_BEGIN
 
-- 
2.21.0


From adfc822a9a5053a8feeeea4457c1506c964ae419 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Thu, 7 Nov 2019 21:30:03 +0100
Subject: strutil: specify the global namespace for strtof and strtod calls.


diff --git a/src/libutil/strutil.cpp b/src/libutil/strutil.cpp
index cf7b9c6..2277a0d 100644
--- a/src/libutil/strutil.cpp
+++ b/src/libutil/strutil.cpp
@@ -1238,7 +1238,7 @@ Strutil::strtof(const char* nptr, char** endptr)
         = std::use_facet<std::numpunct<char>>(native).decimal_point();
     // If the native locale uses decimal, just directly use strtof.
     if (nativepoint == '.')
-        return strtof(nptr, endptr);
+        return ::strtof(nptr, endptr);
     // Complex case -- CHEAT by making a copy of the string and replacing
     // the decimal, then use system strtof!
     std::string s(nptr);
@@ -1251,7 +1251,7 @@ Strutil::strtof(const char* nptr, char** endptr)
         return d;
     }
     // No decimal point at all -- use regular strtof
-    return strtof(s.c_str(), endptr);
+    return ::strtof(s.c_str(), endptr);
 #endif
 }
 
@@ -1276,7 +1276,7 @@ Strutil::strtod(const char* nptr, char** endptr)
         = std::use_facet<std::numpunct<char>>(native).decimal_point();
     // If the native locale uses decimal, just directly use strtod.
     if (nativepoint == '.')
-        return strtod(nptr, endptr);
+        return ::strtod(nptr, endptr);
     // Complex case -- CHEAT by making a copy of the string and replacing
     // the decimal, then use system strtod!
     std::string s(nptr);
@@ -1289,7 +1289,7 @@ Strutil::strtod(const char* nptr, char** endptr)
         return d;
     }
     // No decimal point at all -- use regular strtod
-    return strtod(s.c_str(), endptr);
+    return ::strtod(s.c_str(), endptr);
 #endif
 }
 
-- 
2.21.0

