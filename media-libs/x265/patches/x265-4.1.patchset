From 18453a3d75505ef2b01760e1ff2df92584ffccba Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Fri, 25 Oct 2019 21:18:33 +0200
Subject: avoid using nice.


diff --git a/source/common/threadpool.cpp b/source/common/threadpool.cpp
index b3505e5..21a27c1 100644
--- a/source/common/threadpool.cpp
+++ b/source/common/threadpool.cpp
@@ -118,7 +118,9 @@ void WorkerThread::threadMain()
 #if _WIN32
     SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_BELOW_NORMAL);
 #else
+#ifndef __HAIKU__
     __attribute__((unused)) int val = nice(10);
+#endif
 #endif
 
     m_pool.setCurrentThreadAffinity();
-- 
2.50.1


From 69a93ecf402aa9eed0f8f6f526d9c8d0020db979 Mon Sep 17 00:00:00 2001
From: Elio Blanca <eblanca76@users.sourceforge.net>
Date: Mon, 28 Feb 2022 23:29:47 +0000
Subject: fix detection of cpu cores


diff --git a/source/common/threadpool.cpp b/source/common/threadpool.cpp
index 21a27c1..9ea4a5d 100644
--- a/source/common/threadpool.cpp
+++ b/source/common/threadpool.cpp
@@ -636,7 +636,7 @@ int ThreadPool::getCpuCount()
     /* Return the number of processors configured by OS. Because, most embedded linux distributions
      * uses only one processor as the scheduler doesn't have enough work to utilize all processors */
     return sysconf(_SC_NPROCESSORS_CONF);
-#elif __unix__
+#elif defined(__unix__) || defined(__HAIKU__)
     return sysconf(_SC_NPROCESSORS_ONLN);
 #elif MACOS && __MACH__
     int nm[2];
-- 
2.50.1


From e0de7beb902fbf3593693b33cd666d35e7f64965 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zolt=C3=A1n=20Mizsei?= <zmizsei@extrowerk.com>
Date: Tue, 15 Mar 2022 21:59:51 +0100
Subject: Add Haiku to the known OS list


diff --git a/source/common/version.cpp b/source/common/version.cpp
index 16a5467..be7e05e 100644
--- a/source/common/version.cpp
+++ b/source/common/version.cpp
@@ -67,6 +67,8 @@
 #define ONOS    "[Cygwin]"
 #elif __APPLE__
 #define ONOS    "[Mac OS X]"
+#elif __HAIKU__
+#define ONOS    "[HAIKU]"
 #else
 #define ONOS    "[Unk-OS]"
 #endif
-- 
2.50.1


From ad211049f84d79bae0bff5c11820d432d1e34c3d Mon Sep 17 00:00:00 2001
From: Ken Mays <kmays2000@gmail.com>
Date: Thu, 11 Sep 2025 02:34:11 +0400
Subject: Updated for CMake 4.x


diff --git a/source/CMakeLists.txt b/source/CMakeLists.txt
index 5c6dda9..9a1a2c0 100755
--- a/source/CMakeLists.txt
+++ b/source/CMakeLists.txt
@@ -6,18 +6,12 @@ if(NOT CMAKE_BUILD_TYPE)
         FORCE)
 endif()
 message(STATUS "cmake version ${CMAKE_VERSION}")
-if(POLICY CMP0025)
-    cmake_policy(SET CMP0025 OLD) # report Apple's Clang as just Clang
-endif()
 if(POLICY CMP0042)
     cmake_policy(SET CMP0042 NEW) # MACOSX_RPATH
 endif()
-if(POLICY CMP0054)
-    cmake_policy(SET CMP0054 OLD) # Only interpret if() arguments as variables or keywords when unquoted
-endif()
 
 project (x265)
-cmake_minimum_required (VERSION 2.8.8) # OBJECT libraries require 2.8.8
+cmake_minimum_required (VERSION 2.8.8...4.1) # OBJECT libraries require 2.8.8
 include(CheckIncludeFiles)
 include(CheckFunctionExists)
 include(CheckSymbolExists)
diff --git a/source/dynamicHDR10/CMakeLists.txt b/source/dynamicHDR10/CMakeLists.txt
index 22fb79d..801bd88 100644
--- a/source/dynamicHDR10/CMakeLists.txt
+++ b/source/dynamicHDR10/CMakeLists.txt
@@ -10,7 +10,7 @@ add_library(dynamicHDR10 OBJECT
     hdr10plus.h
     api.cpp )
 
-cmake_minimum_required (VERSION 2.8.11)
+cmake_minimum_required (VERSION 2.8.11...4.1)
 project(dynamicHDR10)
 include(CheckIncludeFiles)
 include(CheckFunctionExists)
@@ -150,4 +150,4 @@ set(BIN_INSTALL_DIR bin CACHE STRING "Install location of executables")
 option(ENABLE_SHARED "Build shared library" OFF)
 
 install(FILES hdr10plus.h DESTINATION include)
-endif()
\ No newline at end of file
+endif()
-- 
2.50.1

