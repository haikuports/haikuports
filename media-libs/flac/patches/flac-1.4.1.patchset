From c3238b4cd6aac6442534ba2f219312d9c45d5db9 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 26 Aug 2017 11:50:31 +0200
Subject: gcc2 fixes


diff --git a/include/FLAC++/decoder.h b/include/FLAC++/decoder.h
index fee6a3b..c1fbb13 100644
--- a/include/FLAC++/decoder.h
+++ b/include/FLAC++/decoder.h
@@ -225,11 +225,15 @@ namespace FLAC {
 			File();
 			virtual ~File();
 
+#if __GNUC__ > 2
 			using Stream::init;
+#endif
 			virtual ::FLAC__StreamDecoderInitStatus init(FILE *file);                      ///< See FLAC__stream_decoder_init_FILE()
 			virtual ::FLAC__StreamDecoderInitStatus init(const char *filename);            ///< See FLAC__stream_decoder_init_file()
 			virtual ::FLAC__StreamDecoderInitStatus init(const std::string &filename);     ///< See FLAC__stream_decoder_init_file()
+#if __GNUC__ > 2
 			using Stream::init_ogg;
+#endif
 			virtual ::FLAC__StreamDecoderInitStatus init_ogg(FILE *file);                  ///< See FLAC__stream_decoder_init_ogg_FILE()
 			virtual ::FLAC__StreamDecoderInitStatus init_ogg(const char *filename);        ///< See FLAC__stream_decoder_init_ogg_file()
 			virtual ::FLAC__StreamDecoderInitStatus init_ogg(const std::string &filename); ///< See FLAC__stream_decoder_init_ogg_file()
diff --git a/include/FLAC++/encoder.h b/include/FLAC++/encoder.h
index acd5230..8ec88b5 100644
--- a/include/FLAC++/encoder.h
+++ b/include/FLAC++/encoder.h
@@ -237,11 +237,15 @@ namespace FLAC {
 			File();
 			virtual ~File();
 
+#if __GNUC__ > 2
 			using Stream::init;
+#endif
 			virtual ::FLAC__StreamEncoderInitStatus init(FILE *file);                      ///< See FLAC__stream_encoder_init_FILE()
 			virtual ::FLAC__StreamEncoderInitStatus init(const char *filename);            ///< See FLAC__stream_encoder_init_file()
 			virtual ::FLAC__StreamEncoderInitStatus init(const std::string &filename);     ///< See FLAC__stream_encoder_init_file()
+#if __GNUC__ > 2
 			using Stream::init_ogg;
+#endif
 			virtual ::FLAC__StreamEncoderInitStatus init_ogg(FILE *file);                  ///< See FLAC__stream_encoder_init_ogg_FILE()
 			virtual ::FLAC__StreamEncoderInitStatus init_ogg(const char *filename);        ///< See FLAC__stream_encoder_init_ogg_file()
 			virtual ::FLAC__StreamEncoderInitStatus init_ogg(const std::string &filename); ///< See FLAC__stream_encoder_init_ogg_file()
diff --git a/src/libFLAC++/metadata.cpp b/src/libFLAC++/metadata.cpp
index c6dd937..a5af90e 100644
--- a/src/libFLAC++/metadata.cpp
+++ b/src/libFLAC++/metadata.cpp
@@ -827,7 +827,7 @@ namespace FLAC {
 			clear_field_name();
 			clear_field_value();
 
-			const char *p = static_cast<const char *>(std::memchr(entry_.entry, '=', entry_.length));
+			const char *p = (const char *)(std::memchr(entry_.entry, '=', entry_.length));
 
 			if(0 == p)
 				p = reinterpret_cast<const char *>(entry_.entry) + entry_.length;
-- 
2.37.3


From c32963d51b87ec4cbd2e17c5ca93eb5040973862 Mon Sep 17 00:00:00 2001
From: Robert Kausch <robert.kausch@freac.org>
Date: Wed, 12 Oct 2022 15:07:52 +0000
Subject: gcc2 fixes


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8ec6e26..64c7b02 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -83,11 +83,11 @@ if(NOT WIN32)
 endif()
 
 if(CMAKE_C_COMPILER_ID MATCHES "GNU|Clang")
-    set(CMAKE_C_FLAGS "-Wall -Wextra -Wstrict-prototypes -Wmissing-prototypes -Waggregate-return -Wcast-align -Wnested-externs -Wshadow -Wundef -Wmissing-declarations -Winline ${CMAKE_C_FLAGS}")
+    set(CMAKE_C_FLAGS "-Wall -Wstrict-prototypes -Wmissing-prototypes -Waggregate-return -Wcast-align -Wnested-externs -Wshadow -Wundef -Wmissing-declarations -Winline ${CMAKE_C_FLAGS}")
     set(CMAKE_C_FLAGS_RELEASE "-DNDEBUG ${CMAKE_C_FLAGS_RELEASE}")
 endif()
 if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
-    set(CMAKE_CXX_FLAGS "-Wall -Wextra -Wcast-align -Wshadow -Wwrite-strings -Wctor-dtor-privacy -Wnon-virtual-dtor -Wreorder -Wsign-promo -Wundef ${CMAKE_CXX_FLAGS}")
+    set(CMAKE_CXX_FLAGS "-Wall -Wcast-align -Wshadow -Wwrite-strings -Wctor-dtor-privacy -Wnon-virtual-dtor -Wreorder -Wsign-promo -Wundef ${CMAKE_CXX_FLAGS}")
     set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG ${CMAKE_CXX_FLAGS_RELEASE}")
 endif()
 if(MSVC)
-- 
2.37.3


From 5b42b5b09b144588b8f6fb14e7ff266464ea3244 Mon Sep 17 00:00:00 2001
From: Robert Kausch <robert.kausch@freac.org>
Date: Wed, 12 Oct 2022 22:41:24 +0000
Subject: more gcc 2.95 fixes: move declarations to beginning of blocks


diff --git a/src/flac/decode.c b/src/flac/decode.c
index 1acc66a..56d35d6 100644
--- a/src/flac/decode.c
+++ b/src/flac/decode.c
@@ -334,11 +334,12 @@ FLAC__bool DecoderSession_init_decoder(DecoderSession *decoder_session, const ch
 	if (decoder_session->replaygain.spec.apply || !decoder_session->channel_map_none)
 		FLAC__stream_decoder_set_metadata_respond(decoder_session->decoder, FLAC__METADATA_TYPE_VORBIS_COMMENT);
 
-	if(!decoder_session->analysis_mode && !decoder_session->test_only && decoder_session->foreign_metadata == NULL)
+	if(!decoder_session->analysis_mode && !decoder_session->test_only && decoder_session->foreign_metadata == NULL) {
+		uint32_t i;
 		/* Warn user if foreign metadata is found */
-		for(uint32_t i = 0; i < FLAC__FOREIGN_METADATA_NUMBER_OF_RECOGNIZED_APPLICATION_IDS; i++)
+		for(i = 0; i < FLAC__FOREIGN_METADATA_NUMBER_OF_RECOGNIZED_APPLICATION_IDS; i++)
 			FLAC__stream_decoder_set_metadata_respond_application(decoder_session->decoder, (FLAC__byte *)FLAC__FOREIGN_METADATA_APPLICATION_ID[i]);
-
+	}
 
 #if FLAC__HAS_OGG
 	if(decoder_session->is_ogg) {
diff --git a/src/flac/foreign_metadata.c b/src/flac/foreign_metadata.c
index c86dff4..dbc9c84 100644
--- a/src/flac/foreign_metadata.c
+++ b/src/flac/foreign_metadata.c
@@ -486,10 +486,11 @@ static FLAC__bool read_from_flac_(foreign_metadata_t *fm, FILE *f, FLAC__Metadat
 			return false;
 		}
 		if(memcmp(id, FLAC__FOREIGN_METADATA_APPLICATION_ID[fm->type], sizeof(id))) {
+			uint32_t i;
 			/* The found application metadata block is not of the right type, check
 			 * whether it is of another recognized type so we can tell the user it
 			 * is decoding to the wrong file format */
-			for(uint32_t i = 0; i < FLAC__FOREIGN_METADATA_NUMBER_OF_RECOGNIZED_APPLICATION_IDS; i++)
+			for(i = 0; i < FLAC__FOREIGN_METADATA_NUMBER_OF_RECOGNIZED_APPLICATION_IDS; i++)
 				if(memcmp(id, FLAC__FOREIGN_METADATA_APPLICATION_ID[i], sizeof(id)) == 0) {
 					foreign_metadata_found = true;
 					foreign_metadata_found_type = i;
diff --git a/src/libFLAC/fixed.c b/src/libFLAC/fixed.c
index 7d826f1..c4a2a41 100644
--- a/src/libFLAC/fixed.c
+++ b/src/libFLAC/fixed.c
@@ -226,6 +226,7 @@ uint32_t FLAC__fixed_compute_best_predictor(const FLAC__int32 data[], uint32_t d
 {
 	FLAC__uint32 total_error_0 = 0, total_error_1 = 0, total_error_2 = 0, total_error_3 = 0, total_error_4 = 0;
 	uint32_t order;
+	int i;
 #if 0
 	/* This code has been around a long time, and was written when compilers weren't able
 	 * to vectorize code. These days, compilers are better in optimizing the next block
@@ -248,7 +249,7 @@ uint32_t FLAC__fixed_compute_best_predictor(const FLAC__int32 data[], uint32_t d
 		error -= last_error_3; total_error_4 += local_abs(error); last_error_3 = save;
 	}
 #else
-	for(int i = 0; i < (int)data_len; i++) {
+	for(i = 0; i < (int)data_len; i++) {
 		total_error_0 += local_abs(data[i]);
 		total_error_1 += local_abs(data[i] - data[i-1]);
 		total_error_2 += local_abs(data[i] - 2 * data[i-1] + data[i-2]);
@@ -303,8 +304,9 @@ uint32_t FLAC__fixed_compute_best_predictor_wide(const FLAC__int32 data[], uint3
 {
 	FLAC__uint64 total_error_0 = 0, total_error_1 = 0, total_error_2 = 0, total_error_3 = 0, total_error_4 = 0;
 	uint32_t order;
+	int i;
 
-	for(int i = 0; i < (int)data_len; i++) {
+	for(i = 0; i < (int)data_len; i++) {
 		total_error_0 += local_abs(data[i]);
 		total_error_1 += local_abs(data[i] - data[i-1]);
 		total_error_2 += local_abs(data[i] - 2 * data[i-1] + data[i-2]);
@@ -380,8 +382,9 @@ uint32_t FLAC__fixed_compute_best_predictor_limit_residual(const FLAC__int32 dat
 	FLAC__uint64 error_0, error_1, error_2, error_3, error_4;
 	FLAC__bool order_0_is_valid = true, order_1_is_valid = true, order_2_is_valid = true, order_3_is_valid = true, order_4_is_valid = true;
 	uint32_t order = 0;
+	int i;
 
-	for(int i = 0; i < (int)data_len; i++) {
+	for(i = 0; i < (int)data_len; i++) {
 		error_0 = local_abs64((FLAC__int64)data[i]);
 		error_1 = (i > 0) ? local_abs64((FLAC__int64)data[i] - data[i-1]) : 0 ;
 		error_2 = (i > 1) ? local_abs64((FLAC__int64)data[i] - 2 * (FLAC__int64)data[i-1] + data[i-2]) : 0;
@@ -426,8 +429,9 @@ uint32_t FLAC__fixed_compute_best_predictor_limit_residual_33bit(const FLAC__int
 	FLAC__uint64 error_0, error_1, error_2, error_3, error_4;
 	FLAC__bool order_0_is_valid = true, order_1_is_valid = true, order_2_is_valid = true, order_3_is_valid = true, order_4_is_valid = true;
 	uint32_t order = 0;
+	int i;
 
-	for(int i = 0; i < (int)data_len; i++) {
+	for(i = 0; i < (int)data_len; i++) {
 		error_0 = local_abs64(data[i]);
 		error_1 = (i > 0) ? local_abs64(data[i] - data[i-1]) : 0 ;
 		error_2 = (i > 1) ? local_abs64(data[i] - 2 * data[i-1] + data[i-2]) : 0;
diff --git a/src/libFLAC/lpc.c b/src/libFLAC/lpc.c
index a090a87..a8a0e46 100644
--- a/src/libFLAC/lpc.c
+++ b/src/libFLAC/lpc.c
@@ -929,7 +929,8 @@ uint32_t FLAC__lpc_max_prediction_before_shift_bps(uint32_t subframe_bps, const
 	 * predictor is known however, so taking the log2 of the sum of the absolute values
 	 * of all coefficients is a more accurate representation of the predictor */
 	FLAC__int32 abs_sum_of_qlp_coeff = 0;
-	for(uint32_t i = 0; i < order; i++)
+	uint32_t i;
+	for(i = 0; i < order; i++)
 		abs_sum_of_qlp_coeff += abs(qlp_coeff[i]);
 	if(abs_sum_of_qlp_coeff == 0)
 		abs_sum_of_qlp_coeff = 1;
diff --git a/src/libFLAC/metadata_object.c b/src/libFLAC/metadata_object.c
index c1e54ab..3f56b0e 100644
--- a/src/libFLAC/metadata_object.c
+++ b/src/libFLAC/metadata_object.c
@@ -1179,9 +1179,10 @@ FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_resize_comments(FLAC__St
 		if (new_num_comments == 0)
 			return true;
 		else {
+			uint32_t i;
 			if ((object->data.vorbis_comment.comments = vorbiscomment_entry_array_new_(new_num_comments)) == NULL)
 				return false;
-			for (uint32_t i = 0; i < new_num_comments; i++) {
+			for (i = 0; i < new_num_comments; i++) {
 				object->data.vorbis_comment.comments[i].length = 0;
 				if ((object->data.vorbis_comment.comments[i].entry = safe_malloc_(1)) == NULL) {
 					object->data.vorbis_comment.num_comments = i+1;
@@ -1223,7 +1224,8 @@ FLAC_API FLAC__bool FLAC__metadata_object_vorbiscomment_resize_comments(FLAC__St
 
 		/* if growing, zero all the length/pointers of new elements */
 		if (new_size > old_size) {
-			for (uint32_t i = object->data.vorbis_comment.num_comments; i < new_num_comments; i++) {
+			uint32_t i;
+			for (i = object->data.vorbis_comment.num_comments; i < new_num_comments; i++) {
 				object->data.vorbis_comment.comments[i].length = 0;
 				if ((object->data.vorbis_comment.comments[i].entry = safe_malloc_(1)) == NULL) {
 					object->data.vorbis_comment.num_comments = i+1;
diff --git a/src/libFLAC/stream_decoder.c b/src/libFLAC/stream_decoder.c
index 73cb0ae..58e9e41 100644
--- a/src/libFLAC/stream_decoder.c
+++ b/src/libFLAC/stream_decoder.c
@@ -2746,7 +2746,8 @@ FLAC__bool read_subframe_fixed_(FLAC__StreamDecoder *decoder, uint32_t channel,
 	/* decode the subframe */
 	if(do_full_decode) {
 		if(bps < 33){
-			for(uint32_t i = 0; i < order; i++)
+			uint32_t i;
+			for(i = 0; i < order; i++)
 				decoder->private_->output[channel][i] = subframe->warmup[i];
 			if(bps+order <= 32)
 				FLAC__fixed_restore_signal(decoder->private_->residual[channel], decoder->private_->frame.header.blocksize-order, order, decoder->private_->output[channel]+order);
@@ -2848,7 +2849,8 @@ FLAC__bool read_subframe_lpc_(FLAC__StreamDecoder *decoder, uint32_t channel, ui
 	/* decode the subframe */
 	if(do_full_decode) {
 		if(bps <= 32) {
-			for(uint32_t i = 0; i < order; i++)
+			uint32_t i;
+			for(i = 0; i < order; i++)
 				decoder->private_->output[channel][i] = subframe->warmup[i];
 			if(FLAC__lpc_max_residual_bps(bps, subframe->qlp_coeff, order, subframe->quantization_level) <= 32 &&
 			   FLAC__lpc_max_prediction_before_shift_bps(bps, subframe->qlp_coeff, order) <= 32)
@@ -3071,6 +3073,7 @@ FLAC__bool read_callback_(FLAC__byte buffer[], size_t *bytes, void *client_data)
 __attribute__((no_sanitize("signed-integer-overflow")))
 #endif
 void undo_channel_coding(FLAC__StreamDecoder *decoder) {
+	uint32_t i;
 	switch(decoder->private_->frame.header.channel_assignment) {
 	case FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT:
 		/* do nothing */
@@ -3078,7 +3081,7 @@ void undo_channel_coding(FLAC__StreamDecoder *decoder) {
 	case FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE:
 		FLAC__ASSERT(decoder->private_->frame.header.channels == 2);
 		FLAC__ASSERT(decoder->private_->side_subframe_in_use != /* logical XOR */ (decoder->private_->frame.header.bits_per_sample < 32));
-		for(uint32_t i = 0; i < decoder->private_->frame.header.blocksize; i++)
+		for(i = 0; i < decoder->private_->frame.header.blocksize; i++)
 			if(decoder->private_->side_subframe_in_use)
 				decoder->private_->output[1][i] = decoder->private_->output[0][i] - decoder->private_->side_subframe[i];
 			else
@@ -3087,7 +3090,7 @@ void undo_channel_coding(FLAC__StreamDecoder *decoder) {
 	case FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE:
 		FLAC__ASSERT(decoder->private_->frame.header.channels == 2);
 		FLAC__ASSERT(decoder->private_->side_subframe_in_use != /* logical XOR */ (decoder->private_->frame.header.bits_per_sample < 32));
-		for(uint32_t i = 0; i < decoder->private_->frame.header.blocksize; i++)
+		for(i = 0; i < decoder->private_->frame.header.blocksize; i++)
 			if(decoder->private_->side_subframe_in_use)
 				decoder->private_->output[0][i] = decoder->private_->output[1][i] + decoder->private_->side_subframe[i];
 			else
@@ -3096,7 +3099,7 @@ void undo_channel_coding(FLAC__StreamDecoder *decoder) {
 	case FLAC__CHANNEL_ASSIGNMENT_MID_SIDE:
 		FLAC__ASSERT(decoder->private_->frame.header.channels == 2);
 		FLAC__ASSERT(decoder->private_->side_subframe_in_use != /* logical XOR */ (decoder->private_->frame.header.bits_per_sample < 32));
-		for(uint32_t i = 0; i < decoder->private_->frame.header.blocksize; i++) {
+		for(i = 0; i < decoder->private_->frame.header.blocksize; i++) {
 			if(!decoder->private_->side_subframe_in_use){
 				FLAC__int32 mid, side;
 				mid = decoder->private_->output[0][i];
diff --git a/src/libFLAC/stream_encoder.c b/src/libFLAC/stream_encoder.c
index 2879c51..ec76f07 100644
--- a/src/libFLAC/stream_encoder.c
+++ b/src/libFLAC/stream_encoder.c
@@ -3725,7 +3725,8 @@ FLAC__bool process_subframe_(
 								FLAC__lpc_window_data_wide(integer_signal, encoder->private_->window[a], encoder->private_->windowed_signal, frame_header->blocksize);
 							encoder->private_->local_lpc_compute_autocorrelation(encoder->private_->windowed_signal, frame_header->blocksize, max_lpc_order_this_apodization+1, autoc);
 							if(encoder->protected_->apodizations[a].type == FLAC__APODIZATION_SUBDIVIDE_TUKEY){
-								for(uint32_t i = 0; i < max_lpc_order_this_apodization; i++)
+								uint32_t i;
+								for(i = 0; i < max_lpc_order_this_apodization; i++)
 									autoc_root[i] = autoc[i];
 								b++;
 							}else{
@@ -3753,7 +3754,8 @@ FLAC__bool process_subframe_(
 							}else{
 								/* on uneven c, evaluate the root window (over the whole block) minus the previous partial window
 								 * similar to tukey_punchout apodization but more efficient	*/
-								for(uint32_t i = 0; i < max_lpc_order_this_apodization; i++)
+								uint32_t i;
+								for(i = 0; i < max_lpc_order_this_apodization; i++)
 									autoc[i] = autoc_root[i] - autoc[i];
 							}
 							/* Next function sets a, b and c appropriate for next iteration */
diff --git a/src/test_libFLAC/metadata_object.c b/src/test_libFLAC/metadata_object.c
index 0f2e4aa..b0db732 100644
--- a/src/test_libFLAC/metadata_object.c
+++ b/src/test_libFLAC/metadata_object.c
@@ -199,9 +199,10 @@ static void vc_resize_(FLAC__StreamMetadata *block, uint32_t num)
 		}
 	}
 	else {
+		uint32_t i;
 		vc->comments = realloc(vc->comments, sizeof(FLAC__StreamMetadata_VorbisComment_Entry)*num);
 		FLAC__ASSERT(0 != vc->comments);
-		for(uint32_t i = vc->num_comments; i < num; i++) {
+		for(i = vc->num_comments; i < num; i++) {
 			vc->comments[i].length = 0;
 			vc->comments[i].entry = malloc(1);
 			vc->comments[i].entry[0] = '\0';
-- 
2.37.3

