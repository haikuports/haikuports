From f698920dbb4857505d1943fbef3cc9f3d05a2bae Mon Sep 17 00:00:00 2001
From: Kacper Kasper <kacperkasper@gmail.com>
Date: Sat, 16 Dec 2017 10:52:53 +0100
Subject: gcc2 support


diff --git a/Half/eLut.cpp b/Half/eLut.cpp
index ce64b50..8deed8b 100644
--- a/Half/eLut.cpp
+++ b/Half/eLut.cpp
@@ -110,5 +110,6 @@ main ()
     }
 
     cout << "};\n";
+    cout.flush();
     return 0;
 }
diff --git a/Half/toFloat.cpp b/Half/toFloat.cpp
index 001bc51..ef2d87f 100644
--- a/Half/toFloat.cpp
+++ b/Half/toFloat.cpp
@@ -160,5 +160,6 @@ main ()
     }
 
     cout << "};\n";
+    cout.flush();
     return 0;
 }
diff --git a/Iex/IexBaseExc.cpp b/Iex/IexBaseExc.cpp
index 3b2e197..2fcf602 100644
--- a/Iex/IexBaseExc.cpp
+++ b/Iex/IexBaseExc.cpp
@@ -151,6 +151,6 @@ iex_debugTrap()
 {
     // how to in Linux?
     if (0 != ::getenv("IEXDEBUGTHROW"))
-        __builtin_trap();
+        abort();
 }
 #endif
diff --git a/IexMath/IexMathFpu.h b/IexMath/IexMathFpu.h
index df2a3e5..c6ae73b 100644
--- a/IexMath/IexMathFpu.h
+++ b/IexMath/IexMathFpu.h
@@ -69,7 +69,9 @@ int fpExceptions ();
 // that will be called when SIGFPE occurs.
 //------------------------------------------
 
-extern "C" typedef void (* FpExceptionHandler) (int type, const char explanation[]);
+extern "C" {
+	typedef void (* FpExceptionHandler) (int type, const char explanation[]);
+}
 
 void setFpExceptionHandler (FpExceptionHandler handler);
 
diff --git a/Imath/ImathVec.h b/Imath/ImathVec.h
index fb859eb..5fa0e91 100644
--- a/Imath/ImathVec.h
+++ b/Imath/ImathVec.h
@@ -126,9 +126,6 @@ template <class T> class Vec2
     template <class S>
     bool		operator == (const Vec2<S> &v) const;
 
-    template <class S>
-    bool		operator != (const Vec2<S> &v) const;
-
 
     //-----------------------------------------------------------------------
     // Compare two vectors and test if they are "approximately equal":
@@ -339,9 +336,6 @@ template <class T> class Vec3
     template <class S>
     bool		operator == (const Vec3<S> &v) const;
 
-    template <class S>
-    bool		operator != (const Vec3<S> &v) const;
-
     //-----------------------------------------------------------------------
     // Compare two vectors and test if they are "approximately equal":
     //
@@ -524,9 +518,6 @@ template <class T> class Vec4
     template <class S>
     bool            operator == (const Vec4<S> &v) const;
 
-    template <class S>
-    bool            operator != (const Vec4<S> &v) const;
-
 
     //-----------------------------------------------------------------------
     // Compare two vectors and test if they are "approximately equal":
@@ -969,14 +960,6 @@ Vec2<T>::operator == (const Vec2<S> &v) const
     return x == v.x && y == v.y;
 }
 
-template <class T>
-template <class S>
-inline bool
-Vec2<T>::operator != (const Vec2<S> &v) const
-{
-    return x != v.x || y != v.y;
-}
-
 template <class T>
 bool
 Vec2<T>::equalWithAbsError (const Vec2<T> &v, T e) const
@@ -1432,14 +1415,6 @@ Vec3<T>::operator == (const Vec3<S> &v) const
     return x == v.x && y == v.y && z == v.z;
 }
 
-template <class T>
-template <class S>
-inline bool
-Vec3<T>::operator != (const Vec3<S> &v) const
-{
-    return x != v.x || y != v.y || z != v.z;
-}
-
 template <class T>
 bool
 Vec3<T>::equalWithAbsError (const Vec3<T> &v, T e) const
@@ -1853,14 +1828,6 @@ Vec4<T>::operator == (const Vec4<S> &v) const
     return x == v.x && y == v.y && z == v.z && w == v.w;
 }
 
-template <class T>
-template <class S>
-inline bool
-Vec4<T>::operator != (const Vec4<S> &v) const
-{
-    return x != v.x || y != v.y || z != v.z || w != v.w;
-}
-
 template <class T>
 bool
 Vec4<T>::equalWithAbsError (const Vec4<T> &v, T e) const
-- 
2.15.0

