From d05e9e4218598ea79aee1e867360b71dbeb68fa9 Mon Sep 17 00:00:00 2001
From: TURX <turx2003@gmail.com>
Date: Sun, 19 Jan 2020 22:57:40 +0800
Subject: Fix Haiku support


diff --git a/src/modules/decklink/consumer_decklink.cpp b/src/modules/decklink/consumer_decklink.cpp
index ee8a2e9..e8df148 100644
--- a/src/modules/decklink/consumer_decklink.cpp
+++ b/src/modules/decklink/consumer_decklink.cpp
@@ -657,7 +657,9 @@ protected:
 			return;
 
 		pthread_attr_init(&tattr);
+#ifndef __HAIKU__
 		pthread_attr_setschedpolicy(&tattr, SCHED_FIFO);
+#endif
 
 		if ( !strcmp( "max", mlt_properties_get( properties, "priority" ) ) )
 			param.sched_priority = sched_get_priority_max(SCHED_FIFO) - 1;
diff --git a/src/modules/decklink/producer_decklink.cpp b/src/modules/decklink/producer_decklink.cpp
index 6a01c15..108433b 100644
--- a/src/modules/decklink/producer_decklink.cpp
+++ b/src/modules/decklink/producer_decklink.cpp
@@ -455,7 +455,10 @@ public:
 				struct sched_param param;
 
 				pthread_attr_init(&tattr);
+
+#ifndef __HAIKU__
 				pthread_attr_setschedpolicy(&tattr, SCHED_FIFO);
+#endif
 
 				if ( !strcmp( "max", mlt_properties_get( properties, "priority" ) ) )
 					param.sched_priority = sched_get_priority_max(SCHED_FIFO) - 1;
diff --git a/src/modules/plusgpl/CMakeLists.txt b/src/modules/plusgpl/CMakeLists.txt
index 4a91637..21f56e9 100644
--- a/src/modules/plusgpl/CMakeLists.txt
+++ b/src/modules/plusgpl/CMakeLists.txt
@@ -21,7 +21,7 @@ target_link_libraries(mltplusgpl PRIVATE mlt m Threads::Threads)
 
 if(WIN32)
   target_link_libraries(mltplusgpl PRIVATE ws2_32)
-elseif(UNIX AND NOT APPLE)
+elseif(UNIX AND NOT APPLE AND NOT HAIKU)
   target_link_libraries(mltplusgpl PRIVATE rt)
 endif()
 
-- 
2.37.3


From 699cf99375913f6296ba453c324a9bcc2ceb44ce Mon Sep 17 00:00:00 2001
From: Begasus <begasus@gmail.com>
Date: Tue, 18 Apr 2023 08:53:33 +0200
Subject: Fix SDL module


diff --git a/src/modules/sdl/CMakeLists.txt b/src/modules/sdl/CMakeLists.txt
index 6128184..769591b 100644
--- a/src/modules/sdl/CMakeLists.txt
+++ b/src/modules/sdl/CMakeLists.txt
@@ -17,7 +17,7 @@ target_link_libraries(mltsdl PRIVATE mlt m Threads::Threads PkgConfig::sdl)
 
 if(APPLE)
   target_link_libraries(mltsdl PRIVATE objc "-framework Foundation")
-elseif(UNIX)
+elseif(UNIX AND NOT HAIKU)
   target_link_libraries(mltsdl PRIVATE X11)
 endif()
 
diff --git a/src/modules/sdl/consumer_sdl.c b/src/modules/sdl/consumer_sdl.c
index e23e5ed..1c3816a 100644
--- a/src/modules/sdl/consumer_sdl.c
+++ b/src/modules/sdl/consumer_sdl.c
@@ -928,7 +928,7 @@ static int consumer_get_dimensions( int *width, int *height )
 	// Get the wm structure
 	if ( SDL_GetWMInfo( &wm ) == 1 )
 	{
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__HAIKU__)
 		// Check that we have the X11 wm
 		if ( wm.subsystem == SDL_SYSWM_X11 ) 
 		{
diff --git a/src/modules/sdl/consumer_sdl_still.c b/src/modules/sdl/consumer_sdl_still.c
index 3523926..c3e0a6a 100644
--- a/src/modules/sdl/consumer_sdl_still.c
+++ b/src/modules/sdl/consumer_sdl_still.c
@@ -598,7 +598,7 @@ static int consumer_get_dimensions( int *width, int *height )
 	// Get the wm structure
 	if ( SDL_GetWMInfo( &wm ) == 1 )
 	{
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__HAIKU__)
 		// Check that we have the X11 wm
 		if ( wm.subsystem == SDL_SYSWM_X11 ) 
 		{
-- 
2.37.3


From 9bf0293ce8159181ef9b16b40633f44575e572c1 Mon Sep 17 00:00:00 2001
From: Begasus <begasus@gmail.com>
Date: Tue, 18 Apr 2023 13:16:06 +0200
Subject: More Haiku fixes


diff --git a/src/framework/mlt_consumer.c b/src/framework/mlt_consumer.c
index 35246f8..e0e4bf8 100644
--- a/src/framework/mlt_consumer.c
+++ b/src/framework/mlt_consumer.c
@@ -1158,9 +1158,13 @@ static void consumer_work_start( mlt_consumer self )
 
 		priority.sched_priority = mlt_properties_get_int( MLT_CONSUMER_PROPERTIES( self ), "priority" );
 		pthread_attr_init( &thread_attributes );
+#ifndef __HAIKU__
 		pthread_attr_setschedpolicy( &thread_attributes, SCHED_OTHER );
+#endif
 		pthread_attr_setschedparam( &thread_attributes, &priority );
+#ifndef __HAIKU__
 		pthread_attr_setinheritsched( &thread_attributes, PTHREAD_EXPLICIT_SCHED );
+#endif
 		pthread_attr_setscope( &thread_attributes, PTHREAD_SCOPE_SYSTEM );
 
 		while ( n-- )
@@ -1748,9 +1752,13 @@ static void mlt_thread_create(mlt_consumer self, mlt_thread_function_t function
 		{
 			pthread_attr_t thread_attributes;
 			pthread_attr_init( &thread_attributes );
+#ifndef __HAIKU__
 			pthread_attr_setschedpolicy( &thread_attributes, SCHED_OTHER );
+#endif
 			pthread_attr_setschedparam( &thread_attributes, &priority );
+#ifndef __HAIKU__
 			pthread_attr_setinheritsched( &thread_attributes, PTHREAD_EXPLICIT_SCHED );
+#endif
 			pthread_attr_setscope( &thread_attributes, PTHREAD_SCOPE_SYSTEM );
 			priv->ahead_thread = malloc( sizeof( pthread_t ) );
 			pthread_t *handle = priv->ahead_thread;
diff --git a/src/framework/mlt_slices.c b/src/framework/mlt_slices.c
index 1b96d6e..0a8f2b0 100644
--- a/src/framework/mlt_slices.c
+++ b/src/framework/mlt_slices.c
@@ -199,7 +199,9 @@ static mlt_slices mlt_slices_init( int threads, int policy, int priority )
 		policy = SCHED_OTHER;
 	if ( priority < 0 )
 		priority = sched_get_priority_max( policy );
+#ifndef __HAIKU__
 	pthread_attr_setschedpolicy( &tattr, policy );
+#endif
 	param.sched_priority = priority;
 	pthread_attr_setschedparam( &tattr, &param );
 
diff --git a/src/modules/plusgpl/consumer_cbrts.c b/src/modules/plusgpl/consumer_cbrts.c
index 9a9a64d..b4049ad 100644
--- a/src/modules/plusgpl/consumer_cbrts.c
+++ b/src/modules/plusgpl/consumer_cbrts.c
@@ -923,9 +923,13 @@ static void start_output_thread( consumer_cbrts self )
 		pthread_attr_t thread_attributes;
 		pthread_attr_init( &thread_attributes );
 		priority.sched_priority = rtprio;
+#ifndef __HAIKU__
 		pthread_attr_setschedpolicy( &thread_attributes, SCHED_FIFO );
+#endif
 		pthread_attr_setschedparam( &thread_attributes, &priority );
+#ifndef __HAIKU__
 		pthread_attr_setinheritsched( &thread_attributes, PTHREAD_EXPLICIT_SCHED );
+#endif
 		pthread_attr_setscope( &thread_attributes, PTHREAD_SCOPE_SYSTEM );
 		if ( pthread_create( &self->output_thread, &thread_attributes, output_thread, self ) < 0 )
 		{
-- 
2.37.3

