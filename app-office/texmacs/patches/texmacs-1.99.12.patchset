From b26ca774a04adcc8a412394aca082af6d2ca7082 Mon Sep 17 00:00:00 2001
From: Massimiliano Gubinelli <m.gubinelli@gmail.com>
Date: Sat, 21 Mar 2020 15:08:29 +0000
Subject: fixes


diff --git a/configure b/configure
index 80a4ea6..c1ed01f 100755
--- a/configure
+++ b/configure
@@ -7153,6 +7153,16 @@ $as_echo "#define OS_DARWIN 1" >>confdefs.h
       CONFIG_SO="dylib"
       CONFIG_LIB_PATH="DYLD_LIBRARY_PATH"
     ;;
+    *haiku*)
+      { $as_echo "$as_me:${as_lineno-$LINENO}: result: a generic Haiku host" >&5
+$as_echo "a generic Haiku host" >&6; }
+
+$as_echo "#define OS_HAIKU 1" >>confdefs.h
+
+      CONFIG_OS="HAIKU"
+      CONFIG_QTPIPES="yes"
+      CONFIG_CXXOPTIMIZE="-O3 -fexpensive-optimizations"
+    ;;
     powerpc-*-linux*)
       { $as_echo "$as_me:${as_lineno-$LINENO}: result: a PowerPC/GNU-linux host" >&5
 $as_echo "a PowerPC/GNU-linux host" >&6; }
diff --git a/misc/m4/tm_platform.m4 b/misc/m4/tm_platform.m4
index 3fadab5..fedd350 100644
--- a/misc/m4/tm_platform.m4
+++ b/misc/m4/tm_platform.m4
@@ -140,6 +140,13 @@ AC_DEFUN([TM_PLATFORM],[
       CONFIG_SO="dylib"
       CONFIG_LIB_PATH="DYLD_LIBRARY_PATH"
     ;;
+    *haiku*)
+      AC_MSG_RESULT(a generic Haiku host)
+      AC_DEFINE([OS_HAIKU],[1],[OS type])
+      CONFIG_OS="HAIKU"
+      CONFIG_QTPIPES="yes"
+      CONFIG_CXXOPTIMIZE="-O3 -fexpensive-optimizations"
+    ;;    
     powerpc-*-linux*)
       AC_MSG_RESULT(a PowerPC/GNU-linux host)
       AC_DEFINE([OS_POWERPC_GNU_LINUX],[1],[OS type])
diff --git a/plugins/r/src/tm_r.c b/plugins/r/src/tm_r.c
index 3ecd81b..a0b2878 100644
--- a/plugins/r/src/tm_r.c
+++ b/plugins/r/src/tm_r.c
@@ -21,8 +21,10 @@
 #include <util.h>
 #endif
 
+#if !defined(__HAIKU__)
 #include <utmp.h>
 #endif
+#endif
 #include <unistd.h>
 #include <termios.h>
 #include <stdlib.h>
diff --git a/src/Plugins/Pdf/LibAesgm/brg_endian.h b/src/Plugins/Pdf/LibAesgm/brg_endian.h
index 4c34f2b..3d5ddb6 100644
--- a/src/Plugins/Pdf/LibAesgm/brg_endian.h
+++ b/src/Plugins/Pdf/LibAesgm/brg_endian.h
@@ -35,7 +35,7 @@ Issue Date: 20/12/2007
 #elif defined( __linux__ ) || defined( __GNUC__ ) || defined( __GNU_LIBRARY__ )
 #  if !defined( __MINGW32__ ) && !defined( _AIX )
 #    include <endian.h>
-#    if !defined( __BEOS__ )
+#    if !defined( __BEOS__ ) && !defined( __HAIKU__ )
 #      include <byteswap.h>
 #    endif
 #  endif
diff --git a/src/Plugins/Pdf/LibAesgm/byteswap.h b/src/Plugins/Pdf/LibAesgm/byteswap.h
new file mode 100644
index 0000000..8ba52b4
--- /dev/null
+++ b/src/Plugins/Pdf/LibAesgm/byteswap.h
@@ -0,0 +1,136 @@
+/* Macros to swap the order of bytes in integer values.
+   Copyright (C) 1997, 1998, 2000, 2002, 2003, 2007, 2008
+   Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#if !defined _BYTESWAP_H && !defined _NETINET_IN_H && !defined _ENDIAN_H
+# error "Never use <bits/byteswap.h> directly; include <byteswap.h> instead."
+#endif
+
+#ifndef _BITS_BYTESWAP_H
+#define _BITS_BYTESWAP_H 1
+
+#include <bits/wordsize.h>
+
+/* Swap bytes in 16 bit value.  */
+#define __bswap_constant_16(x) \
+     ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8))
+
+#if defined __GNUC__ && __GNUC__ >= 2
+# define __bswap_16(x) \
+     (__extension__                                                              \
+      ({ register unsigned short int __v, __x = (x);                              \
+         if (__builtin_constant_p (__x))                                      \
+           __v = __bswap_constant_16 (__x);                                      \
+         else                                                                      \
+           __asm__ ("rorw $8, %w0"                                              \
+                    : "=r" (__v)                                              \
+                    : "0" (__x)                                                      \
+                    : "cc");                                                      \
+         __v; }))
+#else
+/* This is better than nothing.  */
+# define __bswap_16(x) \
+     (__extension__                                                              \
+      ({ register unsigned short int __x = (x); __bswap_constant_16 (__x); }))
+#endif
+
+
+/* Swap bytes in 32 bit value.  */
+#define __bswap_constant_32(x) \
+     ((((x) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >>  8) |                      \
+      (((x) & 0x0000ff00) <<  8) | (((x) & 0x000000ff) << 24))
+
+#if defined __GNUC__ && __GNUC__ >= 2
+# if __WORDSIZE == 64 || (defined __i486__ || defined __pentium__              \
+                          || defined __pentiumpro__ || defined __pentium4__   \
+                          || defined __k8__ || defined __athlon__              \
+                          || defined __k6__ || defined __nocona__              \
+                          || defined __core2__ || defined __geode__              \
+                          || defined __amdfam10__)
+/* To swap the bytes in a word the i486 processors and up provide the
+   `bswap' opcode.  On i386 we have to use three instructions.  */
+#  define __bswap_32(x) \
+     (__extension__                                                              \
+      ({ register unsigned int __v, __x = (x);                                      \
+         if (__builtin_constant_p (__x))                                      \
+           __v = __bswap_constant_32 (__x);                                      \
+         else                                                                      \
+           __asm__ ("bswap %0" : "=r" (__v) : "0" (__x));                      \
+         __v; }))
+# else
+#  define __bswap_32(x)                                                              \
+     (__extension__                                                              \
+      ({ register unsigned int __v, __x = (x);                                      \
+         if (__builtin_constant_p (__x))                                      \
+           __v = __bswap_constant_32 (__x);                                      \
+         else                                                                      \
+           __asm__ ("rorw $8, %w0;"                                              \
+                    "rorl $16, %0;"                                              \
+                    "rorw $8, %w0"                                              \
+                    : "=r" (__v)                                              \
+                    : "0" (__x)                                                      \
+                    : "cc");                                                      \
+         __v; }))
+# endif
+#else
+# define __bswap_32(x) \
+     (__extension__                                                              \
+      ({ register unsigned int __x = (x); __bswap_constant_32 (__x); }))
+#endif
+
+
+#if defined __GNUC__ && __GNUC__ >= 2
+/* Swap bytes in 64 bit value.  */
+# define __bswap_constant_64(x) \
+     ((((x) & 0xff00000000000000ull) >> 56)                                      \
+      | (((x) & 0x00ff000000000000ull) >> 40)                                      \
+      | (((x) & 0x0000ff0000000000ull) >> 24)                                      \
+      | (((x) & 0x000000ff00000000ull) >> 8)                                      \
+      | (((x) & 0x00000000ff000000ull) << 8)                                      \
+      | (((x) & 0x0000000000ff0000ull) << 24)                                      \
+      | (((x) & 0x000000000000ff00ull) << 40)                                      \
+      | (((x) & 0x00000000000000ffull) << 56))
+
+# if __WORDSIZE == 64
+#  define __bswap_64(x) \
+     (__extension__                                                              \
+      ({ register unsigned long __v, __x = (x);                                      \
+         if (__builtin_constant_p (__x))                                      \
+           __v = __bswap_constant_64 (__x);                                      \
+         else                                                                      \
+           __asm__ ("bswap %q0" : "=r" (__v) : "0" (__x));                      \
+         __v; }))
+# else
+#  define __bswap_64(x) \
+     (__extension__                                                           \
+      ({ union { __extension__ unsigned long long int __ll;                   \
+                 unsigned int __l[2]; } __w, __r;                             \
+         if (__builtin_constant_p (x))                                        \
+           __r.__ll = __bswap_constant_64 (x);                                \
+         else                                                                 \
+           {                                                                  \
+             __w.__ll = (x);                                                  \
+             __r.__l[0] = __bswap_32 (__w.__l[1]);                            \
+             __r.__l[1] = __bswap_32 (__w.__l[0]);                            \
+           }                                                                  \
+         __r.__ll; }))
+# endif
+#endif
+
+#endif /* _BITS_BYTESWAP_H */
diff --git a/src/System/config.in b/src/System/config.in
index 9c5a531..826982c 100644
--- a/src/System/config.in
+++ b/src/System/config.in
@@ -141,6 +141,9 @@
 /* OS type */
 #undef OS_GNU_LINUX
 
+/* OS type */
+#undef OS_HAIKU
+
 /* OS type */
 #undef OS_IRIX
 
diff --git a/src/Texmacs/Texmacs/texmacs.cpp b/src/Texmacs/Texmacs/texmacs.cpp
index 94bf2d0..ee42c05 100644
--- a/src/Texmacs/Texmacs/texmacs.cpp
+++ b/src/Texmacs/Texmacs/texmacs.cpp
@@ -555,6 +555,8 @@ immediate_options (int argc, char** argv) {
         set_env ("HOME", get_env("USERPROFILE"));
     set_env ("TEXMACS_HOME_PATH", get_env ("APPDATA") * "\\TeXmacs");
 	}
+#elif defined(OS_HAIKU)
+    set_env ("TEXMACS_HOME_PATH", get_env ("HOME") * "/config/settings/TeXmacs");
 #else
     set_env ("TEXMACS_HOME_PATH", get_env ("HOME") * "/.TeXmacs");
 #endif
-- 
2.24.1


From cfcfbb9098309e9e67783958cd8473be465b7bfa Mon Sep 17 00:00:00 2001
From: Massimiliano Gubinelli <m.gubinelli@gmail.com>
Date: Sat, 21 Mar 2020 15:09:55 +0000
Subject: fixes


diff --git a/Makefile.in b/Makefile.in
index ae4bce4..def78a8 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -184,8 +184,8 @@ INSTALL:
 	@echo installed TeXmacs plugins data in $(DESTDIR)$(tmdata)/plugins
 	$(MKDIR) $(DESTDIR)$(datadir)/pixmaps
 	$(CP) $(tmdir)/misc/pixmaps/TeXmacs.xpm $(DESTDIR)$(datadir)/pixmaps
-	packages/linux/icons.sh install $(tmdir)/misc/images texmacs text-x-texmacs
-	packages/linux/mime.sh install $(tmdir)/misc/mime
+#	packages/linux/icons.sh install $(tmdir)/misc/images texmacs text-x-texmacs
+#	packages/linux/mime.sh install $(tmdir)/misc/mime
 	$(MKDIR) $(DESTDIR)$(bindir)
 	$(CHMOD) 755 $(tmdir)/bin/*
 	$(CP) $(tmdir)/bin/fig2ps $(DESTDIR)$(bindir)
-- 
2.24.1


From 62c1098fd673ad5a933e42c1cdd11fd053dfc0cf Mon Sep 17 00:00:00 2001
From: Massimiliano Gubinelli <m.gubinelli@gmail.com>
Date: Sat, 21 Mar 2020 17:28:19 +0000
Subject: fix paths


diff --git a/src/Texmacs/Texmacs/texmacs.cpp b/src/Texmacs/Texmacs/texmacs.cpp
index ee42c05..07c08ef 100644
--- a/src/Texmacs/Texmacs/texmacs.cpp
+++ b/src/Texmacs/Texmacs/texmacs.cpp
@@ -173,6 +173,15 @@ TeXmacs_init_paths (int& argc, char** argv) {
   // system("set");
 #endif
 
+#ifdef OS_HAIKU
+  // Initialization inside the Haiku package management environment
+  // TEXMACS_PATH is set relative to the executable which is in $prefix/app
+  // to $prefix/data/TeXmacs
+
+  if (is_empty (current_texmacs_path))
+    set_env ("TEXMACS_PATH", as_string (exedir * "../data/TeXmacs"));
+#endif
+
   // check on the latest $TEXMACS_PATH
   current_texmacs_path = get_env ("TEXMACS_PATH");
   if (is_empty (current_texmacs_path) ||
-- 
2.24.1


From 471743018bdfe67fdaaa014a17b93cc8573f0bee Mon Sep 17 00:00:00 2001
From: Massimiliano Gubinelli <m.gubinelli@gmail.com>
Date: Sat, 21 Mar 2020 17:58:02 +0000
Subject: fix to locale call


diff --git a/src/System/Language/locale.cpp b/src/System/Language/locale.cpp
index 2565488..a7da4c0 100644
--- a/src/System/Language/locale.cpp
+++ b/src/System/Language/locale.cpp
@@ -211,6 +211,8 @@ get_locale_charset () {
   return "UTF-8";
 #elif X11TEXMACS
   return "UTF-8";
+#elif OS_HAIKU
+  return "UTF-8";
 #else
   std::locale previous= std::locale::global (std::locale(""));
   string charset= string (nl_langinfo (CODESET));
-- 
2.24.1

