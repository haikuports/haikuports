From 80f2f59e1d6945023d70277087db3aed1bccaf1b Mon Sep 17 00:00:00 2001
From: Sergei Reznikov <diver@gelios.net>
Date: Sat, 15 Feb 2020 14:52:59 +0300
Subject: Make Elementary the default on Haiku


diff --git a/vcl/source/app/IconThemeSelector.cxx b/vcl/source/app/IconThemeSelector.cxx
index 6b8dfc0..3d557ad 100644
--- a/vcl/source/app/IconThemeSelector.cxx
+++ b/vcl/source/app/IconThemeSelector.cxx
@@ -67,6 +67,9 @@ IconThemeSelector::GetIconThemeForDesktopEnvironment(const OUString& desktopEnvi
         return "colibre";
     else
         return "colibre_dark";
+#elif defined(__HAIKU__)
+    (void)desktopEnvironment;
+    return "elementary";
 #else
     OUString r;
     if ( desktopEnvironment.equalsIgnoreAsciiCase("plasma5") ||
-- 
2.42.0


From c8c1e803eda7036f2330bcd724dbd5b1ef56c3b4 Mon Sep 17 00:00:00 2001
From: Sergei Reznikov <diver@gelios.net>
Date: Fri, 7 Aug 2020 12:14:40 +0300
Subject: Show used vcl backend in About window on Haiku


diff --git a/vcl/source/app/svapp.cxx b/vcl/source/app/svapp.cxx
index 6ee03f1..3c1653e 100644
--- a/vcl/source/app/svapp.cxx
+++ b/vcl/source/app/svapp.cxx
@@ -1208,7 +1208,7 @@ OUString Application::GetHWOSConfInfo(const int bSelection, const bool bLocalize
 #endif
             appendDetails(u"", Localize(SV_APP_DEFAULT, bLocalize));
 
-#if (defined LINUX || defined _WIN32 || defined MACOSX || defined __FreeBSD__ || defined EMSCRIPTEN)
+#if (defined LINUX || defined _WIN32 || defined MACOSX || defined __FreeBSD__ || defined EMSCRIPTEN || defined __HAIKU__)
         appendDetails(u"; ", SV_APP_VCLBACKEND + GetToolkitName());
 #endif
     }
-- 
2.42.0


From f9391b7dcd11f833851db3b20982a6705e80c1d6 Mon Sep 17 00:00:00 2001
From: Sergei Reznikov <diver@gelios.net>
Date: Wed, 24 Oct 2018 17:01:34 +0300
Subject: Identify Haiku in about window


diff --git a/vcl/unx/generic/app/geninst.cxx b/vcl/unx/generic/app/geninst.cxx
index 191d87c..949155f 100644
--- a/vcl/unx/generic/app/geninst.cxx
+++ b/vcl/unx/generic/app/geninst.cxx
@@ -26,6 +26,11 @@
 #  include <sys/utsname.h>
 #endif
 
+#if defined(__HAIKU__)
+#  include <sys/utsname.h>
+#  include <private/libroot/system_revision.h>
+#endif
+
 #include <config_features.h>
 #if HAVE_FEATURE_OPENGL
 #include <vcl/opengl/OpenGLContext.hxx>
@@ -92,6 +97,16 @@ OUString SalGenericInstance::getOSVersion()
 #define xstr(s) str(s)
     aKernelVer = "Emscripten " xstr(__EMSCRIPTEN_major__)
                  "." xstr(__EMSCRIPTEN_minor__) "." xstr(__EMSCRIPTEN_tiny__);
+#elif defined(__HAIKU__)
+    struct utsname stName;
+    if ( uname( &stName ) != 0 )
+        return aKernelVer;
+
+	const char *haikuRevision = __get_haiku_revision();
+	if (haikuRevision[0] != '\0')
+		return OUString::createFromAscii( stName.sysname ) + " " + OUString::createFromAscii(haikuRevision);
+
+	return OUString::createFromAscii( stName.sysname );
 #endif
     return aKernelVer;
 }
-- 
2.42.0


From defb4cca11b9b148add1fbae739c5ef707a1369b Mon Sep 17 00:00:00 2001
From: Sergei Reznikov <diver@gelios.net>
Date: Sat, 15 Feb 2020 15:04:53 +0300
Subject: Implement ShellExec on Haiku


diff --git a/shell/source/unix/exec/shellexec.cxx b/shell/source/unix/exec/shellexec.cxx
index 71137c7..a5fcd27 100644
--- a/shell/source/unix/exec/shellexec.cxx
+++ b/shell/source/unix/exec/shellexec.cxx
@@ -187,6 +187,9 @@ void SAL_CALL ShellExec::execute( const OUString& aCommand, const OUString& aPar
             aBuffer.append(" -R");
         }
         aBuffer.append(" --");
+
+#elif __HAIKU__
+		aBuffer.append("open");
 #else
         // Just use xdg-open on non-Mac
         aBuffer.append("xdg-open");
-- 
2.42.0


From 56e2681a95e2b01e29b4256788efe24904905455 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sun, 11 Aug 2019 11:47:40 +1000
Subject: Add XP_HAIKU defs for xmlsec


diff --git a/svl/Library_svl.mk b/svl/Library_svl.mk
index a67184b..4cadd7f 100644
--- a/svl/Library_svl.mk
+++ b/svl/Library_svl.mk
@@ -182,6 +182,12 @@ $(eval $(call gb_Library_add_exception_objects,svl,\
     svl/source/uno/pathservice \
 ))
 
+ifeq ($(OS),HAIKU)
+$(eval $(call gb_Library_add_defs,svl,\
+    -DXP_HAIKU=1 \
+))
+endif
+
 ifeq ($(OS),WNT)
 $(eval $(call gb_Library_add_exception_objects,svl,\
     svl/source/svdde/ddecli \
diff --git a/xmlsecurity/Library_xsec_xmlsec.mk b/xmlsecurity/Library_xsec_xmlsec.mk
index 615c3eb..5e10e08 100644
--- a/xmlsecurity/Library_xsec_xmlsec.mk
+++ b/xmlsecurity/Library_xsec_xmlsec.mk
@@ -130,6 +130,12 @@ endif
 
 else # !$(OS),WNT
 
+ifeq ($(OS),HAIKU)
+$(eval $(call gb_Library_add_defs,xsec_xmlsec,\
+	-DXP_HAIKU=1 \
+))
+endif
+
 ifeq ($(SYSTEM_XMLSEC),)
 $(eval $(call gb_Library_add_libs,xsec_xmlsec,\
        $(call gb_UnpackedTarball_get_dir,xmlsec)/src/.libs/libxmlsec1.a \
-- 
2.42.0


From 8f0768fc0e9e14daab895e5878cbcb1afaabdfd5 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Mon, 8 Feb 2021 21:47:12 +1000
Subject: Don't use fontconfig


diff --git a/vcl/qt5/QtGraphics_Text.cxx b/vcl/qt5/QtGraphics_Text.cxx
index 1879008..e5b1e9d 100644
--- a/vcl/qt5/QtGraphics_Text.cxx
+++ b/vcl/qt5/QtGraphics_Text.cxx
@@ -86,7 +86,11 @@ bool QtGraphics::GetFontCapabilities(vcl::FontCapabilities& rFontCapabilities) c
 
 void QtGraphics::GetDevFontList(vcl::font::PhysicalFontCollection* pPFC)
 {
+#ifdef __HAIKU__
+    static const bool bUseFontconfig = false;
+#else
     static const bool bUseFontconfig = (nullptr == getenv("SAL_VCL_QT5_NO_FONTCONFIG"));
+#endif
 
     if (pPFC->Count())
         return;
-- 
2.42.0


From 06717fcdd172ac5ca478656e69e28e6d6811a791 Mon Sep 17 00:00:00 2001
From: Sergei Reznikov <diver@gelios.net>
Date: Fri, 7 Aug 2020 12:47:56 +0300
Subject: Revert fstack-protector check removal in
 9db11a8ab648f4d04e59e6bb94cd640f64835447


diff --git a/config_host.mk.in b/config_host.mk.in
index eb5e751..5510ebd 100644
--- a/config_host.mk.in
+++ b/config_host.mk.in
@@ -305,6 +305,7 @@ export HAVE_DLLEXPORTINLINES=@HAVE_DLLEXPORTINLINES@
 export HAVE_EXTERNAL_DWARF=@HAVE_EXTERNAL_DWARF@
 export HAVE_LO_CLANG_DLLEXPORTINLINES=@HAVE_LO_CLANG_DLLEXPORTINLINES@
 export HAVE_GCC_AVX=@HAVE_GCC_AVX@
+export HAVE_GCC_STACK_PROTECTOR_STRONG=@HAVE_GCC_STACK_PROTECTOR_STRONG@
 export HAVE_GCC_BUILTIN_ATOMIC=@HAVE_GCC_BUILTIN_ATOMIC@
 export HAVE_GCC_FNO_ENFORCE_EH_SPECS=@HAVE_GCC_FNO_ENFORCE_EH_SPECS@
 export HAVE_GCC_FNO_SIZED_DEALLOCATION=@HAVE_GCC_FNO_SIZED_DEALLOCATION@
diff --git a/configure.ac b/configure.ac
index 19c2ebf..64e1fd9 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1140,6 +1140,7 @@ haiku*)
     test_gtk3=no
     test_gtk3_kde5=no
     test_kf5=yes
+    test_qt6=yes
     enable_odk=no
     enable_coinmp=no
     enable_pdfium=no
@@ -7261,6 +7262,17 @@ if test "$GCC" = "yes" -o "$COM_IS_CLANG" = TRUE; then
         AC_MSG_RESULT([no])
     fi
 
+    AC_MSG_CHECKING([whether $CC_BASE supports -fstack-protector-strong])
+    save_CFLAGS=$CFLAGS
+    CFLAGS="$CFLAGS -O0 -Werror -fstack-protector-strong"
+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ char a[8]; a[7] = 0; ]])],[ HAVE_GCC_STACK_PROTECTOR_STRONG=TRUE ],[])
+    CFLAGS=$save_CFLAGS
+    if test "$HAVE_GCC_STACK_PROTECTOR_STRONG" = "TRUE"; then
+        AC_MSG_RESULT([yes])
+    else
+        AC_MSG_RESULT([no])
+    fi
+
     AC_MSG_CHECKING([whether $CC_BASE supports atomic functions])
     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[
     int v = 0;
@@ -7398,6 +7410,7 @@ if test "$GCC" = "yes" -o "$COM_IS_CLANG" = TRUE; then
 fi
 
 AC_SUBST(HAVE_GCC_AVX)
+AC_SUBST(HAVE_GCC_STACK_PROTECTOR_STRONG)
 AC_SUBST(HAVE_GCC_BUILTIN_ATOMIC)
 AC_SUBST(HAVE_GCC_STACK_CLASH_PROTECTION)
 
@@ -13057,16 +13070,16 @@ dnl ===================================================================
 
 QT6_CFLAGS=""
 QT6_LIBS=""
-QMAKE6="qmake"
+QMAKE6="qmake6"
 MOC6="moc"
 QT6_PLATFORMS_SRCDIR=""
 if test \( "$test_qt6" = "yes" -a "$ENABLE_QT6" = "TRUE" \)
 then
     qt6_incdirs="$QT6INC /usr/include/qt6 /usr/include $x_includes"
-    qt6_libdirs="$QT6LIB /usr/lib/qt6 /usr/lib $x_libraries"
+    qt6_libdirs="$QT6LIB /system/lib /usr/lib/qt6 /usr/lib $x_libraries"
 
     if test -n "$supports_multilib"; then
-        qt6_libdirs="$qt6_libdirs /usr/lib64/qt6 /usr/lib64/qt /usr/lib64"
+        qt6_libdirs="$qt6_libdirs /system/lib /usr/lib64/qt6 /usr/lib64/qt /usr/lib64"
     fi
 
     qt6_test_include="QtWidgets/qapplication.h"
@@ -13159,12 +13172,12 @@ then
 
     for lib_dir in $qt6_libdirs; do
         if test -z "$qt6_libexec_dirs"; then
-            qt6_libexec_dirs="$lib_dir/libexec"
+            qt6_libexec_dirs="$lib_dir/Qt6"
         else
-            qt6_libexec_dirs="$qt6_libexec_dirs:$lib_dir/libexec"
+            qt6_libexec_dirs="$qt6_libexec_dirs:$lib_dir/Qt6"
         fi
     done
-    AC_PATH_PROGS( MOC6, [moc-qt6 moc], no, [`dirname $qt6_libdir`/libexec:$QT6DIR/libexec:$qt6_libexec_dirs:`echo $qt6_libdirs | $SED -e 's/ /:/g'`:$PATH])
+    AC_PATH_PROGS( MOC6, [moc-qt6 moc], no, [`dirname $qt6_libdir`/Qt6:$QT6DIR/libexec:$qt6_libexec_dirs:`echo $qt6_libdirs | $SED -e 's/ /:/g'`:$PATH])
     if test "$MOC6" = "no"; then
         AC_MSG_ERROR([Qt Meta Object Compiler not found.  Please specify
 the root of your Qt installation by exporting QT6DIR before running "configure".])
diff --git a/solenv/gbuild/platform/com_GCC_defs.mk b/solenv/gbuild/platform/com_GCC_defs.mk
index 8f99e91..cbcc408 100644
--- a/solenv/gbuild/platform/com_GCC_defs.mk
+++ b/solenv/gbuild/platform/com_GCC_defs.mk
@@ -75,7 +75,7 @@ gb_CFLAGS_COMMON := \
 	-fmessage-length=0 \
 	-fno-common \
 	-pipe \
-	$(if $(filter EMSCRIPTEN,$(OS)),-fno-stack-protector,-fstack-protector-strong) \
+	$(if $(or $(filter EMSCRIPTEN,$(OS)),$(filter HAIKU,$(OS))),-fno-stack-protector,-fstack-protector-strong) \
 
 gb_CXXFLAGS_COMMON := \
 	-Wall \
@@ -91,7 +91,7 @@ gb_CXXFLAGS_COMMON := \
 	-fmessage-length=0 \
 	-fno-common \
 	-pipe \
-	$(if $(filter EMSCRIPTEN,$(OS)),-fno-stack-protector,-fstack-protector-strong) \
+	$(if $(or $(filter EMSCRIPTEN,$(OS)),$(filter HAIKU,$(OS))),-fno-stack-protector,-fstack-protector-strong) \
 
 ifeq ($(HAVE_WDEPRECATED_COPY_DTOR),TRUE)
 gb_CXXFLAGS_COMMON += -Wdeprecated-copy-dtor
@@ -157,7 +157,7 @@ endif
 gb_VISIBILITY_FLAGS_CXX := -fvisibility-inlines-hidden
 gb_CXXFLAGS_COMMON += $(gb_VISIBILITY_FLAGS_CXX)
 
-gb_LinkTarget_LDFLAGS += $(if $(filter EMSCRIPTEN,$(OS)),-fno-stack-protector,-fstack-protector-strong)
+gb_LinkTarget_LDFLAGS += $(if $(or $(filter EMSCRIPTEN,$(OS)),$(filter HAIKU,$(OS))),-fno-stack-protector,-fstack-protector-strong)
 
 ifneq ($(gb_ENABLE_PCH),)
 ifeq ($(COM_IS_CLANG),TRUE)
-- 
2.42.0


From 3d987e447e8fadd67a1ff753d49c18de13fcac54 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Fri, 20 Aug 2021 23:33:13 +1000
Subject: Qt::Popup window handling


diff --git a/vcl/qt5/QtFrame.cxx b/vcl/qt5/QtFrame.cxx
index 08d2062..beef21f 100644
--- a/vcl/qt5/QtFrame.cxx
+++ b/vcl/qt5/QtFrame.cxx
@@ -143,7 +143,7 @@ QtFrame::QtFrame(QtFrame* pParent, SalFrameStyleFlags nStyle, bool bUseCairo)
         else if ((nStyle & SalFrameStyleFlags::FLOAT)
                  && (nStyle & SalFrameStyleFlags::OWNERDRAWDECORATION))
             aWinFlags = Qt::Tool | Qt::FramelessWindowHint;
-        else if (nStyle & SalFrameStyleFlags::TOOLTIP)
+        else if (nStyle & (nStyle & SalFrameStyleFlags::FLOAT | SalFrameStyleFlags::TOOLTIP))
             aWinFlags = Qt::ToolTip;
         // Can't use Qt::Popup, because it grabs the input focus and generates a focus-out event,
         // instantly auto-closing the LO's editable ComboBox popup.
@@ -206,7 +206,7 @@ void QtFrame::FillSystemEnvData(SystemEnvData& rData, sal_IntPtr pWindow, QWidge
         rData.platform = SystemEnvData::Platform::Wayland;
     else if (QGuiApplication::platformName() == "xcb")
         rData.platform = SystemEnvData::Platform::Xcb;
-    else if (QGuiApplication::platformName() == "wasm")
+    else if (QGuiApplication::platformName() == "wasm" || QGuiApplication::platformName() == "haiku")
         rData.platform = SystemEnvData::Platform::WASM;
     else
     {
diff --git a/vcl/qt5/QtWidget.cxx b/vcl/qt5/QtWidget.cxx
index 83ada78..340c357 100644
--- a/vcl/qt5/QtWidget.cxx
+++ b/vcl/qt5/QtWidget.cxx
@@ -184,9 +184,11 @@ void QtWidget::handleMouseButtonEvent(const QtFrame& rFrame, const QMouseEvent*
 void QtWidget::mousePressEvent(QMouseEvent* pEvent)
 {
     handleMouseButtonEvent(m_rFrame, pEvent);
+#ifndef __HAIKU__
     if (m_rFrame.isPopup()
         && !geometry().translated(geometry().topLeft() * -1).contains(pEvent->pos()))
         closePopup();
+#endif
 }
 
 void QtWidget::mouseReleaseEvent(QMouseEvent* pEvent) { handleMouseButtonEvent(m_rFrame, pEvent); }
-- 
2.42.0


From 08b5964034965c4f253c47e5e8df743380984ba2 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Wed, 4 May 2022 21:46:48 +1000
Subject: Use Noto Sans as default font


diff --git a/unotools/source/config/fontcfg.cxx b/unotools/source/config/fontcfg.cxx
index beeba82..526249d 100644
--- a/unotools/source/config/fontcfg.cxx
+++ b/unotools/source/config/fontcfg.cxx
@@ -229,6 +229,11 @@ OUString DefaultFontConfiguration::getUserInterfaceFont( const LanguageTag& rLan
     if( !aUIFont.isEmpty() )
         return aUIFont;
 
+#ifdef __HAIKU__
+	static constexpr OUStringLiteral HAIKU_UI_SANS = u"Noto Sans Display";
+	return HAIKU_UI_SANS;
+#endif
+
     // fallback mechanism (either no configuration or no entry in configuration
 
     static constexpr OUStringLiteral FALLBACKFONT_UI_SANS = u"Andale Sans UI;Albany;Albany AMT;Tahoma;Arial Unicode MS;Arial;Nimbus Sans L;Bitstream Vera Sans;gnu-unifont;Interface User;Geneva;WarpSans;Dialog;Swiss;Lucida;Helvetica;Charcoal;Chicago;MS Sans Serif;Helv;Times;Times New Roman;Interface System";
-- 
2.42.0


From 5fab52bb11c8f00f6ab08f703d721e16230f02dc Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Fri, 6 May 2022 10:55:46 +1000
Subject: Use system font


diff --git a/vcl/source/app/settings.cxx b/vcl/source/app/settings.cxx
index a0385c4..36deeab 100644
--- a/vcl/source/app/settings.cxx
+++ b/vcl/source/app/settings.cxx
@@ -25,6 +25,12 @@
 #include <win/svsys.h>
 #endif
 
+#ifdef __HAIKU__
+#include <kernel/image.h>
+#include <Application.h>
+#include <Font.h>
+#endif
+
 #include <comphelper/processfactory.hxx>
 #include <rtl/bootstrap.hxx>
 
@@ -636,10 +642,23 @@ void ImplStyleData::SetStandardStyles()
     vcl::Font aStdFont( FAMILY_SWISS, Size( 0, 8 ) );
     aStdFont.SetCharSet( osl_getThreadTextEncoding() );
     aStdFont.SetWeight( WEIGHT_NORMAL );
+#ifdef __HAIKU__
+	if (be_app) {
+	    font_family plainFontFamily;
+	    font_style plainFontStyle;
+		be_plain_font->GetFamilyAndStyle(&plainFontFamily, &plainFontStyle);
+		aStdFont.SetFamilyName(OStringToOUString(std::string_view(plainFontFamily), osl_getThreadTextEncoding()));
+		aStdFont.SetStyleName(OStringToOUString(std::string_view(plainFontStyle), osl_getThreadTextEncoding()));
+	} else {
+		aStdFont.SetFamilyName("Noto Sans Display");
+	}
+#else
     if (!utl::ConfigManager::IsFuzzing())
         aStdFont.SetFamilyName(utl::DefaultFontConfiguration::get().getUserInterfaceFont(LanguageTag("en")));
     else
         aStdFont.SetFamilyName("Liberation Sans");
+#endif
+
     maAppFont                   = aStdFont;
     maHelpFont                  = aStdFont;
     maMenuFont                  = aStdFont;
-- 
2.42.0


From 19ce4c24d457d1700bab69bc2fd1a9fe6ca4d3f4 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Tue, 17 Oct 2023 13:36:15 +1000
Subject: Don't use Cairo


diff --git a/vcl/qt5/QtInstance.cxx b/vcl/qt5/QtInstance.cxx
index df3df5d..25faac0 100644
--- a/vcl/qt5/QtInstance.cxx
+++ b/vcl/qt5/QtInstance.cxx
@@ -751,7 +751,11 @@ void QtInstance::setActivePopup(QtFrame* pFrame)
 extern "C" {
 VCLPLUG_QT_PUBLIC SalInstance* create_SalInstance()
 {
+#ifdef __HAIKU__
+	static const bool bUseCairo = false;
+#else
     static const bool bUseCairo = (nullptr == getenv("SAL_VCL_QT_USE_QFONT"));
+#endif
 
     std::unique_ptr<char* []> pFakeArgv;
     std::unique_ptr<int> pFakeArgc;
-- 
2.42.0

