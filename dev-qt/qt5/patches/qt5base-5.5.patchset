From cbfe432283334a5315a7a04184b7bc1533899f70 Mon Sep 17 00:00:00 2001
From: Tobias Koenig <tobias.koenig@kdab.com>
Date: Fri, 13 Feb 2015 14:04:34 +0000
Subject: Haiku: Fix tst_qfileselector.cpp unit test

Add the missing test data for haiku platform selector
and adapt unit test to use them.

Change-Id: I578e7f7e04f2a4c68f23d5356ea201e9562dbe6c
Reviewed-by: Augustin Cavalier <waddlesplash@gmail.com>
Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>

diff --git a/tests/auto/corelib/io/qfileselector/platforms/+haiku/test b/tests/auto/corelib/io/qfileselector/platforms/+haiku/test
new file mode 100644
index 0000000..e69de29
diff --git a/tests/auto/corelib/io/qfileselector/platforms/+haiku/test2 b/tests/auto/corelib/io/qfileselector/platforms/+haiku/test2
new file mode 100644
index 0000000..e69de29
diff --git a/tests/auto/corelib/io/qfileselector/platforms/+unix/+haiku/test b/tests/auto/corelib/io/qfileselector/platforms/+unix/+haiku/test
new file mode 100644
index 0000000..e69de29
diff --git a/tests/auto/corelib/io/qfileselector/qfileselector.qrc b/tests/auto/corelib/io/qfileselector/qfileselector.qrc
index 661647f..6e26997 100644
--- a/tests/auto/corelib/io/qfileselector/qfileselector.qrc
+++ b/tests/auto/corelib/io/qfileselector/qfileselector.qrc
@@ -19,6 +19,7 @@
    <file>platforms/+unix/+darwin/+mac/+osx/test</file>
    <file>platforms/+unix/+darwin/+mac/test</file>
    <file>platforms/+unix/+darwin/test</file>
+   <file>platforms/+unix/+haiku/test</file>
    <file>platforms/+unix/+linux/test</file>
    <file>platforms/+unix/test</file>
    <file>platforms/+windows/+wince/test</file>
@@ -30,6 +31,7 @@
    <file>platforms/+osx/test</file>
    <file>platforms/+darwin/test</file>
    <file>platforms/+mac/test</file>
+   <file>platforms/+haiku/test</file>
    <file>platforms/+linux/test</file>
    <file>platforms/+wince/test</file>
 
@@ -39,6 +41,7 @@
    <file>platforms/+blackberry/test2</file>
    <file>platforms/+ios/test2</file>
    <file>platforms/+osx/test2</file>
+   <file>platforms/+haiku/test2</file>
    <file>platforms/+linux/test2</file>
    <file>platforms/+wince/test2</file>
    <file>platforms/+winnt/test2</file>
diff --git a/tests/auto/corelib/io/qfileselector/tst_qfileselector.cpp b/tests/auto/corelib/io/qfileselector/tst_qfileselector.cpp
index b3767b4..87381f4 100644
--- a/tests/auto/corelib/io/qfileselector/tst_qfileselector.cpp
+++ b/tests/auto/corelib/io/qfileselector/tst_qfileselector.cpp
@@ -89,7 +89,7 @@ void tst_QFileSelector::basicTest_data()
     QString expectedPlatform2File(""); //Only the last selector
     QString expectedPlatform3File; // Only the first selector (the family)
 #if defined(Q_OS_UNIX) && !defined(Q_OS_ANDROID) && !defined(Q_OS_BLACKBERRY) && \
-    !defined(Q_OS_DARWIN) && !defined(Q_OS_LINUX)
+    !defined(Q_OS_DARWIN) && !defined(Q_OS_LINUX) && !defined(Q_OS_HAIKU)
     /* We are only aware of specific unixes, and do not have test files for any of the others.
        However those unixes can get a selector added from the result of a uname call, so this will
        lead to a case where we don't have that file so we can't expect the concatenation of platform
-- 
2.2.2


From 55967193f3a139e84877ab5c737157a3c3291764 Mon Sep 17 00:00:00 2001
From: Tobias Koenig <tobias.koenig@kdab.com>
Date: Fri, 20 Feb 2015 15:47:02 +0000
Subject: Haiku: Fix clipboard implementation

Fix the behavior of the clipboard implementation
to pass the unit test.

Change-Id: Ia8d5428eebf17a626565e8f4a4d895a67f35b20b
Reviewed-by: Augustin Cavalier <waddlesplash@gmail.com>
Reviewed-by: Maurice Kalinowski <maurice.kalinowski@theqtcompany.com>

diff --git a/src/plugins/platforms/haiku/qhaikuclipboard.cpp b/src/plugins/platforms/haiku/qhaikuclipboard.cpp
index f3aa9dc..a2d7e96 100644
--- a/src/plugins/platforms/haiku/qhaikuclipboard.cpp
+++ b/src/plugins/platforms/haiku/qhaikuclipboard.cpp
@@ -41,6 +41,8 @@
 #include <Clipboard.h>
 
 QHaikuClipboard::QHaikuClipboard()
+    : m_systemMimeData(Q_NULLPTR)
+    , m_userMimeData(Q_NULLPTR)
 {
     if (be_clipboard)
         be_clipboard->StartWatching(BMessenger(this));
@@ -50,17 +52,26 @@ QHaikuClipboard::~QHaikuClipboard()
 {
     if (be_clipboard)
         be_clipboard->StopWatching(BMessenger(this));
+
+    delete m_userMimeData;
+    delete m_systemMimeData;
 }
 
 QMimeData *QHaikuClipboard::mimeData(QClipboard::Mode mode)
 {
-    QMimeData *mimeData = new QMimeData();
-
     if (mode != QClipboard::Clipboard)
-        return mimeData;
+        return 0;
+
+    if (m_userMimeData)
+        return m_userMimeData;
 
     if (!be_clipboard->Lock())
-        return mimeData;
+        return 0;
+
+    if (!m_systemMimeData)
+        m_systemMimeData = new QMimeData();
+    else
+        m_systemMimeData->clear();
 
     const BMessage *clipboard = be_clipboard->Data();
     if (clipboard) {
@@ -76,11 +87,11 @@ QMimeData *QHaikuClipboard::mimeData(QClipboard::Mode mode)
             if (dataLen && (status == B_OK)) {
                 const QString format = QString::fromLatin1(name);
                 if (format == QStringLiteral("text/plain")) {
-                    mimeData->setText(QString::fromLocal8Bit(reinterpret_cast<const char*>(data), dataLen));
+                    m_systemMimeData->setText(QString::fromLocal8Bit(reinterpret_cast<const char*>(data), dataLen));
                 } else if (format == QStringLiteral("text/html")) {
-                    mimeData->setHtml(QString::fromLocal8Bit(reinterpret_cast<const char*>(data), dataLen));
+                    m_systemMimeData->setHtml(QString::fromLocal8Bit(reinterpret_cast<const char*>(data), dataLen));
                 } else {
-                    mimeData->setData(format, QByteArray(reinterpret_cast<const char*>(data), dataLen));
+                    m_systemMimeData->setData(format, QByteArray(reinterpret_cast<const char*>(data), dataLen));
                 }
             }
         }
@@ -88,7 +99,7 @@ QMimeData *QHaikuClipboard::mimeData(QClipboard::Mode mode)
 
     be_clipboard->Unlock();
 
-    return mimeData;
+    return m_systemMimeData;
 }
 
 void QHaikuClipboard::setMimeData(QMimeData *mimeData, QClipboard::Mode mode)
@@ -96,6 +107,14 @@ void QHaikuClipboard::setMimeData(QMimeData *mimeData, QClipboard::Mode mode)
     if (mode != QClipboard::Clipboard)
         return;
 
+    if (mimeData) {
+        if (m_systemMimeData == mimeData)
+            return;
+
+        if (m_userMimeData == mimeData)
+            return;
+    }
+
     if (!be_clipboard->Lock())
         return;
 
@@ -115,6 +134,10 @@ void QHaikuClipboard::setMimeData(QMimeData *mimeData, QClipboard::Mode mode)
         qWarning("Unable to store mime data on clipboard");
 
     be_clipboard->Unlock();
+
+    m_userMimeData = mimeData;
+
+    emitChanged(QClipboard::Clipboard);
 }
 
 bool QHaikuClipboard::supportsMode(QClipboard::Mode mode) const
@@ -131,8 +154,12 @@ bool QHaikuClipboard::ownsMode(QClipboard::Mode mode) const
 
 void QHaikuClipboard::MessageReceived(BMessage* message)
 {
-    if (message->what == B_CLIPBOARD_CHANGED)
+    if (message->what == B_CLIPBOARD_CHANGED) {
+        delete m_userMimeData;
+        m_userMimeData = Q_NULLPTR;
+
         emitChanged(QClipboard::Clipboard);
+    }
 
     BHandler::MessageReceived(message);
 }
diff --git a/src/plugins/platforms/haiku/qhaikuclipboard.h b/src/plugins/platforms/haiku/qhaikuclipboard.h
index 0dc2bfd..3c1f92c 100644
--- a/src/plugins/platforms/haiku/qhaikuclipboard.h
+++ b/src/plugins/platforms/haiku/qhaikuclipboard.h
@@ -55,6 +55,10 @@ public:
 
     // override from BHandler to catch change notifications from Haiku clipboard
     void MessageReceived(BMessage* message) Q_DECL_OVERRIDE;
+
+private:
+    QMimeData *m_systemMimeData;
+    QMimeData *m_userMimeData;
 };
 
 QT_END_NAMESPACE
-- 
2.2.2


From 0798b7fd09c1399728af833005f7f963775e9921 Mon Sep 17 00:00:00 2001
From: Tobias Koenig <tobias.koenig@kdab.com>
Date: Sat, 2 May 2015 12:29:00 +0000
Subject: Haiku: Fix compilation after QPA API change

Remove the calls to QWindowSystemInterface::setSynchronousWindowsSystemEvents
in the Haiku QPA plugin, because the method was renamed in latest QPA API and
we do not really have to call them anyway (was a copy&paste leftover from QNX QPA).

Change-Id: I67db43e89c093e5679f11d967d609846008cad0d
Reviewed-by: Augustin Cavalier <waddlesplash@gmail.com>
Reviewed-by: Maurice Kalinowski <maurice.kalinowski@theqtcompany.com>

diff --git a/src/plugins/platforms/haiku/qhaikuwindow.cpp b/src/plugins/platforms/haiku/qhaikuwindow.cpp
index 5768e1c..140b79a 100644
--- a/src/plugins/platforms/haiku/qhaikuwindow.cpp
+++ b/src/plugins/platforms/haiku/qhaikuwindow.cpp
@@ -306,10 +306,8 @@ void QHaikuWindow::haikuWindowMoved(const QPoint &pos)
     const QRect newGeometry(pos, geometry().size());
 
     QPlatformWindow::setGeometry(newGeometry);
-    QWindowSystemInterface::setSynchronousWindowsSystemEvents(true);
     QWindowSystemInterface::handleGeometryChange(window(), newGeometry);
     QWindowSystemInterface::handleExposeEvent(window(), newGeometry);
-    QWindowSystemInterface::setSynchronousWindowsSystemEvents(false);
 }
 
 void QHaikuWindow::haikuWindowResized(const QSize &size, bool zoomInProgress)
@@ -317,10 +315,8 @@ void QHaikuWindow::haikuWindowResized(const QSize &size, bool zoomInProgress)
     const QRect newGeometry(geometry().topLeft(), size);
 
     QPlatformWindow::setGeometry(newGeometry);
-    QWindowSystemInterface::setSynchronousWindowsSystemEvents(true);
     QWindowSystemInterface::handleGeometryChange(window(), newGeometry);
     QWindowSystemInterface::handleExposeEvent(window(), newGeometry);
-    QWindowSystemInterface::setSynchronousWindowsSystemEvents(false);
 
     if ((m_windowState == Qt::WindowMaximized) && !zoomInProgress) {
         // the user has resized the window while maximized -> reset maximized flag
-- 
2.2.2


From fd3a69d4358900797f34a44941547bb9965f510e Mon Sep 17 00:00:00 2001
From: Tobias Koenig <tobias.koenig@kdab.com>
Date: Fri, 27 Feb 2015 18:24:43 +0000
Subject: Haiku: Enable FreeType2/FontConfig support

Pass the correct include path to the config test, otherwise compilation
will fail.

Change-Id: I6723cad41ec289b051dcc9c47b3b1d67af7c5879
Reviewed-by: Oswald Buddenhagen <oswald.buddenhagen@theqtcompany.com>

diff --git a/config.tests/unix/freetype/freetype.pri b/config.tests/unix/freetype/freetype.pri
index be2fc33..05299ed 100644
--- a/config.tests/unix/freetype/freetype.pri
+++ b/config.tests/unix/freetype/freetype.pri
@@ -2,6 +2,7 @@
     TRY_INCLUDEPATHS = /include /usr/include $$QMAKE_INCDIR $$QMAKE_INCDIR_X11 $$INCLUDEPATH
     # LSB doesn't allow using headers from /include or /usr/include
     linux-lsb-g++:TRY_INCLUDEPATHS = $$QMAKE_INCDIR $$QMAKE_INCDIR_X11 $$INCLUDEPATH
+    haiku:TRY_INCLUDEPATHS += /system/develop/headers
     for(p, TRY_INCLUDEPATHS) {
         p = $$join(p, "", "", "/freetype2")
         exists($$p):INCLUDEPATH *= $$p
-- 
2.2.2


From 72ee7d9936c4774067b64aa54f7b53183a00db98 Mon Sep 17 00:00:00 2001
From: Tobias Koenig <tobias.koenig@kdab.com>
Date: Sat, 2 May 2015 12:50:25 +0000
Subject: Haiku: Fix reported geometry of platform window

Report the proper window geometry and adapt the
geometry parameters of expose events to be relative
to the window coordinate system.

Change-Id: Ifb32b2663fdf41df0c9783e76e0ebc5e5cf978a3
Reviewed-by: Maurice Kalinowski <maurice.kalinowski@theqtcompany.com>

diff --git a/src/plugins/platforms/haiku/qhaikuwindow.cpp b/src/plugins/platforms/haiku/qhaikuwindow.cpp
index 140b79a..9622d12 100644
--- a/src/plugins/platforms/haiku/qhaikuwindow.cpp
+++ b/src/plugins/platforms/haiku/qhaikuwindow.cpp
@@ -130,6 +130,7 @@ QHaikuWindow::QHaikuWindow(QWindow *window)
     if (!m_window)
         qFatal("QHaikuWindow: failed to create window");
 
+    setGeometry(rect);
     setWindowFlags(window->flags());
 }
 
@@ -164,13 +165,13 @@ void QHaikuWindow::setVisible(bool visible)
 {
     if (visible) {
         m_window->Show();
+
+        window()->requestActivate();
+
+        QWindowSystemInterface::handleExposeEvent(window(), QRect(QPoint(0, 0), window()->geometry().size()));
     } else {
         m_window->Hide();
     }
-
-    window()->requestActivate();
-
-    QWindowSystemInterface::handleExposeEvent(window(), window()->geometry());
 }
 
 bool QHaikuWindow::isExposed() const
@@ -307,7 +308,7 @@ void QHaikuWindow::haikuWindowMoved(const QPoint &pos)
 
     QPlatformWindow::setGeometry(newGeometry);
     QWindowSystemInterface::handleGeometryChange(window(), newGeometry);
-    QWindowSystemInterface::handleExposeEvent(window(), newGeometry);
+    QWindowSystemInterface::handleExposeEvent(window(), QRect(QPoint(0, 0), newGeometry.size()));
 }
 
 void QHaikuWindow::haikuWindowResized(const QSize &size, bool zoomInProgress)
@@ -316,7 +317,7 @@ void QHaikuWindow::haikuWindowResized(const QSize &size, bool zoomInProgress)
 
     QPlatformWindow::setGeometry(newGeometry);
     QWindowSystemInterface::handleGeometryChange(window(), newGeometry);
-    QWindowSystemInterface::handleExposeEvent(window(), newGeometry);
+    QWindowSystemInterface::handleExposeEvent(window(), QRect(QPoint(0, 0), newGeometry.size()));
 
     if ((m_windowState == Qt::WindowMaximized) && !zoomInProgress) {
         // the user has resized the window while maximized -> reset maximized flag
-- 
2.2.2


From 5bdb6f63e033d1de0cb8513ffefbf85fc5063344 Mon Sep 17 00:00:00 2001
From: Tobias Koenig <tobias.koenig@kdab.com>
Date: Thu, 19 Feb 2015 14:10:53 +0000
Subject: Haiku: Fix QWaitCondition on Haiku

The latest version of Haiku provides the implementation
for pthread_condattr_setclock, so we can enable the code
in QWaitCondition again to make it use the monotonic clock
correctly.

Change-Id: Ibb9ad33d873c3b34f2c516087c4e0aeac04cc83f
Reviewed-by: Augustin Cavalier <waddlesplash@gmail.com>
Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>

diff --git a/src/corelib/thread/qwaitcondition_unix.cpp b/src/corelib/thread/qwaitcondition_unix.cpp
index fd6af7d..89bf523 100644
--- a/src/corelib/thread/qwaitcondition_unix.cpp
+++ b/src/corelib/thread/qwaitcondition_unix.cpp
@@ -77,7 +77,7 @@ void qt_initialize_pthread_cond(pthread_cond_t *cond, const char *where)
 #if defined(Q_OS_ANDROID)
     if (local_condattr_setclock && QElapsedTimer::clockType() == QElapsedTimer::MonotonicClock)
         local_condattr_setclock(&condattr, CLOCK_MONOTONIC);
-#elif !defined(Q_OS_MAC) && !defined(Q_OS_HAIKU)
+#elif !defined(Q_OS_MAC)
     if (QElapsedTimer::clockType() == QElapsedTimer::MonotonicClock)
         pthread_condattr_setclock(&condattr, CLOCK_MONOTONIC);
 #endif
-- 
2.2.2


From 0dae6e42d3e2c477b279cfbfe447d495f716a3b8 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Thu, 15 Oct 2015 21:13:27 +1000
Subject: Fix Haiku paths


diff --git a/src/corelib/io/qstandardpaths_haiku.cpp b/src/corelib/io/qstandardpaths_haiku.cpp
index a565b10..adc2992 100644
--- a/src/corelib/io/qstandardpaths_haiku.cpp
+++ b/src/corelib/io/qstandardpaths_haiku.cpp
@@ -134,20 +134,20 @@ QString QStandardPaths::writableLocation(StandardLocation type)
     case HomeLocation:
         return haikuStandardPath(B_USER_DIRECTORY);
     case FontsLocation:
-        return haikuStandardPath(B_USER_NONPACKAGED_FONTS_DIRECTORY);
-    case ApplicationsLocation:
-        return haikuStandardPath(B_USER_NONPACKAGED_BIN_DIRECTORY);
+        return haikuStandardPath(B_SYSTEM_FONTS_DIRECTORY);
+//    case ApplicationsLocation:
+//        return haikuStandardPath(B_USER_NONPACKAGED_BIN_DIRECTORY);
     case TempLocation:
         return haikuStandardPath(B_SYSTEM_TEMP_DIRECTORY);
     case AppDataLocation: // fall through
     case AppLocalDataLocation:
-        return haikuAppStandardPath(B_USER_NONPACKAGED_DATA_DIRECTORY);
+        return haikuAppStandardPath(B_SYSTEM_DATA_DIRECTORY);
     case GenericDataLocation:
-        return haikuStandardPath(B_USER_NONPACKAGED_DATA_DIRECTORY);
+        return haikuStandardPath(B_SYSTEM_DATA_DIRECTORY);
     case CacheLocation:
         return haikuAppStandardPath(B_USER_CACHE_DIRECTORY);
     case GenericCacheLocation:
-        return haikuStandardPath(B_USER_CACHE_DIRECTORY);
+        return haikuStandardPath(B_SYSTEM_CACHE_DIRECTORY);
     case ConfigLocation: // fall through
     case AppConfigLocation:
         return haikuAppStandardPath(B_USER_SETTINGS_DIRECTORY);
@@ -173,7 +173,7 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
     case MoviesLocation:
     case DownloadLocation:
     case HomeLocation:
-        paths += haikuStandardPath(B_USER_NONPACKAGED_DIRECTORY);
+        paths += haikuStandardPath(B_USER_DIRECTORY);
         break;
     case FontsLocation:
         paths += haikuStandardPaths(B_FIND_PATH_FONTS_DIRECTORY);
@@ -197,10 +197,10 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
         break;
     case ConfigLocation: // fall through
     case AppConfigLocation:
-        paths += haikuAppStandardPath(B_SYSTEM_SETTINGS_DIRECTORY);
+        paths += haikuAppStandardPath(B_USER_SETTINGS_DIRECTORY);
         break;
     case GenericConfigLocation:
-        paths += haikuStandardPath(B_SYSTEM_SETTINGS_DIRECTORY);
+        paths += haikuStandardPath(B_USER_SETTINGS_DIRECTORY);
         break;
     default:
         break;
-- 
2.2.2

