From 0fff3d79b902adc84d86ce7a6cada6e79a7c15e5 Mon Sep 17 00:00:00 2001
From: Niels Sascha Reedijk <niels.reedijk@gmail.com>
Date: Fri, 29 Sep 2023 16:03:27 +0000
Subject: Port 6.0.3 changes to 11.0.03


diff --git a/src/libs/3rdparty/libptyqt/unixptyprocess.cpp b/src/libs/3rdparty/libptyqt/unixptyprocess.cpp
index e9ec1d5..04d1e21 100644
--- a/src/libs/3rdparty/libptyqt/unixptyprocess.cpp
+++ b/src/libs/3rdparty/libptyqt/unixptyprocess.cpp
@@ -118,7 +118,10 @@ bool UnixPtyProcess::startProcess(const QString &shellPath,
         return false;
     }
 
-    ttmode.c_iflag = ICRNL | IXON | IXANY | IMAXBEL | BRKINT;
+    ttmode.c_iflag = ICRNL | IXON | IXANY | BRKINT;
+#if !defined(Q_OS_HAIKU)
+    ttmode.c_iflag |= IMAXBEL;
+#endif
 #if defined(IUTF8)
     ttmode.c_iflag |= IUTF8;
 #endif
@@ -131,16 +134,22 @@ bool UnixPtyProcess::startProcess(const QString &shellPath,
     ttmode.c_cc[VEOL] = -1;
     ttmode.c_cc[VEOL2] = -1;
     ttmode.c_cc[VERASE] = 0x7f;
+#if !defined(Q_OS_HAIKU)
     ttmode.c_cc[VWERASE] = 23;
+#endif
     ttmode.c_cc[VKILL] = 21;
+#if !defined(Q_OS_HAIKU)
     ttmode.c_cc[VREPRINT] = 18;
+#endif
     ttmode.c_cc[VINTR] = 3;
     ttmode.c_cc[VQUIT] = 0x1c;
     ttmode.c_cc[VSUSP] = 26;
     ttmode.c_cc[VSTART] = 17;
     ttmode.c_cc[VSTOP] = 19;
+#if !defined(Q_OS_HAIKU)
     ttmode.c_cc[VLNEXT] = 22;
     ttmode.c_cc[VDISCARD] = 15;
+#endif
     ttmode.c_cc[VMIN] = 1;
     ttmode.c_cc[VTIME] = 0;
 
@@ -322,7 +331,7 @@ void ShellProcess::configChildProcess()
     ioctl(m_handleSlave, TIOCSCTTY, 0);
     tcsetpgrp(m_handleSlave, sid);
 
-#if !defined(Q_OS_ANDROID) && !defined(Q_OS_FREEBSD)
+#if !defined(Q_OS_ANDROID) && !defined(Q_OS_FREEBSD) && !defined(Q_OS_HAIKU)
     // on Android imposible to put record to the 'utmp' file
     struct utmpx utmpxInfo;
     memset(&utmpxInfo, 0, sizeof(utmpxInfo));
diff --git a/src/libs/3rdparty/sqlite/config.h b/src/libs/3rdparty/sqlite/config.h
index f0e73be..13d1902 100644
--- a/src/libs/3rdparty/sqlite/config.h
+++ b/src/libs/3rdparty/sqlite/config.h
@@ -35,6 +35,11 @@
 #define HAVE_UTIME 1
 #endif
 
+#ifdef __HAIKU__
+#define _DEFAULT_SOURCE 1
+#define _BSD_SOURCE 1
+#endif
+
 #if (_XOPEN_SOURCE >= 500) && !(_POSIX_C_SOURCE >= 200809L) || _DEFAULT_SOURCE || _BSD_SOURCE
 #define HAVE_USLEEP 1
 #endif
diff --git a/src/libs/3rdparty/sqlite/sqlite3.c b/src/libs/3rdparty/sqlite/sqlite3.c
index 1884b08..e492cf7 100644
--- a/src/libs/3rdparty/sqlite/sqlite3.c
+++ b/src/libs/3rdparty/sqlite/sqlite3.c
@@ -41330,7 +41330,7 @@ static int full_fsync(int fd, int fullSync, int dataOnly){
   */
   if( rc ) rc = fsync(fd);
 
-#elif defined(__APPLE__)
+#elif defined(__APPLE__) || defined(__HAIKU__)
   /* fdatasync() on HFS+ doesn't yet flush the file size if it changed correctly
   ** so currently we default to the macro that redefines fdatasync to fsync
   */
diff --git a/src/libs/sqlite/createtablesqlstatementbuilder.cpp b/src/libs/sqlite/createtablesqlstatementbuilder.cpp
new file mode 100644
index 0000000..e69de29
diff --git a/src/libs/utils/qtcassert.cpp b/src/libs/utils/qtcassert.cpp
index 78baa41..bb91104 100644
--- a/src/libs/utils/qtcassert.cpp
+++ b/src/libs/utils/qtcassert.cpp
@@ -29,7 +29,7 @@ void dumpBacktrace(int maxdepth)
     const int ArraySize = 1000;
     if (maxdepth < 0 || maxdepth > ArraySize)
         maxdepth = ArraySize;
-#if defined(Q_OS_UNIX)
+#if defined(Q_OS_UNIX) && !defined(Q_OS_HAIKU)
     void *bt[ArraySize] = {nullptr};
     int size = backtrace(bt, maxdepth);
     char **lines = backtrace_symbols(bt, size);
diff --git a/src/libs/utils/savefile.cpp b/src/libs/utils/savefile.cpp
index a9d0cca..1737508 100644
--- a/src/libs/utils/savefile.cpp
+++ b/src/libs/utils/savefile.cpp
@@ -88,7 +88,7 @@ bool SaveFile::commit()
     }
 #ifdef Q_OS_WIN
     FlushFileBuffers(reinterpret_cast<HANDLE>(_get_osfhandle(handle())));
-#elif _POSIX_SYNCHRONIZED_IO > 0
+#elif _POSIX_SYNCHRONIZED_IO > 0 && !defined(Q_OS_HAIKU)
     fdatasync(handle());
 #else
     fsync(handle());
diff --git a/src/plugins/clangformat/clangformatutils.cpp b/src/plugins/clangformat/clangformatutils.cpp
index f3e5c8f..ef4b5c9 100644
--- a/src/plugins/clangformat/clangformatutils.cpp
+++ b/src/plugins/clangformat/clangformatutils.cpp
@@ -121,7 +121,7 @@ clang::format::FormatStyle calculateQtcStyle()
 #if LLVM_VERSION_MAJOR >= 12
     style.IncludeStyle.IncludeCategories = {{"^<Q.*", 200, 200, true}};
 #else
-    style.IncludeStyle.IncludeCategories = {{"^<Q.*", 200, 200}};
+    style.IncludeStyle.IncludeCategories = {{"^<Q.*", 200}};
 #endif
     style.IncludeStyle.IncludeIsMainRegex = "(Test)?$";
     style.IndentCaseLabels = false;
diff --git a/src/plugins/coreplugin/manhattanstyle.cpp b/src/plugins/coreplugin/manhattanstyle.cpp
index 8a2e0b4..bbdf720 100644
--- a/src/plugins/coreplugin/manhattanstyle.cpp
+++ b/src/plugins/coreplugin/manhattanstyle.cpp
@@ -234,16 +234,20 @@ int ManhattanStyle::pixelMetric(PixelMetric metric, const QStyleOption *option,
     case PM_DockWidgetSeparatorExtent:
         retval = 1;
         break;
+#if !defined(Q_OS_HAIKU)
     case PM_MenuPanelWidth:
     case PM_MenuBarHMargin:
     case PM_MenuBarVMargin:
+#endif
     case PM_ToolBarFrameWidth:
         if (panelWidget(widget))
             retval = 1;
         break;
     case PM_ButtonShiftVertical:
     case PM_ButtonShiftHorizontal:
+#if !defined(Q_OS_HAIKU)
     case PM_MenuBarPanelWidth:
+#endif
     case PM_ToolBarItemMargin:
     case PM_ToolBarItemSpacing:
         if (panelWidget(widget))
@@ -860,6 +864,7 @@ void ManhattanStyle::drawControl(
     }
 
     switch (element) {
+#if !defined(Q_OS_HAIKU)
     case CE_MenuItem:
         painter->save();
         if (const auto mbi = qstyleoption_cast<const QStyleOptionMenuItem *>(option)) {
@@ -879,6 +884,7 @@ void ManhattanStyle::drawControl(
         }
         painter->restore();
         break;
+#endif
 
     case CE_MenuBarItem:
         painter->save();
@@ -1022,6 +1028,7 @@ void ManhattanStyle::drawControl(
         }
         break;
 
+#if !defined(Q_OS_HAIKU)
     case CE_MenuBarEmptyArea: {
             if (creatorTheme()->flag(Theme::FlatMenuBar))
                 painter->fillRect(option->rect, StyleHelper::baseColor());
@@ -1035,6 +1042,7 @@ void ManhattanStyle::drawControl(
             painter->restore();
         }
         break;
+#endif
 
     case CE_ToolBar:
         {
diff --git a/src/plugins/projectexplorer/abi.cpp b/src/plugins/projectexplorer/abi.cpp
index d1bd01b..ab90153 100644
--- a/src/plugins/projectexplorer/abi.cpp
+++ b/src/plugins/projectexplorer/abi.cpp
@@ -1138,6 +1138,10 @@ Abi Abi::hostAbi()
     subos = WindowsMSysFlavor;
 #endif
     format = PEFormat;
+#elif defined (Q_OS_HAIKU)
+    os = UnknownOS;
+    subos = GenericFlavor;
+    format = UnknownFormat;
 #elif defined (Q_OS_LINUX)
     os = LinuxOS;
     subos = GenericFlavor;
diff --git a/src/plugins/qmldesigner/CMakeLists.txt b/src/plugins/qmldesigner/CMakeLists.txt
index 3c41fff..28fb307 100644
--- a/src/plugins/qmldesigner/CMakeLists.txt
+++ b/src/plugins/qmldesigner/CMakeLists.txt
@@ -89,7 +89,7 @@ extend_qtc_library(QmlDesignerCore
   PUBLIC_DEFINES QDS_BUILD_QMLPARSER
 )
 extend_qtc_library(QmlDesignerCore
-  CONDITION UNIX AND NOT APPLE
+  CONDITION UNIX AND NOT APPLE AND NOT HAIKU
   PUBLIC_DEPENDS rt
 )
 
diff --git a/src/shared/qbs/src/lib/corelib/tools/processutils.cpp b/src/shared/qbs/src/lib/corelib/tools/processutils.cpp
index 02608cc..7e57db7 100644
--- a/src/shared/qbs/src/lib/corelib/tools/processutils.cpp
+++ b/src/shared/qbs/src/lib/corelib/tools/processutils.cpp
@@ -56,6 +56,8 @@
 #   include <sys/sysctl.h>
 # if !defined(Q_OS_NETBSD)
 #   include <sys/user.h>
+#elif defined(Q_OS_HAIKU)
+// Do nothing
 # endif
 #else
 #   error Missing implementation of processNameByPid for this platform.
diff --git a/src/tools/process_stub/main.cpp b/src/tools/process_stub/main.cpp
index 3749333..6688023 100644
--- a/src/tools/process_stub/main.cpp
+++ b/src/tools/process_stub/main.cpp
@@ -50,7 +50,7 @@ std::optional<QStringList> environmentVariables;
 QProcess inferiorProcess;
 int inferiorId{0};
 
-#ifdef Q_OS_DARWIN
+#if defined(Q_OS_DARWIN) || defined(Q_OS_HAIKU)
 // A memory mapped helper to retrieve the pid of the inferior process in debugMode
 static int *shared_child_pid = nullptr;
 #endif
@@ -250,7 +250,7 @@ void onInferiorStarted()
 #ifdef Q_OS_WIN
     sendThreadId(win_process_information->dwThreadId);
     sendPid(inferiorId);
-#elif defined(Q_OS_DARWIN)
+#elif defined(Q_OS_DARWIN) || defined(Q_OS_HAIKU)
     // In debug mode we use the poll timer to send the pid.
     if (!debugMode)
         sendPid(inferiorId);
@@ -279,7 +279,7 @@ void setupUnixInferior()
 #ifndef Q_OS_WIN
     if (debugMode) {
         qCInfo(log) << "Debug mode enabled";
-#ifdef Q_OS_DARWIN
+#if defined(Q_OS_DARWIN) || defined(Q_OS_HAIKU)
         // We are using raise(SIGSTOP) to stop the child process, macOS does not support ptrace(...)
         inferiorProcess.setChildProcessModifier([] {
             // Let the parent know our pid ...
diff --git a/src/tools/qml2puppet/CMakeLists.txt b/src/tools/qml2puppet/CMakeLists.txt
index 9244a94..781b5cc 100644
--- a/src/tools/qml2puppet/CMakeLists.txt
+++ b/src/tools/qml2puppet/CMakeLists.txt
@@ -74,7 +74,7 @@ extend_qtc_executable(qml2puppet
 )
 
 extend_qtc_executable(qml2puppet
-  CONDITION UNIX AND (NOT APPLE)
+  CONDITION UNIX AND (NOT APPLE) AND (NOT HAIKU)
   DEPENDS rt
 )
 
-- 
2.42.1

