From 400d995a9c4acb135dd6febcd9494c44969d259e Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Mon, 23 Mar 2015 17:20:54 +0000
Subject: Haiku patch


diff --git a/src/files.c b/src/files.c
index 481ffeb..3cd4af0 100644
--- a/src/files.c
+++ b/src/files.c
@@ -1212,10 +1212,10 @@ void do_insertfile(
 
 #if !defined(DISABLE_MULTIBUFFER) && !defined(DISABLE_HISTORIES)
 	    if (ISSET(MULTIBUFFER)) {
+		ssize_t savedposline, savedposcol;
 		/* Update the screen to account for the current buffer. */
 		display_buffer();
 
-		ssize_t savedposline, savedposcol;
 		if (ISSET(POS_HISTORY) &&
 #ifndef NANO_TINY
 			!execute &&
diff --git a/src/text.c b/src/text.c
index a798521..85d7ed7 100644
--- a/src/text.c
+++ b/src/text.c
@@ -446,11 +446,12 @@ void undo_cut(undo *u)
 /* Redo a cut, or undo an uncut. */
 void redo_cut(undo *u)
 {
+    filestruct *oldcutbuffer = cutbuffer, *oldcutbottom = cutbottom;
+
     /* If we cut the magicline, we may as well not crash. :/ */
     if (!u->cutbuffer)
 	return;
 
-    filestruct *oldcutbuffer = cutbuffer, *oldcutbottom = cutbottom;
     cutbuffer = cutbottom = NULL;
 
     goto_line_posx(u->lineno, u->begin);
@@ -473,6 +474,7 @@ void redo_cut(undo *u)
 /* Undo the last thing(s) we did. */
 void do_undo(void)
 {
+    filestruct *f;
     undo *u = openfile->current_undo;
     filestruct *t = NULL;
     char *data, *undidmsg = NULL;
@@ -482,7 +484,7 @@ void do_undo(void)
 	return;
     }
 
-    filestruct *f = fsfromline(u->mark_begin_lineno);
+    f = fsfromline(u->mark_begin_lineno);
     if (!f) {
 	statusbar(_("Internal error: can't match line %d.  "
 			"Please save your work."), u->mark_begin_lineno);
@@ -575,6 +577,7 @@ void do_undo(void)
 	break;
     case INSERT:
 	undidmsg = _("text insert");
+	{
 	filestruct *oldcutbuffer = cutbuffer, *oldcutbottom = cutbottom;
 	cutbuffer = NULL;
 	cutbottom = NULL;
@@ -593,6 +596,7 @@ void do_undo(void)
 	cutbuffer = oldcutbuffer;
 	cutbottom = oldcutbottom;
 	openfile->mark_set = FALSE;
+	}
 	break;
     case REPLACE:
 	undidmsg = _("text replace");
@@ -620,6 +624,8 @@ void do_undo(void)
 /* Redo the last thing(s) we undid. */
 void do_redo(void)
 {
+    filestruct *shoveline;
+    filestruct *f;
     char *data, *redidmsg = NULL;
     undo *u = openfile->undotop;
 
@@ -637,7 +643,7 @@ void do_redo(void)
 	return;
     }
 
-    filestruct *f = fsfromline(u->type == INSERT ? 1 : u->mark_begin_lineno);
+    f = fsfromline(u->type == INSERT ? 1 : u->mark_begin_lineno);
     if (!f) {
 	statusbar(_("Internal error: can't match line %d.  "
 			"Please save your work."), u->mark_begin_lineno);
@@ -671,7 +677,7 @@ void do_redo(void)
 	break;
     case ENTER:
 	redidmsg = _("line break");
-	filestruct *shoveline = make_new_node(f);
+	shoveline = make_new_node(f);
 	shoveline->data = mallocstrcpy(NULL, u->strdata);
 	data = mallocstrncpy(NULL, f->data, u->begin + 1);
 	data[u->begin] = '\0';
@@ -1128,6 +1134,7 @@ fprintf(stderr, "  >> Updating... action = %d, openfile->last_action = %d, openf
 	    free_filestruct(u->cutbuffer);
 	u->cutbuffer = copy_filestruct(cutbuffer);
 	if (u->mark_set) {
+	    ssize_t line;
 	    /* If the "marking" operation was from right-->left or
 	     * bottom-->top, then swap the mark points. */
 	    if ((u->lineno == u->mark_begin_lineno && u->begin < u->mark_begin_x)
@@ -1136,7 +1143,7 @@ fprintf(stderr, "  >> Updating... action = %d, openfile->last_action = %d, openf
 		u->begin = u->mark_begin_x;
 		u->mark_begin_x = x_loc;
 
-		ssize_t line = u->lineno;
+		line = u->lineno;
 		u->lineno = u->mark_begin_lineno;
 		u->mark_begin_lineno = line;
 	    } else
@@ -1217,6 +1224,8 @@ bool do_wrap(filestruct *line)
 	/* The next line, minus indentation. */
     size_t next_line_len = 0;
 	/* The length of next_line. */
+	size_t old_x;
+	filestruct * oldLine;
 
     /* There are three steps.  First, we decide where to wrap.  Then, we
      * create the new wrap line.  Finally, we clean up. */
@@ -1264,8 +1273,8 @@ bool do_wrap(filestruct *line)
     add_undo(SPLIT_BEGIN);
 #endif
 
-    size_t old_x = openfile->current_x;
-    filestruct * oldLine = openfile->current;
+    old_x = openfile->current_x;
+    oldLine = openfile->current;
     openfile->current = line;
 
     /* Step 2, making the new wrap line.  It will consist of indentation
-- 
2.2.2

