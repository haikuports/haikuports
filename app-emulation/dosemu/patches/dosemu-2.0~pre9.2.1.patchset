From 9fb38e359a50186860da569a373b222340b85f67 Mon Sep 17 00:00:00 2001
From: PulkoMandy <pulkomandy@pulkomandy.tk>
Date: Sat, 21 Jun 2025 20:21:15 +0200
Subject: Get it to build on Haiku

- Use elf_i386_haiku instead of elf_i386 (not sure why Haiku's binutils don't know about elf_i386)
- Implement CPU features detection (there is no /proc/cpuinfo in Haiku; use cpuid and
  get_cpu_topology_info instead)
- Set MAP_NORESERVE and B_OVERCOMMITING_AREA where needed (in Linux this is implied by
  PROT_NONE). Still not working and causing a KDL, see
  http://dev.haiku-os.org/ticket/19264

diff --git a/configure.ac b/configure.ac
index 0bd5081..f210aba 100644
--- a/configure.ac
+++ b/configure.ac
@@ -840,7 +840,7 @@ fi
 DOSEMU_CFLAGS="${DOSEMU_CFLAGS} ${OPT} ${PIPE}"
 DOSEMU_CPPFLAGS="${DOSEMU_CPPFLAGS} -MD -DCFLAGS_STR=\"$DOSEMU_CFLAGS $CFLAGS\""
 DOSEMU_VERSION=`cd $srcdir && ./getversion -b`
-AS_LDFLAGS="-melf_i386"
+AS_LDFLAGS="-melf_i386_haiku"
 
 AC_SUBST(XASFLAGS)
 AC_SUBST(ASFLAGS)
diff --git a/src/base/init/config.c b/src/base/init/config.c
index 0d5f8dd..7ded0da 100644
--- a/src/base/init/config.c
+++ b/src/base/init/config.c
@@ -43,6 +43,9 @@
 #include "mhpdbg.h"
 #include "mapping/mapping.h"
 
+#ifdef __HAIKU__
+#include <kernel/OS.h>
+#endif
 /*
  * Options used in config_init().
  *
@@ -812,10 +815,84 @@ void secure_option_preparse(int *argc, char **argv)
 
 static void read_cpu_info(void)
 {
-    char *cpuflags, *cpu;
     int k = 3;
+    int cores = 0;
     int err;
 
+#ifdef __HAIKU__
+    cpuid_info info;
+
+    err = get_cpuid(&info, 1, 0);
+    if (err != B_OK)
+        return;
+
+    k = info.eax_1.family;
+    bool fpu = info.eax_1.extended_features & (1 << 0);
+    bool tsc = info.eax_1.extended_features & (1 << 4);
+    bool mmx = info.eax_1.extended_features & (1 << 23);
+    bool fxsr = info.eax_1.extended_features & (1 << 24);
+    bool sse = info.eax_1.extended_features & (1 << 25);
+
+    cpu_topology_node_info topology[128];
+    int count = 128;
+    get_cpu_topology_info(topology, &count);
+
+    if (k >= 5) {
+        config.realcpu = CPU_586;
+
+#ifdef X86_EMULATOR
+        if (mmx || sse) {
+	  config.cpuprefetcht0 = 1;
+        }
+#endif
+#ifdef __i386__
+        if (fxsr) {
+          config.cpufxsr = 1;
+	  if (sse)
+	    config.cpusse = 1;
+	}
+#endif
+        if (tsc) {
+            long long chz = 0;
+            for (int i = 0; i < count; i++) {
+                if (topology[i].type == B_TOPOLOGY_CORE) {
+                    chz = topology[i].data.core.default_frequency;
+                    cores ++;
+                }
+            }
+		/* speed division factor to get 1us from CPU clock */
+		config.cpu_spd = (LLF_US*1000000)/chz;
+
+		/* speed division factor to get 838ns from CPU clock */
+		config.cpu_tick_spd = (LLF_TICKS*1000000)/chz;
+
+		config.CPUSpeedInMhz = chz / 1000000;
+
+        }
+    } else if (k == 4) {
+        config.realcpu = CPU_486;
+    } else if (k != 3) {
+        error("Unknown CPU type!\n");
+    }
+
+    if (config.mathco) {
+        config.mathco = fpu;
+    }
+
+    err = get_cpuid(&info, 9, 0);
+    if (err != B_OK)
+      return;
+
+    if (info.regs.ecx & (1 << 2))
+      config.umip = 1;
+    else
+      warn("Your CPU doesn't support UMIP\n");
+
+    if (cores > 0)
+        config.smp = 1;
+#else
+    char *cpuflags, *cpu;
+
     err = open_proc_scan("/proc/cpuinfo");
     if (err)
       return;
@@ -853,6 +930,7 @@ static void read_cpu_info(void)
 	    config.cpusse = 1;
 	}
 #endif
+
         if (cpuflags && strstr(cpuflags, "tsc")) {
           /* bogospeed currently returns 0; should it deny
            * pentium features, fall back into 486 case */
@@ -921,6 +999,7 @@ static void read_cpu_info(void)
       config.smp = 1;		/* for checking overrides, later */
     }
     close_proc_scan();
+#endif
 }
 
 static void config_post_process(void)
diff --git a/src/base/lib/mapping/mapping.c b/src/base/lib/mapping/mapping.c
index 21bbe0a..fe91b05 100644
--- a/src/base/lib/mapping/mapping.c
+++ b/src/base/lib/mapping/mapping.c
@@ -42,6 +42,10 @@
 #include <linux/version.h>
 #endif
 
+#ifdef __HAIKU__
+#include <private/system/vm_defs.h>
+#endif
+
 enum { MEM_BASE, KVM_BASE, JIT_BASE,
 #ifdef __i386__
        VM86_BASE,
@@ -413,7 +417,7 @@ static void *do_huge_page(int flags, size_t mapsize, int protect)
 
 void *mmap_mapping_huge_page_aligned(int cap, size_t mapsize, int protect)
 {
-  int flags = (cap & MAPPING_INIT_LOWRAM) ? _MAP_32BIT : 0;
+  int flags = (cap & MAPPING_INIT_LOWRAM) ? _MAP_32BIT | MAP_NORESERVE : 0;
   void *addr = do_huge_page(flags, mapsize, protect);
   if (addr == MAP_FAILED)
     return addr;
@@ -784,7 +788,7 @@ void *alloc_mapping_huge_page_aligned(int cap, size_t mapsize)
 {
   void *addr;
   Q__printf("MAPPING: alloc_huge_page_aligned, cap=%s size=%#zx\n", cap, mapsize);
-  addr = do_huge_page(0, mapsize, PROT_NONE);
+  addr = do_huge_page(0, mapsize, PROT_NONE | B_OVERCOMMITTING_AREA);
   return addr == MAP_FAILED ? MAP_FAILED : do_alloc_mapping(cap, mapsize, addr);
 }
 
-- 
2.48.1


From f5ccc8d0f264e2265037fead1f30c52e95987436 Mon Sep 17 00:00:00 2001
From: PulkoMandy <pulkomandy@pulkomandy.tk>
Date: Tue, 24 Jun 2025 23:08:16 +0200
Subject: Autostart SDL GUI when not run from Terminal


diff --git a/src/dosemu b/src/dosemu
old mode 100644
new mode 100755
index f5aa289..23bad62
--- a/src/dosemu
+++ b/src/dosemu
@@ -199,6 +199,9 @@ SUFFIX="$SUFFIX $*"
 [ -z "$DOSEMU_QUIET" ] || OPTS="$OPTS -q"
 [ -z "$DOSEMU_LOG_FILE" ] || LOG_FILE="$DOSEMU_LOG_FILE"
 
+# Force use of SDL if not starting from terminal
+[ "dumb" == "$TERM" ] && OPTS="$OPTS -S"
+
 [ -n "$LOG_FILE" ] || LOG_FILE=~/.dosemu/boot.log
 MAX_LOGS=3
 
-- 
2.48.1

