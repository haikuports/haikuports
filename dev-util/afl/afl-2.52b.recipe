SUMMARY="American fuzzy lop, a security-oriented fuzzer"
DESCRIPTION="American fuzzy lop is a security-oriented fuzzer that employs a \
novel type of compile-time instrumentation and genetic algorithms to \
automatically discover clean, interesting test cases that trigger new \
internal states in the targeted binary. This substantially improves the \
functional coverage for the fuzzed code. The compact synthesized corpora \
produced by the tool are also useful for seeding other, more labor- or \
resource-intensive testing regimes down the road.

Compared to other instrumented fuzzers, afl-fuzz is designed to be practical: \
it has modest performance overhead, uses a variety of highly effective \
fuzzing strategies and effort minimization tricks, requires essentially no \
configuration, and seamlessly handles complex, real-world use cases - say, \
common image parsing or file compression libraries."
HOMEPAGE="http://lcamtuf.coredump.cx/afl/"
COPYRIGHT="2013-2016 Google Inc."
LICENSE="Apache v2"
REVISION="1"
SOURCE_URI="http://lcamtuf.coredump.cx/afl/releases/afl-$portVersion.tgz"
CHECKSUM_SHA256="43614b4b91c014d39ef086c5cc84ff5f068010c264c2c05bf199df60898ce045"
PATCHES="afl-$portVersion.patchset"

ARCHITECTURES="!x86_gcc2 ?x86 ?x86_64"
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	afl$secondaryArchSuffix = $portVersion
	cmd:afl_analyze = $portVersion
	cmd:afl_clang = $portVersion
	cmd:afl_clang++ = $portVersion
	cmd:afl_cmin = $portVersion
	cmd:afl_fuzz = $portVersion
	cmd:afl_g++ = $portVersion
	cmd:afl_gcc = $portVersion
	cmd:afl_gotcpu = $portVersion
	cmd:afl_plot = $portVersion
	cmd:afl_showmap = $portVersion
	cmd:afl_tmin = $portVersion
	cmd:afl_whatsup = $portVersion
	"
REQUIRES="
	haiku$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
BUILD_PREREQUIRES="
	cmd:make
	cmd:gcc$secondaryArchSuffix
	"

makeAfl()
{
	make PREFIX=$prefix \
		BIN_PATH=$prefix/bin \
		HELPER_PATH=$libDir/afl \
		DOC_PATH=$docDir \
		MISC_PATH=$docDir \
		"$@"
}

BUILD()
{
	makeAfl $jobArgs
}

INSTALL()
{
	makeAfl install
}

TEST()
{
	make test_x86
}
