SUMMARY="A tool that creates tags files for code browsing in editors"
DESCRIPTION="Universal Ctags (abbreviated as u-ctags) is a *maintained* implementation of ctags.
ctags generates an index (or tag) file of language objects found in source files for \
programming languages. This index makes it easy for text editors and other tools to locate the \
indexed items.

Exuberant Ctags (e-ctags) maintained by Darren Hiebert, the ancestor of Universal Ctags, improved \
traditional ctags with multi-language support, the ability for the user to define new languages \
searched by regular expressions (called optlib in Universal Ctags), and the ability to generate \
emacs-style TAGS files.
But the activity of the project unfortunately stalled.

Universal Ctags has the objective of continuing the development of Exuberant Ctags.
Reza Jelveh initially created a personal fork of Exuberant Ctags on GitHub.
As interest and participation grew, it was decided to move development to a dedicated project as \
Universal Ctags.
The goal of this project is to maintain a common/unified working space where people interested in \
making ctags better can work together.

Some of the major features of Universal Ctags are:
* more numbers of improved language support
    * new extended C/C++ language parser, etc.
* fully extended optlib (a feature to define a new language parser from a command line)
* interactive mode (experimental)"
HOMEPAGE="http://ctags.sourceforge.net/
	https://github.com/universal-ctags/ctags"
COPYRIGHT="1996-2009, Darren Hiebert"
LICENSE="GNU GPL v2"
REVISION="1"
SOURCE_URI="https://github.com/universal-ctags/ctags/archive/refs/tags/v$portVersion.tar.gz"
CHECKSUM_SHA256="1eb6d46d4c4cace62d230e7700033b8db9ad3d654f2d4564e87f517d4b652a53"
PATCHES="ctags-$portVersion.patchset"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

commandBinDir=$binDir
commandSuffix=$secondaryArchSuffix
if [ "$targetArchitecture" = x86_gcc2 ]; then
	commandSuffix=
	commandBinDir=$prefix/bin
fi

PROVIDES="
	ctags$secondaryArchSuffix = $portVersion compat >= 6.1
	cmd:ctags$commandSuffix = $portVersion compat >= 6.1
	cmd:optscript$commandSuffix = $portVersion compat >= 6.1
	cmd:readtags$commandSuffix = $portVersion compat >= 6.1
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libiconv$secondaryArchSuffix
	lib:libjansson$secondaryArchSuffix
	lib:libpcre2_8$secondaryArchSuffix
	lib:libxml2$secondaryArchSuffix
	lib:libyaml_0$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libiconv$secondaryArchSuffix
	devel:libjansson$secondaryArchSuffix
	devel:libpcre2_8$secondaryArchSuffix
	devel:libxml2$secondaryArchSuffix
	devel:libyaml_0$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:aclocal
	cmd:autoreconf
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:make
	cmd:pkg_config$secondaryArchSuffix
	cmd:rst2man
	cmd:sed
	"

defineDebugInfoPackage ctags$secondaryArchSuffix \
	$commandBinDir/ctags \
	$commandBinDir/optscript \
	$commandBinDir/readtags

BUILD()
{
	autoreconf -fi
	runConfigure --omit-dirs binDir ./configure \
		--bindir=$commandBinDir
	make $jobArgs
}

INSTALL()
{
	make install
}

TEST()
{
	# Failed tests
	# ============================================================
	# interactive-mode/stdout-compare
	# ptag-proc-cwd/stdout-compare
	# ptag-proc-cwd/stderr-compare
	make check
}
