SUMMARY="A makefile framework for writing simple makefiles for complex tasks"
DESCRIPTION="The goals of the kBuild framework:

Similar behavior cross all supported platforms.
Flexibility, don't create unnecessary restrictions preventing ad-hoc solutions.
Makefile can very simple to write and maintain.
There are four concepts being tried out in the current kBuild incaration:

One configuration file for a subtree automatically included.
Target configuration templates as the primary mechanism for makefile \n
simplification.
Tools and SDKs for helping out the templates with flexibility.
Non-recursive makefile method by using sub-makefiles."
HOMEPAGE="https://trac.netlabs.org/kbuild/"
COPYRIGHT="kBuild developers"
LICENSE="GNU LGPL v3"
REVISION="1"
SOURCE_URI="ftp://ftp.netlabs.org/pub/kbuild/kBuild-$portVersion-p2-src.tar.gz"
CHECKSUM_SHA256="8205db5e74d27ef6394bd48118a310e4f5caab455575f0ea975f62dcb8d642a6"
SOURCE_DIR="kBuild-$portVersion-p2"
PATCHES="kbuild-0.1.5-p2.patchset"

ARCHITECTURES="?x86_gcc2 ?x86 x86_64"
SECONDARY_ARCHITECTURES="?x86"

# On x86_gcc2 we don't want to install the commands in bin/<arch>/, but in bin/.
commandSuffix=$secondaryArchSuffix
commandBinDir=$binDir
if [ "$targetArchitecture" = x86_gcc2 ]; then
	commandSuffix=
	commandBinDir=$prefix/bin
fi

PROVIDES="
	kbuild$secondaryArchSuffix = $portVersion
	kDepIDB$commandSuffix = $portVersion
	kDepPre$commandSuffix = $portVersion
	kmk$commandSuffix = $portVersion
	kmk_append$commandSuffix = $portVersion
	kmk_ash$commandSuffix = $portVersion
	kmk_cat$commandSuffix = $portVersion
	kmk_chmod$commandSuffix = $portVersion
	kmk_cmp$commandSuffix = $portVersion
	kmk_cp$commandSuffix = $portVersion
	kmk_echo$commandSuffix = $portVersion
	kmk_expr$commandSuffix = $portVersion
	kmk_gmake$commandSuffix = $portVersion
	kmk_install$commandSuffix = $portVersion
	kmk_ln$commandSuffix = $portVersion
	kmk_md5sum$commandSuffix = $portVersion
	kmk_mkdir$commandSuffix = $portVersion
	kmk_mv$commandSuffix = $portVersion
	kmk_printf$commandSuffix = $portVersion
	kmk_redirect$commandSuffix = $portVersion
	kmk_rm$commandSuffix = $portVersion
	kmk_rmdir$commandSuffix = $portVersion
	kmk_sed$commandSuffix = $portVersion
	kmk_sleep$commandSuffix = $portVersion
	kmk_test$commandSuffix = $portVersion
	kmk_time$commandSuffix = $portVersion
	kObjCache$commandSuffix = $portVersion
	"
REQUIRES="
	haiku$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
BUILD_PREREQUIRES="
	cmd:aclocal
	cmd:autopoint
	cmd:autoreconf
	cmd:find
	cmd:flex
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:make
	cmd:makeinfo
	cmd:tar
	cmd:yacc
	"

# Global variables
export NIX_INSTALL_DIR=$commandBinDir
export MY_INST_DATA=$dataDir
export MY_INST_DOC=$docDir

archpath=x86
if [ "$targetArchitecture" = x86_64 ]; then
	archpath=amd64
fi

PATCH()
{
	sed -i 's/AM_CONFIG_HEADER/AC_CONFIG_HEADERS/g' src/sed/configure.ac
}

BUILD()
{
	rm -rf out || true
	kBuild/env.sh --full make -f bootstrap.gmk
}

INSTALL()
{
	kBuild/env.sh --full-with-bin kmk
	cp -R out/haiku.${archpath}/release/packages/${portVersionedName} $prefix
}
