From 2e6fb7b833c90ddd940683ca1a5ab5c22f20923f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fran=C3=A7ois=20Revol?= <revol@free.fr>
Date: Tue, 22 Jul 2014 23:57:16 +0200
Subject: [PATCH 1/3] Fix SIGWINCH test to include <signal.h>

Instead of <sys/signal.h> which is not part of POSIX.

diff --git a/aclocal.m4 b/aclocal.m4
index e9e4a81..1d30cb8 100644
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -4911,7 +4911,7 @@ AC_DEFUN([CF_SIGWINCH],
 AC_CACHE_CHECK(if SIGWINCH is defined,cf_cv_define_sigwinch,[
 	AC_TRY_COMPILE([
 #include <sys/types.h>
-#include <sys/signal.h>
+#include <signal.h>
 ],[int x = SIGWINCH],
 	[cf_cv_define_sigwinch=yes],
 	[AC_TRY_COMPILE([
@@ -4919,7 +4919,7 @@ AC_CACHE_CHECK(if SIGWINCH is defined,cf_cv_define_sigwinch,[
 #undef _POSIX_SOURCE
 #undef _POSIX_C_SOURCE
 #include <sys/types.h>
-#include <sys/signal.h>
+#include <signal.h>
 ],[int x = SIGWINCH],
 	[cf_cv_define_sigwinch=maybe],
 	[cf_cv_define_sigwinch=no])
@@ -4937,7 +4937,7 @@ do
 #undef _POSIX_SOURCE
 #undef _POSIX_C_SOURCE
 #include <sys/types.h>
-#include <sys/signal.h>
+#include <signal.h>
 ],[
 #if SIGWINCH != $cf_sigwinch
 make an error
-- 
2.2.2


From 728ce504b6deb51caa3ef36ea384f5803c7c350a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fran=C3=A7ois=20Revol?= <revol@free.fr>
Date: Wed, 23 Jul 2014 00:15:05 +0200
Subject: [PATCH 2/3] Fix calling getpwdnam without including the header

pwd.h is only included on HAVE_UTMP,
but Haiku has pwd.h but no utmp.

diff --git a/config.hin b/config.hin
index bc2123f..fea934c 100644
--- a/config.hin
+++ b/config.hin
@@ -120,6 +120,7 @@
 #undef HAVE_READDIR
 #undef HAVE_RESIZETERM
 #undef HAVE_RESOLV_H
+#undef HAVE_PWD_H
 #undef HAVE_SETENV		/* AM_GNU_GETTEXT */
 #undef HAVE_SETLOCALE
 #undef HAVE_SETUID
diff --git a/configure.in b/configure.in
index 610fa14..8fd6ed8 100644
--- a/configure.in
+++ b/configure.in
@@ -751,6 +751,7 @@ AC_CHECK_HEADERS( \
 	arpa/inet.h \
 	fcntl.h \
 	limits.h \
+	pwd.h \
 	stdlib.h \
 	string.h \
 	sys/fcntl.h \
diff --git a/src/LYUtils.c b/src/LYUtils.c
index b47779e..7fecbc3 100644
--- a/src/LYUtils.c
+++ b/src/LYUtils.c
@@ -101,8 +101,11 @@ extern int kbhit(void);		/* FIXME: use conio.h */
 #include <lib$routines.h>
 #endif /* VMS */
 
-#ifdef HAVE_UTMP
+#ifdef HAVE_PWD_H
 #include <pwd.h>
+#endif
+
+#ifdef HAVE_UTMP
 #ifdef UTMPX_FOR_UTMP
 #include <utmpx.h>
 #define utmp utmpx
-- 
2.2.2


From 7325373c7c9bd8bf88bd6dbe3b59d87e72b3dd72 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fran=C3=A7ois=20Revol?= <revol@free.fr>
Date: Wed, 23 Jul 2014 00:18:13 +0200
Subject: [PATCH 3/3] Force patching configure itself

It seems lynx requires its own flavor of autoconf,
with things like AC_DIVERT_HELP.
We try to avoid having to patch autoconf just for this.

diff --git a/configure b/configure
index d8468ba..678f92a 100755
--- a/configure
+++ b/configure
@@ -10183,7 +10183,7 @@ else
 #include "confdefs.h"
 
 #include <sys/types.h>
-#include <sys/signal.h>
+#include <signal.h>
 
 int
 main ()
@@ -10217,7 +10217,7 @@ cat >conftest.$ac_ext <<_ACEOF
 #undef _POSIX_SOURCE
 #undef _POSIX_C_SOURCE
 #include <sys/types.h>
-#include <sys/signal.h>
+#include <signal.h>
 
 int
 main ()
@@ -10273,7 +10273,7 @@ do
 #undef _POSIX_SOURCE
 #undef _POSIX_C_SOURCE
 #include <sys/types.h>
-#include <sys/signal.h>
+#include <signal.h>
 
 int
 main ()
@@ -26699,6 +26699,7 @@ for ac_header in \
 	arpa/inet.h \
 	fcntl.h \
 	limits.h \
+	pwd.h \
 	stdlib.h \
 	string.h \
 	sys/fcntl.h \
-- 
2.2.2


From b698f2218b2e8faf0aa7c2c230df634aa3a3176a Mon Sep 17 00:00:00 2001
From: fbrosson <fbrosson@localhost>
Date: Mon, 6 Jun 2016 00:19:19 +0000
Subject: use relative symlinks when installing COPYING and COPYHEADER.


diff --git a/configure b/configure
index 678f92a..87df4dd 100755
--- a/configure
+++ b/configure
@@ -40,14 +40,14 @@ fi
 
 rm -f conf$$ conf$$.exe conf$$.file
 echo >conf$$.file
-if ln -s conf$$.file conf$$ 2>/dev/null; then
+if ln -sr conf$$.file conf$$ 2>/dev/null; then
   # We could just check for DJGPP; but this test a) works b) is more generic
   # and c) will remain valid once DJGPP supports symlinks (DJGPP 2.04).
   if test -f conf$$.exe; then
     # Don't use ln at all; we don't have any links
     as_ln_s='cp -p'
   else
-    as_ln_s='ln -s'
+    as_ln_s='ln -sr'
   fi
 elif ln conf$$.file conf$$ 2>/dev/null; then
   as_ln_s=ln
@@ -44338,14 +44338,14 @@ fi
 
 rm -f conf$$ conf$$.exe conf$$.file
 echo >conf$$.file
-if ln -s conf$$.file conf$$ 2>/dev/null; then
+if ln -sr conf$$.file conf$$ 2>/dev/null; then
   # We could just check for DJGPP; but this test a) works b) is more generic
   # and c) will remain valid once DJGPP supports symlinks (DJGPP 2.04).
   if test -f conf$$.exe; then
     # Don't use ln at all; we don't have any links
     as_ln_s='cp -p'
   else
-    as_ln_s='ln -s'
+    as_ln_s='ln -sr'
   fi
 elif ln conf$$.file conf$$ 2>/dev/null; then
   as_ln_s=ln
diff --git a/makefile.in b/makefile.in
index c434b62..9b5d17d 100644
--- a/makefile.in
+++ b/makefile.in
@@ -336,7 +336,7 @@ install-doc : $(DOCDIR) $(HELPDIR)
 	$(SHELL) -c 'for name in COPYING COPYHEADER; do \
 		cd $(HELPDIR) && rm -f $$name ;\
 		r= ;\
-		test "$(LN_S)" = "ln -s" || r=`echo $(helpdir)|sed -e "s%[^/]\+%..%g" -e "s%^.%%"`; \
+		test "$(LN_S)" = "ln -sr" || r=`echo $(helpdir)|sed -e "s%[^/]\+%..%g" -e "s%^.%%"`; \
 		cd $(HELPDIR) && ( $(LN_S) $$r$(docdir)/$$name . || cp $(DOCDIR)/$$name . );\
 		done'
 	-$(SHELL) -c 'case `id|sed -e "s/(.*//"` in uid=0) chown -R root $(DOCDIR);; esac'
-- 
2.7.0

