SUMMARY="Portable and retargetable assembler"
DESCRIPTION="vasm is a portable and retargetable assembler to create linkable \
objects in various formats or absolute code. Multiple CPU-, syntax and \
output-modules can be selected.

Many common directives/pseudo-opcodes are supported (depending on the syntax \
module) as well as CPU-specific extensions.

The assembler supports optimizations (e.g. choosing the shortest possible \
branch instruction or addressing mode) and relaxations (e.g. converting a \
branch to an absolute jump when necessary).

Most syntax modules support macros, include directives, repetitions, \
conditional assembly and local symbols.

Currently the following CPUs are officially supported by vasm:
* M680x0 family (including M6888x, M68851 and CPU32)
* ColdFire family (all models of V2, V3, V4, V4e)
* 80x86 family (IA32 8/16/32 bit, using MIT-syntax)
* PowerPC family (POWER, 40x, 6xx, 7xx, 7xxx, 860, e300)
* ARM (architecture ARMv1 to ARMv4, including THUMB mode)
* Jaguar RISC (GPU and DSP instruction sets)
* TR3200 (virtual CPU from 0x10c)
* Z80 family (Z80, 8080, GBZ80, 64180, RCM2/3/4k)
* C16x/ST10
* 6502 family
* 6800 family (6800, 68HC11)

These syntax flavours are supported:
* Standard MIT (GNU-as style) syntax
* Motorola/Freescale 68k syntax (Devpac compatible)
* Atari MadMac syntax (6502, 68k, Jaguar)
* Old 8-bit style syntax

Supported output file formats:
* ELF (M68k, PowerPC, i386, ARM and JRISC)
* a.out (M68k and i386)
* Amiga hunk format (M68k)
* TOS executable format (M68k)
* EHF extended hunk format (PowerPC)
* Raw, binary output (all)
* VOBJ proprietary versatile object format (all)
* Test, debugging output (all)"
REVISION="1"
ARCHITECTURES="x86_gcc2"
HOMEPAGE="http://sun.hasenbraten.de/vasm/"
COPYRIGHT="2002-2015 Volker Barthelmann"
LICENSE="vasm"

SOURCE_URI="http://sun.hasenbraten.de/vasm/release/vasm.tar.gz"
CHECKSUM_SHA256="6ff9d97ae1593032c8030f8ef59bf85dda4c6158f067dad7504c816e33416658"
SOURCE_DIR="vasm"

PROVIDES="
	vasm = $portVersion
	cmd:vasmz80_oldstyle
"

REQUIRES="
	haiku
"

BUILD_REQUIRES="
	haiku_devel
"

BUILD_PREREQUIRES="
	cmd:gcc
	cmd:make
"

BUILD()
{
	make -f Makefile.Haiku $jobArgs CPU=z80 SYNTAX=oldstyle
}

INSTALL()
{
	mkdir $binDir
	cp vasmz80_oldstyle $binDir
}
