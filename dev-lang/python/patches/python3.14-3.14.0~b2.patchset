From 4975f27b26de8f77cbe6a2ad1fe956b2bf5bacd8 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Sun, 8 Oct 2023 01:02:25 -0300
Subject: initial Haiku patch

Based on the patch from Jerome Duval, modified to make it apply cleanly
over 3.12's sources.

Parts of that original patch were split into specific commit/patches.

diff --git a/Include/pyport.h b/Include/pyport.h
index 3eac119..1e5df7e 100644
--- a/Include/pyport.h
+++ b/Include/pyport.h
@@ -535,7 +535,7 @@ extern "C" {
 #  define _Py_FORCE_UTF8_LOCALE
 #endif
 
-#if defined(_Py_FORCE_UTF8_LOCALE) || defined(__APPLE__)
+#if defined(_Py_FORCE_UTF8_LOCALE) || defined(__APPLE__) || defined(__HAIKU__)
    // Use UTF-8 as the filesystem encoding.
    // See PyUnicode_DecodeFSDefaultAndSize(), PyUnicode_EncodeFSDefault(),
    // Py_DecodeLocale() and Py_EncodeLocale().
diff --git a/Makefile.pre.in b/Makefile.pre.in
index b5703fb..f7dfa7a 100644
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -156,7 +156,7 @@ BINDIR=		@bindir@
 LIBDIR=		@libdir@
 MANDIR=		@mandir@
 INCLUDEDIR=	@includedir@
-CONFINCLUDEDIR=	$(exec_prefix)/include
+CONFINCLUDEDIR=	$(INCLUDEDIR)
 PLATLIBDIR=	@PLATLIBDIR@
 SCRIPTDIR=	$(prefix)/$(PLATLIBDIR)
 # executable name for shebangs
diff --git a/Modules/resource.c b/Modules/resource.c
index 3fe18e7..d0e1872 100644
--- a/Modules/resource.c
+++ b/Modules/resource.c
@@ -126,6 +126,7 @@ resource_getrusage_impl(PyObject *module, int who)
                     PyFloat_FromDouble(doubletime(ru.ru_utime)));
     PyStructSequence_SetItem(result, 1,
                     PyFloat_FromDouble(doubletime(ru.ru_stime)));
+#ifndef __HAIKU__
     PyStructSequence_SetItem(result, 2, PyLong_FromLong(ru.ru_maxrss));
     PyStructSequence_SetItem(result, 3, PyLong_FromLong(ru.ru_ixrss));
     PyStructSequence_SetItem(result, 4, PyLong_FromLong(ru.ru_idrss));
@@ -140,6 +141,22 @@ resource_getrusage_impl(PyObject *module, int who)
     PyStructSequence_SetItem(result, 13, PyLong_FromLong(ru.ru_nsignals));
     PyStructSequence_SetItem(result, 14, PyLong_FromLong(ru.ru_nvcsw));
     PyStructSequence_SetItem(result, 15, PyLong_FromLong(ru.ru_nivcsw));
+#else
+    PyStructSequence_SetItem(result, 2, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 3, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 4, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 5, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 6, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 7, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 8, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 9, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 10, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 11, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 12, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 13, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 14, PyLong_FromLong(0));
+    PyStructSequence_SetItem(result, 15, PyLong_FromLong(0));
+#endif
 
     if (PyErr_Occurred()) {
         Py_DECREF(result);
@@ -387,19 +404,19 @@ resource_exec(PyObject *module)
     }
 
     /* insert constants */
-#ifdef RLIMIT_CPU
+#if !defined(__HAIKU__) && defined(RLIMIT_CPU)
     ADD_INT(module, RLIMIT_CPU);
 #endif
 
-#ifdef RLIMIT_FSIZE
+#if !defined(__HAIKU__) && defined(RLIMIT_FSIZE)
     ADD_INT(module, RLIMIT_FSIZE);
 #endif
 
-#ifdef RLIMIT_DATA
+#if !defined(__HAIKU__) && defined(RLIMIT_DATA)
     ADD_INT(module, RLIMIT_DATA);
 #endif
 
-#ifdef RLIMIT_STACK
+#if !defined(__HAIKU__) && defined(RLIMIT_STACK)
     ADD_INT(module, RLIMIT_STACK);
 #endif
 
@@ -411,31 +428,31 @@ resource_exec(PyObject *module)
     ADD_INT(module, RLIMIT_NOFILE);
 #endif
 
-#ifdef RLIMIT_OFILE
+#if !defined(__HAIKU__) && defined(RLIMIT_OFILE)
     ADD_INT(module, RLIMIT_OFILE);
 #endif
 
-#ifdef RLIMIT_VMEM
+#if !defined(__HAIKU__) && defined(RLIMIT_VMEM)
     ADD_INT(module, RLIMIT_VMEM);
 #endif
 
-#ifdef RLIMIT_AS
+#if !defined(__HAIKU__) && defined(RLIMIT_AS)
     ADD_INT(module, RLIMIT_AS);
 #endif
 
-#ifdef RLIMIT_RSS
+#if !defined(__HAIKU__) && defined(RLIMIT_RSS)
     ADD_INT(module, RLIMIT_RSS);
 #endif
 
-#ifdef RLIMIT_NPROC
+#if !defined(__HAIKU__) && defined(RLIMIT_NPROC)
     ADD_INT(module, RLIMIT_NPROC);
 #endif
 
-#ifdef RLIMIT_MEMLOCK
+#if !defined(__HAIKU__) && defined(RLIMIT_MEMLOCK)
     ADD_INT(module, RLIMIT_MEMLOCK);
 #endif
 
-#ifdef RLIMIT_SBSIZE
+#if !defined(__HAIKU__) && defined(RLIMIT_SBSIZE)
     ADD_INT(module, RLIMIT_SBSIZE);
 #endif
 
diff --git a/Modules/socketmodule.h b/Modules/socketmodule.h
index 63624d5..3692640 100644
--- a/Modules/socketmodule.h
+++ b/Modules/socketmodule.h
@@ -113,6 +113,10 @@ typedef int socklen_t;
 #  undef AF_QIPCRTR
 #endif
 
+#if defined(__HAIKU__)
+#undef HAVE_BLUETOOTH_BLUETOOTH_H
+#endif
+
 #ifdef HAVE_BLUETOOTH_BLUETOOTH_H
 #include <bluetooth/bluetooth.h>
 #include <bluetooth/rfcomm.h>
diff --git a/configure.ac b/configure.ac
index cf25148..8d2e08b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1584,6 +1584,16 @@ if test $enable_shared = "yes"; then
         PY3LIBRARY=libpython3.so
       fi
       ;;
+    Haiku*)
+      LDLIBRARY='libpython$(LDVERSION).so'
+      BLDLIBRARY='-L. -lpython$(LDVERSION)'
+      RUNSHARED=LIBRARY_PATH=`pwd`${LIBRARY_PATH:+:${LIBRARY_PATH}}
+      INSTSONAME="$LDLIBRARY".$SOVERSION
+      if test "$with_pydebug" != yes
+          then
+          PY3LIBRARY=libpython3.so
+      fi
+	  ;;
     hp*|HP*)
       case `uname -m` in
         ia64)
@@ -1701,6 +1711,7 @@ AC_PROG_MKDIR_P
 AC_SUBST([LN])
 if test -z "$LN" ; then
 	case $ac_sys_system in
+		Haiku*) LN="ln -s";;
 		CYGWIN*) LN="ln -s";;
 		*) LN=ln;;
 	esac
@@ -3592,7 +3603,7 @@ then
 	    LINKFORSHARED="-Wl,-E -Wl,+s";;
 #	    LINKFORSHARED="-Wl,-E -Wl,+s -Wl,+b\$(BINLIBDEST)/lib-dynload";;
 	Linux-android*) LINKFORSHARED="-pie -Xlinker -export-dynamic";;
-	Linux*|GNU*) LINKFORSHARED="-Xlinker -export-dynamic";;
+	Linux*|GNU*|Haiku*) LINKFORSHARED="-Xlinker -export-dynamic";;
 	# -u libsys_s pulls in all symbols in libsys
 	Darwin/*|iOS/*)
 		LINKFORSHARED="$extra_undefs -framework CoreFoundation"
@@ -5963,6 +5974,7 @@ AC_CHECK_FUNC([__fpu_control],
 AC_SUBST([LIBM])
 case $ac_sys_system in
 Darwin) ;;
+Haiku) ;;
 *) LIBM=-lm
 esac
 AC_MSG_CHECKING([for --with-libm=STRING])
-- 
2.48.1


From d53308e69eb7fe75a819d3fe88ae6ce235e9a5cc Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sun, 16 Apr 2017 10:05:42 +0200
Subject: fix for negative errnos


diff --git a/Lib/subprocess.py b/Lib/subprocess.py
index 54c2eb5..1fa840e 100644
--- a/Lib/subprocess.py
+++ b/Lib/subprocess.py
@@ -1955,6 +1955,8 @@ class Popen:
                         SubprocessError)
                 if issubclass(child_exception_type, OSError) and hex_errno:
                     errno_num = int(hex_errno, 16)
+                    if sys.platform.startswith('haiku'):
+                        errno_num = -errno_num;
                     if err_msg == "noexec:chdir":
                         err_msg = ""
                         # The error must be from chdir(cwd).
diff --git a/Modules/_posixsubprocess.c b/Modules/_posixsubprocess.c
index b542f86..a996ebf 100644
--- a/Modules/_posixsubprocess.c
+++ b/Modules/_posixsubprocess.c
@@ -843,6 +843,10 @@ error:
         char *cur;
         _Py_write_noraise(errpipe_write, "OSError:", 8);
         cur = hex_errno + sizeof(hex_errno);
+#ifdef __HAIKU__
+        if (saved_errno < 0)
+            saved_errno = -saved_errno;
+#endif
         while (saved_errno != 0 && cur != hex_errno) {
             *--cur = Py_hexdigits[saved_errno % 16];
             saved_errno /= 16;
-- 
2.48.1


From 467523d7cdb385ea7b9580ae71ee01aef10b438f Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Sun, 8 Oct 2023 20:06:31 -0300
Subject: Implement CTypes's find_library for Haiku

This combines:
 - the original patch by Philippe Houdoin <philippe.houdoin@gmail.com>
 - A slight variation of Adrien Destugues' fix for x86_gcc2.

diff --git a/Lib/ctypes/util.py b/Lib/ctypes/util.py
index 9950491..fefae29 100644
--- a/Lib/ctypes/util.py
+++ b/Lib/ctypes/util.py
@@ -1,4 +1,5 @@
 import os
+import platform
 import shutil
 import subprocess
 import sys
@@ -352,6 +353,60 @@ elif os.name == "posix":
         def find_library(name, is64 = False):
             return _get_soname(_findLib_crle(name, is64) or _findLib_gcc(name))
 
+    elif sys.platform.startswith("haiku"):
+
+        def _num_version(libname):
+            # "libxyz.so.MAJOR.MINOR" => [ MAJOR, MINOR ]
+            parts = libname.split('.')
+            nums = []
+            try:
+                while parts:
+                    nums.insert(0, int(parts.pop()))
+            except ValueError:
+                pass
+            return nums or [sys.maxint]
+
+        def find_library(name):
+            if name in ('c', 'm'):
+                return find_library('root')
+            for directory in os.environ['LIBRARY_PATH'].split(os.pathsep):
+                if directory.startswith("%A/"):
+                    directory = directory.replace('%A',
+                        os.path.dirname(os.path.abspath(sys.argv[0] or os.getcwd())))
+
+                # Are we on x86 32 bits?:
+                if platform.machine() == 'BePC':
+                    directory = os.path.join(directory, "x86")
+
+                if not os.path.isdir(directory):
+                    continue
+
+                # try direct match
+                fname = os.path.join(directory, name)
+                if os.path.isfile(fname):
+                    return fname
+
+                fname = os.path.join(directory, 'lib%s.so' % name)
+                if os.path.isfile(fname):
+                    return fname
+
+                # no exact matching in this directroy
+                # collect versioned candidates, if any
+                candidates = []
+                pattern = re.compile(r'lib%s\.so\.\S+' % re.escape(name))
+                for entry in os.listdir(directory):
+                    if not os.path.isfile(os.path.join(directory, entry)):
+                        continue
+
+                    if re.match(pattern, entry):
+                        candidates.append(os.path.join(directory, entry))
+
+                if candidates:
+                    # return latest version found
+                    candidates.sort(key=_num_version)
+                    return candidates[-1]
+
+            return None
     else:
 
         def _findSoname_ldconfig(name):
@@ -503,6 +558,12 @@ def test():
             print(f"crypt\t:: {cdll.LoadLibrary(find_library('crypt'))}")
             print(f"crypto\t:: {find_library('crypto')}")
             print(f"crypto\t:: {cdll.LoadLibrary(find_library('crypto'))}")
+        elif sys.platform.startswith("haiku"):
+            print(find_library("libbz2.so.1.0"))
+            print(find_library("tracker"))
+            print(find_library("media"))
+            print(cdll.LoadLibrary(find_library("tracker")))
+            print(cdll.LoadLibrary("libmedia.so"))
         else:
             print(cdll.LoadLibrary("libm.so"))
             print(cdll.LoadLibrary("libcrypt.so"))
-- 
2.48.1


From b1b31c12baf7f2134d2ca30d16a7da0ee0e0a80e Mon Sep 17 00:00:00 2001
From: Philipp Wolfer <phil@parolu.io>
Date: Mon, 23 Sep 2019 09:14:58 +0200
Subject: webbrowser: Support for default browsers on Haiku


diff --git a/Lib/webbrowser.py b/Lib/webbrowser.py
index f2e2394..b937321 100644
--- a/Lib/webbrowser.py
+++ b/Lib/webbrowser.py
@@ -495,6 +495,12 @@ def register_standard_browsers():
         # SerenityOS webbrowser, simply called "Browser".
         register("Browser", None, BackgroundBrowser("Browser"))
 
+    if sys.platform[:5] == "haiku":
+        # First try to use the default configured browser
+        register("haiku-default", None, GenericBrowser("open"))
+        # Fall back to WebPositive as the standard browser of Haiku
+        register("webpositive", None, BackgroundBrowser("WebPositive"))
+
     if sys.platform[:3] == "win":
         # First try to use the default Windows browser
         register("windows-default", WindowsDefault)
-- 
2.48.1


From 8558ec800b69ad63cdfe5794e91ed332895a980e Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Fri, 4 Oct 2019 22:02:35 +0200
Subject: since 3.8, don't reinit locks on fork.


diff --git a/Lib/logging/__init__.py b/Lib/logging/__init__.py
index 357d127..009fc95 100644
--- a/Lib/logging/__init__.py
+++ b/Lib/logging/__init__.py
@@ -253,7 +253,7 @@ def _afterFork():
 
 # Prevent a held logging lock from blocking a child from logging.
 
-if not hasattr(os, 'register_at_fork'):  # Windows and friends.
+if sys.platform.startswith('haiku') or not hasattr(os, 'register_at_fork'):  # Windows and friends.
     def _register_at_fork_reinit_lock(instance):
         pass  # no-op when os.register_at_fork does not exist.
 else:
-- 
2.48.1


From 6bc88b0ccc74094226ffcb664e10e9a398915e04 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Fri, 15 May 2020 15:20:57 +0200
Subject: handle errors returned by internal_connect()

upstream bug #40628 by Ryan C. Gordon

diff --git a/Modules/socketmodule.c b/Modules/socketmodule.c
index 92c9aa8..82cdf0e 100644
--- a/Modules/socketmodule.c
+++ b/Modules/socketmodule.c
@@ -3721,7 +3721,7 @@ sock_connect(PyObject *self, PyObject *addro)
     }
 
     res = internal_connect(s, SAS2SA(&addrbuf), addrlen, 1);
-    if (res < 0) {
+    if (res == -1) {
         assert(PyErr_Occurred());
         return NULL;
     }
-- 
2.48.1


From e42f5fc98f2108b8498581d982641f97741948ca Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Mon, 19 Oct 2020 18:03:09 +0200
Subject: ttyname_r can use MAXPATHLEN


diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index 922694f..93a2658 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -3420,11 +3420,14 @@ static PyObject *
 os_ttyname_impl(PyObject *module, int fd)
 /*[clinic end generated code: output=c424d2e9d1cd636a input=9ff5a58b08115c55]*/
 {
-
+#ifndef __HAIKU__
     long size = sysconf(_SC_TTY_NAME_MAX);
     if (size == -1) {
         return posix_error();
     }
+#else
+    long size = MAXPATHLEN;
+#endif
     char *buffer = (char *)PyMem_RawMalloc(size);
     if (buffer == NULL) {
         return PyErr_NoMemory();
-- 
2.48.1


From 5f87b4cfa44e048841ae381dac79d1208c00e1bf Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Mon, 24 Oct 2022 20:04:10 -0300
Subject: Lib/test: require the "largefile" usage flag for I/O heavy tests.

The same is done for Windows and macOS already.

This avoids needing several GBs of storage to run the tests
(unless the "largefile" resource usage flag is enabled).

diff --git a/Lib/test/test_io.py b/Lib/test/test_io.py
index 168e66c..d5c2ddf 100644
--- a/Lib/test/test_io.py
+++ b/Lib/test/test_io.py
@@ -652,7 +652,7 @@ class IOTest(unittest.TestCase):
         # On Windows and Apple platforms this test consumes large resources; It
         # takes a long time to build the >2 GiB file and takes >2 GiB of disk
         # space therefore the resource must be enabled to run this test.
-        if sys.platform[:3] == 'win' or is_apple:
+        if sys.platform[:3] == 'win' or is_apple or sys.platform[:5] == 'haiku':
             support.requires(
                 'largefile',
                 'test requires %s bytes and a long time to run' % self.LARGE)
diff --git a/Lib/test/test_largefile.py b/Lib/test/test_largefile.py
index 41f7b70..e4830de 100644
--- a/Lib/test/test_largefile.py
+++ b/Lib/test/test_largefile.py
@@ -273,7 +273,7 @@ def setUpModule():
     # takes a long time to build the >2 GiB file and takes >2 GiB of disk
     # space therefore the resource must be enabled to run this test.
     # If not, nothing after this line stanza will be executed.
-    if sys.platform[:3] == 'win' or sys.platform == 'darwin':
+    if sys.platform[:3] == 'win' or sys.platform == 'darwin' or sys.platform[:5] == 'haiku':
         requires('largefile',
                  'test requires %s bytes and a long time to run' % str(size))
     else:
diff --git a/Lib/test/test_mmap.py b/Lib/test/test_mmap.py
index fd4197b..662954d 100644
--- a/Lib/test/test_mmap.py
+++ b/Lib/test/test_mmap.py
@@ -1146,7 +1146,7 @@ class LargeMmapTests(unittest.TestCase):
         unlink(TESTFN)
 
     def _make_test_file(self, num_zeroes, tail):
-        if sys.platform[:3] == 'win' or is_apple:
+        if sys.platform[:3] == 'win' or is_apple or sys.platform[:5] == 'haiku':
             requires('largefile',
                 'test requires %s bytes and a long time to run' % str(0x180000000))
         f = open(TESTFN, 'w+b')
-- 
2.48.1


From 763b072621be038676d1ae05e61a6c7ccecc99c9 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Sat, 27 Jul 2024 04:51:52 -0300
Subject: _getuserbase(), getsitepackages(), and INSTALL_SCHEMES for Haiku.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This combines (at least parts of) previous "commits" on older ".patchset"s:

* Initial Haiku patch.
* default schemes for Haiku

from Jérôme Duval

* syncronize both _getuserbase() copies on site.py and sysconfig.py.
* Add missing 'platinclude' to sysconfig's _INSTALL_SCHEMES.
* Adjust test_sysconfig.test_get_scheme_names for Haiku.

by me, plus:

* new changes to allow Python to find modules installed via 'pkgman -H'.
* Attempt to support the "venv" install scheme (untested).

The idea was to have all _getuserbase()/INSTALL_SCHEMES related changes in "one place".

diff --git a/Lib/site.py b/Lib/site.py
index f932719..c1fe2a4 100644
--- a/Lib/site.py
+++ b/Lib/site.py
@@ -313,6 +313,14 @@ def _getuserbase():
         return joinuser("~", "Library", sys._framework,
                         "%d.%d" % sys.version_info[:2])
 
+    if sys.platform.startswith('haiku'):
+        try:
+            import subprocess
+            return subprocess.check_output(
+                ['finddir', 'B_USER_NONPACKAGED_DIRECTORY']).rstrip().decode('utf-8')
+        except:
+            pass
+
     return joinuser("~", ".local")
 
 
@@ -405,7 +413,31 @@ def getsitepackages(prefixes=None):
             abi_thread = 't'
         else:
             abi_thread = ''
-        if os.sep == '/':
+        if sys.platform.startswith('haiku'):
+            # Locations under /system/
+            sitepackages.append(os.path.join(prefix, "non-packaged", "lib",
+                                            f"{implementation}{ver[0]}.{ver[1]}{abi_thread}",
+                                            "site-packages"))
+            sitepackages.append(os.path.join(prefix, "lib",
+                                            f"{implementation}{ver[0]}.{ver[1]}{abi_thread}",
+                                            "vendor-packages"))
+
+            # For .hpkg installed under ~/config/ (pkgman install -H)
+            # ("pip install --user" uses ~/config/non-packaged/, and gets
+            # handled by the "haiku_user" install scheme.
+            try:
+                import subprocess
+                _home_prefix = subprocess.check_output(
+                    ['finddir', 'B_USER_CONFIG_DIRECTORY']).rstrip().decode('utf-8')
+            except:
+                # print("'finddir B_USER_CONFIG_DIRECTORY' failed.")
+                _home_prefix = None
+
+            if _home_prefix is not None:
+                sitepackages.append(os.path.join(_home_prefix, "lib",
+                                            f"{implementation}{ver[0]}.{ver[1]}{abi_thread}",
+                                            "vendor-packages"))
+        elif os.sep == '/':
             libdirs = [sys.platlibdir]
             if sys.platlibdir != "lib":
                 libdirs.append("lib")
diff --git a/Lib/sysconfig/__init__.py b/Lib/sysconfig/__init__.py
index f93b98d..8744f83 100644
--- a/Lib/sysconfig/__init__.py
+++ b/Lib/sysconfig/__init__.py
@@ -48,6 +48,36 @@ _INSTALL_SCHEMES = {
         'scripts': '{base}/bin',
         'data': '{base}',
         },
+     'haiku': {
+        'stdlib': '{installed_base}/lib/python{py_version_short}{abi_thread}',
+        'platstdlib': '{platbase}/lib/python{py_version_short}{abi_thread}',
+        'purelib': '{base}/non-packaged/lib/python{py_version_short}{abi_thread}/site-packages',
+        'platlib': '{platbase}/non-packaged/lib/python{py_version_short}{abi_thread}/site-packages',
+        'include': '{installed_base}/non-packaged/develop/headers/python{py_version_short}{abiflags}',
+        'platinclude': '{installed_platbase}/develop/headers/python{py_version_short}{abiflags}',
+        'scripts': '{base}/non-packaged/bin',
+        'data'   : '{base}/non-packaged',
+        },
+     'haiku_vendor': {
+        'stdlib': '{installed_base}/lib/python{py_version_short}{abi_thread}',
+        'platstdlib': '{platbase}/lib/python{py_version_short}{abi_thread}',
+        'purelib': '{base}/lib/python{py_version_short}{abi_thread}/vendor-packages',
+        'platlib': '{platbase}/lib/python{py_version_short}{abi_thread}/vendor-packages',
+        'include': '{installed_base}/develop/headers/python{py_version_short}{abiflags}',
+        'platinclude': '{installed_platbase}/develop/headers/python{py_version_short}{abiflags}',
+        'scripts': '{base}/bin',
+        'data'   : '{base}',
+        },
+     'haiku_home': {
+        'stdlib': '{installed_base}/lib/python{py_version_short}',
+        'platstdlib': '{base}/lib/python{py_version_short}',
+        'purelib': '{base}/lib/python{py_version_short}',
+        'platlib': '{base}/lib/python{py_version_short}',
+        'include': '{installed_base}/develop/headers/python{py_version_short}',
+        'platinclude': '{installed_base}/develop/headers/python{py_version_short}',
+        'scripts': '{base}/bin',
+        'data': '{base}',
+        },
     'nt': {
         'stdlib': '{installed_base}/Lib',
         'platstdlib': '{base}/Lib',
@@ -88,6 +118,16 @@ _INSTALL_SCHEMES = {
         'scripts': '{base}/bin',
         'data': '{base}',
         },
+    'haiku_venv': {
+        'stdlib': '{installed_base}/lib/python{py_version_short}{abi_thread}',
+        'platstdlib': '{platbase}/lib/python{py_version_short}{abi_thread}',
+        'purelib': '{base}/non-packaged/lib/python{py_version_short}{abi_thread}/site-packages',
+        'platlib': '{platbase}/non-packaged/lib/python{py_version_short}{abi_thread}/site-packages',
+        'include': '{installed_base}/non-packaged/develop/headers/python{py_version_short}{abiflags}',
+        'platinclude': '{installed_platbase}/develop/headers/python{py_version_short}{abiflags}',
+        'scripts': '{base}/non-packaged/bin',
+        'data'   : '{base}/non-packaged',
+        },
     'nt_venv': {
         'stdlib': '{installed_base}/Lib',
         'platstdlib': '{base}/Lib',
@@ -103,6 +143,8 @@ _INSTALL_SCHEMES = {
 # For the OS-native venv scheme, we essentially provide an alias:
 if os.name == 'nt':
     _INSTALL_SCHEMES['venv'] = _INSTALL_SCHEMES['nt_venv']
+elif sys.platform.startswith('haiku'):
+    _INSTALL_SCHEMES['venv'] = _INSTALL_SCHEMES['haiku_venv']
 else:
     _INSTALL_SCHEMES['venv'] = _INSTALL_SCHEMES['posix_venv']
 
@@ -133,6 +175,14 @@ def _getuserbase():
         return joinuser("~", "Library", sys._framework,
                         f"{sys.version_info[0]}.{sys.version_info[1]}")
 
+    if sys.platform.startswith('haiku'):
+        try:
+            import subprocess
+            return subprocess.check_output(
+                ['finddir', 'B_USER_NONPACKAGED_DIRECTORY']).rstrip().decode('utf-8')
+        except:
+            pass
+
     return joinuser("~", ".local")
 
 _HAS_USER_BASE = (_getuserbase() is not None)
@@ -158,6 +208,15 @@ if _HAS_USER_BASE:
             'scripts': '{userbase}/bin',
             'data': '{userbase}',
             },
+        'haiku_user': {
+            'stdlib': '{userbase}/lib/python{py_version_short}{abi_thread}',
+            'platstdlib': '{userbase}/lib/python{py_version_short}{abi_thread}',
+            'purelib': '{userbase}/lib/python{py_version_short}{abi_thread}/site-packages',
+            'platlib': '{userbase}/lib/python{py_version_short}{abi_thread}/site-packages',
+            'include': '{userbase}/develop/headers/python{py_version_short}{abi_thread}',
+            'scripts': '{userbase}/bin',
+            'data': '{userbase}',
+            },
         'osx_framework_user': {
             'stdlib': '{userbase}/lib/{implementation_lower}',
             'platstdlib': '{userbase}/lib/{implementation_lower}',
@@ -287,6 +346,18 @@ def _expand_vars(scheme, vars):
 
 
 def _get_preferred_schemes():
+    if sys.platform.startswith('haiku'):
+        if os.environ.get('HAIKU_USE_VENDOR_DIRECTORIES') == '1':
+            return {
+                'prefix': 'haiku_vendor',
+                'home': 'haiku_home',
+                'user': 'haiku_user',
+            }
+        return {
+            'prefix': 'haiku',
+            'home': 'haiku_home',
+            'user': 'haiku_user',
+        }
     if os.name == 'nt':
         return {
             'prefix': 'nt',
diff --git a/Lib/test/test_sysconfig.py b/Lib/test/test_sysconfig.py
index d30f69d..a3ec6fd 100644
--- a/Lib/test/test_sysconfig.py
+++ b/Lib/test/test_sysconfig.py
@@ -388,9 +388,10 @@ class TestSysConfig(unittest.TestCase, VirtualEnvironmentMixin):
         self.assertTrue(os.path.isfile(config_h), config_h)
 
     def test_get_scheme_names(self):
-        wanted = ['nt', 'posix_home', 'posix_prefix', 'posix_venv', 'nt_venv', 'venv']
+        wanted = ['nt', 'posix_home', 'posix_prefix', 'posix_venv', 'nt_venv', 'venv', 'haiku',
+            'haiku_home', 'haiku_vendor']
         if HAS_USER_BASE:
-            wanted.extend(['nt_user', 'osx_framework_user', 'posix_user'])
+            wanted.extend(['nt_user', 'osx_framework_user', 'posix_user', 'haiku_user'])
         self.assertEqual(get_scheme_names(), tuple(sorted(wanted)))
 
     @skip_unless_symlink
-- 
2.48.1


From e5265681fd7ff4714c07be9aa07b0cb1b6be1917 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Mon, 12 Feb 2024 08:39:38 -0300
Subject: Fix location of REPL's history file.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Adapted from previous patches by Jérôme Duval.

diff --git a/Lib/site.py b/Lib/site.py
index c1fe2a4..c304121 100644
--- a/Lib/site.py
+++ b/Lib/site.py
@@ -512,8 +512,18 @@ def gethistoryfile():
         history = os.environ.get("PYTHON_HISTORY")
         if history:
             return history
-    return os.path.join(os.path.expanduser('~'),
-        '.python_history')
+
+    import subprocess
+    try:
+        history = os.path.join(subprocess.check_output(
+                    ['finddir', 'B_USER_VAR_DIRECTORY']).rstrip().decode('utf-8'),
+                    'python', 'history')
+        if not os.path.exists(os.path.dirname(history)):
+            os.makedirs(os.path.dirname(history))
+    except subprocess.CalledProcessError:
+        history = os.path.join(os.path.expanduser('~'), '.python_history')
+
+    return history
 
 
 def enablerlcompleter():
-- 
2.48.1


From cf84571b89864597f8b46e306bea830471471ecb Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Sun, 10 Dec 2023 19:50:22 -0300
Subject: Miscellaneous "Lib/test/" fixes for Haiku.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

test_fileio.py fix from "initial Haiku patch" by Jérôme Duval.

diff --git a/Lib/test/datetimetester.py b/Lib/test/datetimetester.py
index 1b55125..0d7e135 100644
--- a/Lib/test/datetimetester.py
+++ b/Lib/test/datetimetester.py
@@ -6406,6 +6406,9 @@ def pairs(iterable):
 
 class ZoneInfo(tzinfo):
     zoneroot = '/usr/share/zoneinfo'
+    if sys.platform.startswith('haiku'):
+        zoneroot = '/system/data/zoneinfo'
+
     def __init__(self, ut, ti):
         """
 
diff --git a/Lib/test/test_fileio.py b/Lib/test/test_fileio.py
index 5a0f033..8e85ed4 100644
--- a/Lib/test/test_fileio.py
+++ b/Lib/test/test_fileio.py
@@ -544,6 +544,7 @@ class OtherFileTests:
                     self.assertEqual(f.writable(), True)
                     if sys.platform != "darwin" and \
                        'bsd' not in sys.platform and \
+                       'haiku' not in sys.platform and \
                        not sys.platform.startswith(('sunos', 'aix')):
                         # Somehow /dev/tty appears seekable on some BSDs
                         self.assertEqual(f.seekable(), False)
-- 
2.48.1


From 023a5988d67d158544c0800e96be4bee95fc0f0e Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Mon, 12 Feb 2024 10:50:34 -0300
Subject: Fix build on nightlies, following the addition of kqueue.

See HaikuPorts issue #10001.

diff --git a/Modules/selectmodule.c b/Modules/selectmodule.c
index d234d50..6e16247 100644
--- a/Modules/selectmodule.c
+++ b/Modules/selectmodule.c
@@ -2806,13 +2806,21 @@ _select_exec(PyObject *m)
 #ifdef EVFILT_SIGNAL
     ADD_INT_CONST("KQ_FILTER_SIGNAL", EVFILT_SIGNAL);
 #endif
+#ifdef EVFILT_TIMER
     ADD_INT_CONST("KQ_FILTER_TIMER", EVFILT_TIMER);
+#endif
 
     /* event flags */
     ADD_INT_CONST("KQ_EV_ADD", EV_ADD);
     ADD_INT_CONST("KQ_EV_DELETE", EV_DELETE);
+#ifdef EV_ENABLE
     ADD_INT_CONST("KQ_EV_ENABLE", EV_ENABLE);
+#else
+    ADD_INT_CONST("KQ_EV_ENABLE", 0); // "test_kqueue.py" assumes KQ_EV_ENABLE exists
+#endif
+#ifdef EV_DISABLE
     ADD_INT_CONST("KQ_EV_DISABLE", EV_DISABLE);
+#endif
     ADD_INT_CONST("KQ_EV_ONESHOT", EV_ONESHOT);
     ADD_INT_CONST("KQ_EV_CLEAR", EV_CLEAR);
 
@@ -2845,14 +2853,28 @@ _select_exec(PyObject *m)
     /* PROC filter flags  */
 #ifdef EVFILT_PROC
     ADD_INT_CONST("KQ_NOTE_EXIT", NOTE_EXIT);
+#ifdef NOTE_FORK
     ADD_INT_CONST("KQ_NOTE_FORK", NOTE_FORK);
+#endif
+#ifdef NOTE_EXEC
     ADD_INT_CONST("KQ_NOTE_EXEC", NOTE_EXEC);
+#endif
+#ifdef NOTE_PCTRLMASK
     ADD_INT_CONST("KQ_NOTE_PCTRLMASK", NOTE_PCTRLMASK);
+#endif
+#ifdef NOTE_PDATAMASK
     ADD_INT_CONST("KQ_NOTE_PDATAMASK", NOTE_PDATAMASK);
+#endif
 
+#ifdef NOTE_TRACK
     ADD_INT_CONST("KQ_NOTE_TRACK", NOTE_TRACK);
+#endif
+#ifdef NOTE_CHILD
     ADD_INT_CONST("KQ_NOTE_CHILD", NOTE_CHILD);
+#endif
+#ifdef NOTE_TRACKERR
     ADD_INT_CONST("KQ_NOTE_TRACKERR", NOTE_TRACKERR);
+#endif
 #endif
 
     /* NETDEV filter flags */
-- 
2.48.1


From 94bf86cc84d74d766b49cd8a877661f34c84a8e7 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Fri, 9 Aug 2024 13:38:28 -0300
Subject: fix test_utf8_mode.


diff --git a/Lib/test/test_utf8_mode.py b/Lib/test/test_utf8_mode.py
index f668810..a55a8e4 100644
--- a/Lib/test/test_utf8_mode.py
+++ b/Lib/test/test_utf8_mode.py
@@ -226,7 +226,7 @@ class UTF8ModeTests(unittest.TestCase):
             with self.subTest(LC_ALL=loc):
                 check('utf8', [arg_utf8], LC_ALL=loc)
 
-        if sys.platform == 'darwin' or support.is_android or VXWORKS:
+        if sys.platform == 'darwin' or support.is_android or VXWORKS or sys.platform[:5] == 'haiku':
             c_arg = arg_utf8
         elif sys.platform.startswith("aix"):
             c_arg = arg.decode('iso-8859-1')
-- 
2.48.1


From 6ee10c42ce61caaf0154a8c2b8db473695b65714 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Fri, 9 Aug 2024 14:35:04 -0300
Subject: Fix test_site.

test_site expects a specific set of modules to be imported.
By importing "subprocess" (for calling `finddir`) we end up breaking
that assumption.

Also, site.py should avoid costly imports to help startup times.

Hardcoding a few paths avoids having to import subprocess, that
causes many other subsequent imports.

Lib/site.py changes should eventually be merged with previous commits.
Leaving the changes here now for easier review.

diff --git a/Lib/site.py b/Lib/site.py
index c304121..4cf045e 100644
--- a/Lib/site.py
+++ b/Lib/site.py
@@ -314,12 +314,8 @@ def _getuserbase():
                         "%d.%d" % sys.version_info[:2])
 
     if sys.platform.startswith('haiku'):
-        try:
-            import subprocess
-            return subprocess.check_output(
-                ['finddir', 'B_USER_NONPACKAGED_DIRECTORY']).rstrip().decode('utf-8')
-        except:
-            pass
+        # 'B_USER_NONPACKAGED_DIRECTORY'
+        return joinuser("~", "config", "non-packaged")
 
     return joinuser("~", ".local")
 
@@ -425,18 +421,10 @@ def getsitepackages(prefixes=None):
             # For .hpkg installed under ~/config/ (pkgman install -H)
             # ("pip install --user" uses ~/config/non-packaged/, and gets
             # handled by the "haiku_user" install scheme.
-            try:
-                import subprocess
-                _home_prefix = subprocess.check_output(
-                    ['finddir', 'B_USER_CONFIG_DIRECTORY']).rstrip().decode('utf-8')
-            except:
-                # print("'finddir B_USER_CONFIG_DIRECTORY' failed.")
-                _home_prefix = None
-
-            if _home_prefix is not None:
-                sitepackages.append(os.path.join(_home_prefix, "lib",
-                                            f"{implementation}{ver[0]}.{ver[1]}{abi_thread}",
-                                            "vendor-packages"))
+            _home_prefix = os.path.expanduser(os.path.join("~", "config"))
+            sitepackages.append(os.path.join(_home_prefix, "lib",
+                                        f"{implementation}{ver[0]}.{ver[1]}{abi_thread}",
+                                        "vendor-packages"))
         elif os.sep == '/':
             libdirs = [sys.platlibdir]
             if sys.platlibdir != "lib":
diff --git a/Lib/test/test_site.py b/Lib/test/test_site.py
index d0e3294..1452e42 100644
--- a/Lib/test/test_site.py
+++ b/Lib/test/test_site.py
@@ -323,7 +323,21 @@ class HelperFunctionsTests(unittest.TestCase):
     def test_getsitepackages(self):
         site.PREFIXES = ['xoxo']
         dirs = site.getsitepackages()
-        if os.sep == '/':
+        if sys.platform[:5] == 'haiku':
+            self.assertEqual(len(dirs), 3) # site-packages + sys/user vendor-packages
+            wanted = os.path.join('xoxo', 'non-packaged', 'lib',
+                                  'python%d.%d' % sys.version_info[:2],
+                                  'site-packages')
+            self.assertEqual(dirs[0], wanted)
+            wanted = os.path.join('xoxo', sys.platlibdir,
+                                  'python%d.%d' % sys.version_info[:2],
+                                  'vendor-packages')
+            self.assertEqual(dirs[1], wanted)
+            wanted = os.path.join('xoxo', os.path.expanduser('~/config'), 'lib',
+                                  'python%d.%d' % sys.version_info[:2],
+                                  'vendor-packages')
+            self.assertEqual(dirs[2], wanted)
+        elif os.sep == '/':
             # OS X, Linux, FreeBSD, etc
             if sys.platlibdir != "lib":
                 self.assertEqual(len(dirs), 2)
-- 
2.48.1


From 66b231f7fb17cf4e094809351e2ab4fd6db8f1b5 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Fri, 9 Aug 2024 15:37:13 -0300
Subject: Fix test_sysconfig.


diff --git a/Lib/test/test_sysconfig.py b/Lib/test/test_sysconfig.py
index a3ec6fd..c6d5ef9 100644
--- a/Lib/test/test_sysconfig.py
+++ b/Lib/test/test_sysconfig.py
@@ -223,6 +223,19 @@ class TestSysConfig(unittest.TestCase, VirtualEnvironmentMixin):
                 sysconfig.get_path('purelib', scheme='venv'),
                 sysconfig.get_path('purelib', scheme='nt_venv')
             )
+        elif sys.platform[:5] == 'haiku':
+            self.assertEqual(
+                sysconfig.get_path('scripts', scheme='venv'),
+                sysconfig.get_path('scripts', scheme='haiku_venv')
+            )
+            self.assertEqual(
+                sysconfig.get_path('include', scheme='venv'),
+                sysconfig.get_path('include', scheme='haiku_venv')
+            )
+            self.assertEqual(
+                sysconfig.get_path('purelib', scheme='venv'),
+                sysconfig.get_path('purelib', scheme='haiku_venv')
+            )
         else:
             self.assertEqual(
                 sysconfig.get_path('scripts', scheme='venv'),
@@ -389,7 +402,7 @@ class TestSysConfig(unittest.TestCase, VirtualEnvironmentMixin):
 
     def test_get_scheme_names(self):
         wanted = ['nt', 'posix_home', 'posix_prefix', 'posix_venv', 'nt_venv', 'venv', 'haiku',
-            'haiku_home', 'haiku_vendor']
+            'haiku_home', 'haiku_vendor', 'haiku_venv']
         if HAS_USER_BASE:
             wanted.extend(['nt_user', 'osx_framework_user', 'posix_user', 'haiku_user'])
         self.assertEqual(get_scheme_names(), tuple(sorted(wanted)))
-- 
2.48.1


From 2d79590c8698dfc0fd5c672a6bc9381db4a1c640 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Sun, 29 Sep 2024 03:01:27 -0300
Subject: Partially fix test_compileall by skipping tests that need hardlink
 support.


diff --git a/Lib/test/support/os_helper.py b/Lib/test/support/os_helper.py
index 2c45fe2..b63467b 100644
--- a/Lib/test/support/os_helper.py
+++ b/Lib/test/support/os_helper.py
@@ -207,6 +207,8 @@ def can_hardlink():
         # Android blocks hard links using SELinux
         # (https://stackoverflow.com/q/32365690).
         _can_hardlink = hasattr(os, "link") and not support.is_android
+        if sys.platform[:5] == 'haiku':
+            _can_hardlink = False
     return _can_hardlink
 
 
diff --git a/Lib/test/test_compileall.py b/Lib/test/test_compileall.py
index 8384c18..d7e19ec 100644
--- a/Lib/test/test_compileall.py
+++ b/Lib/test/test_compileall.py
@@ -947,6 +947,7 @@ class CommandLineTestsBase:
         # only for more than one optimization level
         self.assertRunNotOK(self.directory, "-o 1", "--hardlink-dupes")
 
+    @os_helper.skip_unless_hardlink
     def test_hardlink(self):
         # 'a = 0' code produces the same bytecode for the 3 optimization
         # levels. All three .pyc files must have the same inode (hardlinks).
-- 
2.48.1


From b723491cb1d524f37953099facba6cb9f60f69e1 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Thu, 9 May 2024 15:16:26 -0300
Subject: Fix 3.13.0 build.

The change in Makefile.pre.in is to stop failing tests on the PGO stage
breaking the `--with-optimizations` builds (and to restore a sane timeout).

Previous Python versions had both the time out and the "|| true".

Some of the test run in that PGO stage sadly still fail on Haiku.

diff --git a/Makefile.pre.in b/Makefile.pre.in
index f7dfa7a..6583bf3 100644
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -856,7 +856,7 @@ profile-run-stamp:
 	$(MAKE) profile-gen-stamp
 	# Next, run the profile task to generate the profile information.
 	@ # FIXME: can't run for a cross build
-	$(LLVM_PROF_FILE) $(RUNSHARED) ./$(BUILDPYTHON) $(PROFILE_TASK)
+	$(LLVM_PROF_FILE) $(RUNSHARED) ./$(BUILDPYTHON) $(PROFILE_TASK) || true
 	$(LLVM_PROF_MERGER)
 	# Remove profile generation binary since we are done with it.
 	$(MAKE) clean-retain-profile
@@ -2227,7 +2227,7 @@ $(LIBRARY_OBJS) $(MODOBJS) Programs/python.o: $(PYTHON_HEADERS)
 TESTOPTS=	$(EXTRATESTOPTS)
 TESTPYTHON=	$(RUNSHARED) $(PYTHON_FOR_BUILD) $(TESTPYTHONOPTS)
 TESTRUNNER=	$(TESTPYTHON) -m test
-TESTTIMEOUT=
+TESTTIMEOUT= 1200
 
 # Remove "test_python_*" directories of previous failed test jobs.
 # Pass TESTOPTS options because it can contain --tempdir option.
diff --git a/Objects/mimalloc/prim/unix/prim.c b/Objects/mimalloc/prim/unix/prim.c
index 1598eba..88b94b6 100644
--- a/Objects/mimalloc/prim/unix/prim.c
+++ b/Objects/mimalloc/prim/unix/prim.c
@@ -49,6 +49,8 @@ terms of the MIT license. A copy of the license can be found in the file
   #include <sys/domainset.h>
   #endif
   #include <sys/sysctl.h>
+#elif defined(__HAIKU__)
+  #include <fcntl.h>
 #endif
 
 #if !defined(__HAIKU__) && !defined(__APPLE__) && !defined(__CYGWIN__) && !defined(_AIX) && !defined(__OpenBSD__) && !defined(__FreeBSD__) && !defined(__sun) && !defined(__NetBSD__)
-- 
2.48.1


From c69cb228cb2b98d5d8929c4df3f1dae7f0831de6 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Sat, 5 Oct 2024 07:32:17 -0300
Subject: Avoid forcing "-g" on LTO builds, unless Py_DEBUG is defined.


diff --git a/configure.ac b/configure.ac
index 8d2e08b..eaf419d 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2017,7 +2017,9 @@ if test "$Py_LTO" = 'true' ; then
   then
       # bpo-30345: Add -g to LDFLAGS when compiling with LTO
       # to get debug symbols.
-      LTOFLAGS="$LTOFLAGS -g"
+      if test "$Py_DEBUG" = 'true' ; then
+        LTOFLAGS="$LTOFLAGS -g"
+      fi
   fi
 
   CFLAGS_NODIST="$CFLAGS_NODIST ${LTOCFLAGS-$LTOFLAGS}"
-- 
2.48.1


From d474cd60f0195eb72653c466a3e88b2326100755 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Thu, 13 Feb 2025 13:30:03 -0300
Subject: Make sure we use 'spawn' on Haiku and not 'forkserver'.


diff --git a/Lib/multiprocessing/context.py b/Lib/multiprocessing/context.py
index 051d567..4f20b24 100644
--- a/Lib/multiprocessing/context.py
+++ b/Lib/multiprocessing/context.py
@@ -322,7 +322,7 @@ if sys.platform != 'win32':
     # bpo-33725: running arbitrary code after fork() is no longer reliable
     # on macOS since macOS 10.14 (Mojave). Use spawn by default instead.
     # gh-84559: We changed everyones default to a thread safeish one in 3.14.
-    if reduction.HAVE_SEND_HANDLE and sys.platform != 'darwin':
+    if reduction.HAVE_SEND_HANDLE and sys.platform != 'darwin' and sys.platform[:5] != 'haiku':
         _default_context = DefaultContext(_concrete_contexts['forkserver'])
     else:
         _default_context = DefaultContext(_concrete_contexts['spawn'])
-- 
2.48.1

