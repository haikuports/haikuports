From a41f7bcb6b5e11da2e3b7d3131ee24d3c0d0da05 Mon Sep 17 00:00:00 2001
From: Hugh Bellamy <hughbellars@gmail.com>
Date: Tue, 21 Mar 2017 18:54:39 +0700
Subject: Fix top of tree Clang compilation errors


diff --git a/lib/SIL/Projection.cpp b/lib/SIL/Projection.cpp
index fe46b37..00767df 100644
--- a/lib/SIL/Projection.cpp
+++ b/lib/SIL/Projection.cpp
@@ -905,7 +905,7 @@ processUsersOfValue(ProjectionTree &Tree,
     DEBUG(llvm::dbgs() << "        " << *User);
 
     // First try to create a Projection for User.
-    auto P = Projection::Projection(User);
+    auto P = Projection(User);
 
     // If we fail to create a projection, add User as a user to this node and
     // continue.
diff --git a/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp b/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp
index 09a13f2..1efd3b8 100644
--- a/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp
+++ b/lib/SILOptimizer/Transforms/SpeculativeDevirtualizer.cpp
@@ -488,7 +488,7 @@ static bool tryToSpeculateTarget(FullApplySite AI,
     if (auto EMT = SubType.getAs<AnyMetatypeType>()) {
       auto InstTy = ClassType.getSwiftRValueType();
       auto *MetaTy = MetatypeType::get(InstTy, EMT->getRepresentation());
-      auto CanMetaTy = CanMetatypeType::CanTypeWrapper(MetaTy);
+      auto CanMetaTy = CanMetatypeType(MetaTy);
       ClassOrMetatypeType = SILType::getPrimitiveObjectType(CanMetaTy);
     }
 
diff --git a/lib/SILOptimizer/Utils/Local.cpp b/lib/SILOptimizer/Utils/Local.cpp
index 8b265a7..4f0a2fb 100644
--- a/lib/SILOptimizer/Utils/Local.cpp
+++ b/lib/SILOptimizer/Utils/Local.cpp
@@ -2248,7 +2248,7 @@ CastOptimizer::optimizeCheckedCastBranchInst(CheckedCastBranchInst *Inst) {
         auto EMT = dyn_cast<AnyMetatypeType>(EmiTy.getSwiftRValueType());
         auto *MetaTy = MetatypeType::get(LoweredConcreteTy.getSwiftRValueType(),
                                          EMT->getRepresentation());
-        auto CanMetaTy = CanMetatypeType::CanTypeWrapper(MetaTy);
+        auto CanMetaTy = CanTypeWrapper<MetatypeType>(MetaTy);
         auto SILMetaTy = SILType::getPrimitiveObjectType(CanMetaTy);
         SILBuilderWithScope B(Inst);
         auto *MI = B.createMetatype(FoundIEI->getLoc(), SILMetaTy);
@@ -2303,7 +2303,7 @@ CastOptimizer::optimizeCheckedCastBranchInst(CheckedCastBranchInst *Inst) {
         // Get the SIL metatype of this type.
         auto EMT = dyn_cast<AnyMetatypeType>(EMI->getType().getSwiftRValueType());
         auto *MetaTy = MetatypeType::get(ConcreteTy, EMT->getRepresentation());
-        auto CanMetaTy = CanMetatypeType::CanTypeWrapper(MetaTy);
+        auto CanMetaTy = CanTypeWrapper<MetatypeType>(MetaTy);
         auto SILMetaTy = SILType::getPrimitiveObjectType(CanMetaTy);
         SILBuilderWithScope B(Inst);
         auto *MI = B.createMetatype(FoundIERI->getLoc(), SILMetaTy);
-- 
2.37.3


From 919060305005078d0c8b0d12c711bf158595c2be Mon Sep 17 00:00:00 2001
From: begasus <begasus@gmail.com>
Date: Fri, 9 Jun 2023 19:36:08 +0200
Subject: Fix identations


diff --git a/utils/build-script b/utils/build-script
index e632aed..4bf87f9 100644
--- a/utils/build-script
+++ b/utils/build-script
@@ -327,7 +327,7 @@ class BuildScriptInvocation(object):
         if args.skip_build:
             args.skip_build_linux = True
             args.skip_build_freebsd = True
-	    args.skip_build_haiku = True
+            args.skip_build_haiku = True
             args.skip_build_cygwin = True
             args.skip_build_osx = True
             args.skip_build_ios = True
@@ -374,7 +374,7 @@ class BuildScriptInvocation(object):
         if not args.test and not args.validation_test and not args.long_test:
             args.skip_test_linux = True
             args.skip_test_freebsd = True
-	    args.skip_test_haiku = True
+            args.skip_test_haiku = True
             args.skip_test_cygwin = True
             args.skip_test_osx = True
             args.skip_test_ios = True
@@ -461,7 +461,7 @@ class BuildScriptInvocation(object):
             self.platforms_to_skip_build.add(StdlibDeploymentTarget.Linux)
         if args.skip_build_freebsd:
             self.platforms_to_skip_build.add(StdlibDeploymentTarget.FreeBSD)
-	if args.skip_build_haiku:
+        if args.skip_build_haiku:
             self.platforms_to_skip_build.add(StdlibDeploymentTarget.Haiku)
         if args.skip_build_cygwin:
             self.platforms_to_skip_build.add(StdlibDeploymentTarget.Cygwin)
@@ -490,7 +490,7 @@ class BuildScriptInvocation(object):
             self.platforms_to_skip_test.add(StdlibDeploymentTarget.Linux)
         if args.skip_test_freebsd:
             self.platforms_to_skip_test.add(StdlibDeploymentTarget.FreeBSD)
-	if args.skip_test_haiku:
+        if args.skip_test_haiku:
             self.platforms_to_skip_test.add(StdlibDeploymentTarget.Haiku)
         if args.skip_test_cygwin:
             self.platforms_to_skip_test.add(StdlibDeploymentTarget.Cygwin)
@@ -699,7 +699,7 @@ class BuildScriptInvocation(object):
             impl_args += ["--skip-build-linux"]
         if args.skip_build_freebsd:
             impl_args += ["--skip-build-freebsd"]
-	if args.skip_build_haiku:
+        if args.skip_build_haiku:
             impl_args += ["--skip-build-haiku"]
         if args.skip_build_cygwin:
             impl_args += ["--skip-build-cygwin"]
@@ -737,7 +737,7 @@ class BuildScriptInvocation(object):
             impl_args += ["--skip-test-linux"]
         if args.skip_test_freebsd:
             impl_args += ["--skip-test-freebsd"]
-	if args.skip_test_haiku:
+        if args.skip_test_haiku:
             impl_args += ["--skip-test-haiku"]
         if args.skip_test_cygwin:
             impl_args += ["--skip-test-cygwin"]
diff --git a/utils/swift_build_support/swift_build_support/toolchain.py b/utils/swift_build_support/swift_build_support/toolchain.py
index 1c9a92b..1ac5497 100644
--- a/utils/swift_build_support/swift_build_support/toolchain.py
+++ b/utils/swift_build_support/swift_build_support/toolchain.py
@@ -168,27 +168,27 @@ class Cygwin(Linux):
 
 class Haiku(GenericUnix):
     def __init__(self):
-	# For testing toolchain initializer on non-FreeBSD systems
-	sys = platform.system()
-	if sys == 'Haiku':
-	    suffixes = ['']
-	# See: https://github.com/apple/swift/pull/169
-	# Building Swift from source requires a recent version of the Clang
-	# compiler with C++14 support.
-	super(Haiku, self).__init__(suffixes)
+        # For testing toolchain initializer on non-FreeBSD systems
+        sys = platform.system()
+        if sys == 'Haiku':
+            suffixes = ['']
+        # See: https://github.com/apple/swift/pull/169
+        # Building Swift from source requires a recent version of the Clang
+        # compiler with C++14 support.
+        super(Haiku, self).__init__(suffixes)
 
     @cache_util.reify
     def _release_date(self):
-	"""Return the release date for Haiku operating system on this host.
-	If the release date cannot be ascertained, return None.
-	"""
-	# For details on `sysctl`, see:
-	# http://www.freebsd.org/cgi/man.cgi?sysctl(8)
-	#out = shell.capture(['sysctl', '-n', 'kern.osreldate'],
-	#                    dry_run=False, echo=False, optional=True)
-	if out is None:
-	    return None
-	return int(out)
+        """Return the release date for Haiku operating system on this host.
+        If the release date cannot be ascertained, return None.
+        """
+        # For details on `sysctl`, see:
+        # http://www.freebsd.org/cgi/man.cgi?sysctl(8)
+        #out = shell.capture(['sysctl', '-n', 'kern.osreldate'],
+        #                    dry_run=False, echo=False, optional=True)
+        if out is None:
+            return None
+        return int(out)
 	
 
 def host_toolchain(**kwargs):
-- 
2.37.3


From b37bbc1b289949dbad7fee2616e2fd8197c9ad88 Mon Sep 17 00:00:00 2001
From: begasus <begasus@gmail.com>
Date: Fri, 9 Jun 2023 19:38:35 +0200
Subject: Switch to python3.9


diff --git a/utils/build-script-impl b/utils/build-script-impl
index 3d7ba14..07caa89 100644
--- a/utils/build-script-impl
+++ b/utils/build-script-impl
@@ -1039,7 +1039,7 @@ function make_relative_symlink() {
     local SOURCE=$1
     local TARGET=$2
     local TARGET_DIR=$(dirname $2)
-    local RELATIVE_SOURCE=$(python -c "import os.path; print(os.path.relpath(\"${SOURCE}\", \"${TARGET_DIR}\"))")
+    local RELATIVE_SOURCE=$(python3 -c "import os.path; print(os.path.relpath(\"${SOURCE}\", \"${TARGET_DIR}\"))")
     call ln -sf "${RELATIVE_SOURCE}" "${TARGET}"
 }
 
-- 
2.37.3

