From 5bbf2128e8afd39c8dcbc7f75a177e041ec492f8 Mon Sep 17 00:00:00 2001
From: "pulkomandy@pulkomandy.tk" <pulkomandy@pulkomandy.tk>
Date: Thu, 4 Mar 2021 23:40:05 +0000
Subject: Build fixes


diff --git a/configure.ac b/configure.ac
index 4174a99..d9ad262 100644
--- a/configure.ac
+++ b/configure.ac
@@ -393,9 +393,9 @@ dnl Some systems (OpenServer 5) dislike -lsocket -lnsl, so we try to avoid -lnsl
 dnl checks, if we already have the functions which are usually in libnsl. Also,
 dnl uClibc will bark at linking with glibc's libnsl.
 
-PHP_CHECK_FUNC(socket, socket)
-PHP_CHECK_FUNC(socketpair, socket)
-PHP_CHECK_FUNC(htonl, socket)
+PHP_CHECK_FUNC(socket, network)
+PHP_CHECK_FUNC(socketpair, network)
+PHP_CHECK_FUNC(htonl, network)
 PHP_CHECK_FUNC(gethostname, nsl)
 PHP_CHECK_FUNC(gethostbyaddr, nsl)
 PHP_CHECK_FUNC(dlopen, dl)
diff --git a/ext/fileinfo/libmagic/ascmagic.c b/ext/fileinfo/libmagic/ascmagic.c
index 0bc0cce..bbd925d 100644
--- a/ext/fileinfo/libmagic/ascmagic.c
+++ b/ext/fileinfo/libmagic/ascmagic.c
@@ -51,7 +51,7 @@ FILE_RCSID("@(#)$File: ascmagic.c,v 1.104 2019/05/07 02:27:11 christos Exp $")
 #define ISSPC(x) ((x) == ' ' || (x) == '\t' || (x) == '\r' || (x) == '\n' \
 		  || (x) == 0x85 || (x) == '\f')
 
-private unsigned char *encode_utf8(unsigned char *, size_t, unichar *, size_t);
+private unsigned char *encode_utf8(unsigned char *, size_t, php_unichar *, size_t);
 private size_t trim_nuls(const unsigned char *, size_t);
 
 /*
@@ -70,7 +70,7 @@ trim_nuls(const unsigned char *buf, size_t nbytes)
 protected int
 file_ascmagic(struct magic_set *ms, const struct buffer *b, int text)
 {
-	unichar *ubuf = NULL;
+	php_unichar *ubuf = NULL;
 	size_t ulen = 0;
 	int rv = 1;
 	struct buffer bb;
@@ -103,7 +103,7 @@ file_ascmagic(struct magic_set *ms, const struct buffer *b, int text)
 
 protected int
 file_ascmagic_with_encoding(struct magic_set *ms,
-    const struct buffer *b, unichar *ubuf, size_t ulen, const char *code,
+    const struct buffer *b, php_unichar *ubuf, size_t ulen, const char *code,
     const char *type, int text)
 {
 	struct buffer bb;
@@ -338,7 +338,7 @@ done:
  * after end of string, or NULL if an invalid character is found.
  */
 private unsigned char *
-encode_utf8(unsigned char *buf, size_t len, unichar *ubuf, size_t ulen)
+encode_utf8(unsigned char *buf, size_t len, php_unichar *ubuf, size_t ulen)
 {
 	size_t i;
 	unsigned char *end = buf + len;
diff --git a/ext/fileinfo/libmagic/encoding.c b/ext/fileinfo/libmagic/encoding.c
index 079896d..aaaddf3 100644
--- a/ext/fileinfo/libmagic/encoding.c
+++ b/ext/fileinfo/libmagic/encoding.c
@@ -44,14 +44,14 @@ FILE_RCSID("@(#)$File: encoding.c,v 1.20 2019/04/15 16:48:41 christos Exp $")
 #include <stdlib.h>
 
 
-private int looks_ascii(const unsigned char *, size_t, unichar *, size_t *);
-private int looks_utf8_with_BOM(const unsigned char *, size_t, unichar *,
+private int looks_ascii(const unsigned char *, size_t, php_unichar *, size_t *);
+private int looks_utf8_with_BOM(const unsigned char *, size_t, php_unichar *,
     size_t *);
-private int looks_utf7(const unsigned char *, size_t, unichar *, size_t *);
-private int looks_ucs16(const unsigned char *, size_t, unichar *, size_t *);
-private int looks_ucs32(const unsigned char *, size_t, unichar *, size_t *);
-private int looks_latin1(const unsigned char *, size_t, unichar *, size_t *);
-private int looks_extended(const unsigned char *, size_t, unichar *, size_t *);
+private int looks_utf7(const unsigned char *, size_t, php_unichar *, size_t *);
+private int looks_ucs16(const unsigned char *, size_t, php_unichar *, size_t *);
+private int looks_ucs32(const unsigned char *, size_t, php_unichar *, size_t *);
+private int looks_latin1(const unsigned char *, size_t, php_unichar *, size_t *);
+private int looks_extended(const unsigned char *, size_t, php_unichar *, size_t *);
 private void from_ebcdic(const unsigned char *, size_t, unsigned char *);
 
 #ifdef DEBUG_ENCODING
@@ -63,11 +63,11 @@ private void from_ebcdic(const unsigned char *, size_t, unsigned char *);
 /*
  * Try to determine whether text is in some character code we can
  * identify.  Each of these tests, if it succeeds, will leave
- * the text converted into one-unichar-per-character Unicode in
+ * the text converted into one-php_unichar-per-character Unicode in
  * ubuf, and the number of characters converted in ulen.
  */
 protected int
-file_encoding(struct magic_set *ms, const struct buffer *b, unichar **ubuf,
+file_encoding(struct magic_set *ms, const struct buffer *b, php_unichar **ubuf,
     size_t *ulen, const char **code, const char **code_mime, const char **type)
 {
 	const unsigned char *buf = CAST(const unsigned char *, b->fbuf);
@@ -75,7 +75,7 @@ file_encoding(struct magic_set *ms, const struct buffer *b, unichar **ubuf,
 	size_t mlen;
 	int rv = 1, ucs_type;
 	unsigned char *nbuf = NULL;
-	unichar *udefbuf;
+	php_unichar *udefbuf;
 	size_t udeflen;
 
 	if (ubuf == NULL)
@@ -89,7 +89,7 @@ file_encoding(struct magic_set *ms, const struct buffer *b, unichar **ubuf,
 	*code_mime = "binary";
 
 	mlen = (nbytes + 1) * sizeof((*ubuf)[0]);
-	if ((*ubuf = CAST(unichar *, ecalloc(CAST(size_t, 1), mlen))) == NULL) {
+	if ((*ubuf = CAST(php_unichar *, ecalloc(CAST(size_t, 1), mlen))) == NULL) {
 		file_oomem(ms, mlen);
 		goto done;
 	}
@@ -251,7 +251,7 @@ private char text_chars[256] = {
 };
 
 private int
-looks_ascii(const unsigned char *buf, size_t nbytes, unichar *ubuf,
+looks_ascii(const unsigned char *buf, size_t nbytes, php_unichar *ubuf,
     size_t *ulen)
 {
 	size_t i;
@@ -271,7 +271,7 @@ looks_ascii(const unsigned char *buf, size_t nbytes, unichar *ubuf,
 }
 
 private int
-looks_latin1(const unsigned char *buf, size_t nbytes, unichar *ubuf, size_t *ulen)
+looks_latin1(const unsigned char *buf, size_t nbytes, php_unichar *ubuf, size_t *ulen)
 {
 	size_t i;
 
@@ -290,7 +290,7 @@ looks_latin1(const unsigned char *buf, size_t nbytes, unichar *ubuf, size_t *ule
 }
 
 private int
-looks_extended(const unsigned char *buf, size_t nbytes, unichar *ubuf,
+looks_extended(const unsigned char *buf, size_t nbytes, php_unichar *ubuf,
     size_t *ulen)
 {
 	size_t i;
@@ -321,11 +321,11 @@ looks_extended(const unsigned char *buf, size_t nbytes, unichar *ubuf,
  * ubuf must be big enough!
  */
 protected int
-file_looks_utf8(const unsigned char *buf, size_t nbytes, unichar *ubuf, size_t *ulen)
+file_looks_utf8(const unsigned char *buf, size_t nbytes, php_unichar *ubuf, size_t *ulen)
 {
 	size_t i;
 	int n;
-	unichar c;
+	php_unichar c;
 	int gotone = 0, ctrl = 0;
 
 	if (ubuf)
@@ -392,7 +392,7 @@ done:
  * rest of the text.
  */
 private int
-looks_utf8_with_BOM(const unsigned char *buf, size_t nbytes, unichar *ubuf,
+looks_utf8_with_BOM(const unsigned char *buf, size_t nbytes, php_unichar *ubuf,
     size_t *ulen)
 {
 	if (nbytes > 3 && buf[0] == 0xef && buf[1] == 0xbb && buf[2] == 0xbf)
@@ -402,7 +402,7 @@ looks_utf8_with_BOM(const unsigned char *buf, size_t nbytes, unichar *ubuf,
 }
 
 private int
-looks_utf7(const unsigned char *buf, size_t nbytes, unichar *ubuf, size_t *ulen)
+looks_utf7(const unsigned char *buf, size_t nbytes, php_unichar *ubuf, size_t *ulen)
 {
 	if (nbytes > 4 && buf[0] == '+' && buf[1] == '/' && buf[2] == 'v')
 		switch (buf[3]) {
@@ -421,7 +421,7 @@ looks_utf7(const unsigned char *buf, size_t nbytes, unichar *ubuf, size_t *ulen)
 }
 
 private int
-looks_ucs16(const unsigned char *bf, size_t nbytes, unichar *ubf,
+looks_ucs16(const unsigned char *bf, size_t nbytes, php_unichar *ubf,
     size_t *ulen)
 {
 	int bigend;
@@ -444,10 +444,10 @@ looks_ucs16(const unsigned char *bf, size_t nbytes, unichar *ubf,
 
 		if (bigend)
 			ubf[(*ulen)++] = bf[i + 1]
-			    | (CAST(unichar, bf[i]) << 8);
+			    | (CAST(php_unichar, bf[i]) << 8);
 		else
 			ubf[(*ulen)++] = bf[i]
-			    | (CAST(unichar, bf[i + 1]) << 8);
+			    | (CAST(php_unichar, bf[i + 1]) << 8);
 
 		if (ubf[*ulen - 1] == 0xfffe)
 			return 0;
@@ -460,7 +460,7 @@ looks_ucs16(const unsigned char *bf, size_t nbytes, unichar *ubf,
 }
 
 private int
-looks_ucs32(const unsigned char *bf, size_t nbytes, unichar *ubf,
+looks_ucs32(const unsigned char *bf, size_t nbytes, php_unichar *ubf,
     size_t *ulen)
 {
 	int bigend;
@@ -482,15 +482,15 @@ looks_ucs32(const unsigned char *bf, size_t nbytes, unichar *ubf,
 		/* XXX fix to properly handle chars > 65536 */
 
 		if (bigend)
-			ubf[(*ulen)++] = CAST(unichar, bf[i + 3])
-			    | (CAST(unichar, bf[i + 2]) << 8)
-			    | (CAST(unichar, bf[i + 1]) << 16)
-			    | (CAST(unichar, bf[i]) << 24);
+			ubf[(*ulen)++] = CAST(php_unichar, bf[i + 3])
+			    | (CAST(php_unichar, bf[i + 2]) << 8)
+			    | (CAST(php_unichar, bf[i + 1]) << 16)
+			    | (CAST(php_unichar, bf[i]) << 24);
 		else
-			ubf[(*ulen)++] = CAST(unichar, bf[i + 0])
-			    | (CAST(unichar, bf[i + 1]) << 8) 
-			    | (CAST(unichar, bf[i + 2]) << 16)
-			    | (CAST(unichar, bf[i + 3]) << 24);
+			ubf[(*ulen)++] = CAST(php_unichar, bf[i + 0])
+			    | (CAST(php_unichar, bf[i + 1]) << 8) 
+			    | (CAST(php_unichar, bf[i + 2]) << 16)
+			    | (CAST(php_unichar, bf[i + 3]) << 24);
 
 		if (ubf[*ulen - 1] == 0xfffe)
 			return 0;
diff --git a/ext/fileinfo/libmagic/file.h b/ext/fileinfo/libmagic/file.h
index f462622..a0c085a 100644
--- a/ext/fileinfo/libmagic/file.h
+++ b/ext/fileinfo/libmagic/file.h
@@ -447,7 +447,7 @@ struct magic_set {
 };
 
 /* Type for Unicode characters */
-typedef unsigned long unichar;
+typedef unsigned long php_unichar;
 
 #define FILE_T_LOCAL	1
 #define FILE_T_WINDOWS	2
@@ -472,9 +472,9 @@ protected int file_zmagic(struct magic_set *, const struct buffer *,
 protected int file_ascmagic(struct magic_set *, const struct buffer *,
     int);
 protected int file_ascmagic_with_encoding(struct magic_set *,
-    const struct buffer *, unichar *, size_t, const char *, const char *, int);
+    const struct buffer *, php_unichar *, size_t, const char *, const char *, int);
 protected int file_encoding(struct magic_set *, const struct buffer *,
-    unichar **, size_t *, const char **, const char **, const char **);
+    php_unichar **, size_t *, const char **, const char **, const char **);
 protected int file_is_json(struct magic_set *, const struct buffer *);
 protected int file_is_tar(struct magic_set *, const struct buffer *);
 protected int file_softmagic(struct magic_set *, const struct buffer *,
@@ -496,7 +496,7 @@ protected size_t file_mbswidth(const char *);
 protected const char *file_getbuffer(struct magic_set *);
 protected ssize_t sread(int, void *, size_t, int);
 protected int file_check_mem(struct magic_set *, unsigned int);
-protected int file_looks_utf8(const unsigned char *, size_t, unichar *,
+protected int file_looks_utf8(const unsigned char *, size_t, php_unichar *,
     size_t *);
 protected size_t file_pstring_length_size(const struct magic *);
 protected size_t file_pstring_get_length(const struct magic *, const char *);
diff --git a/ext/pcre/pcre2lib/sljit/sljitUtils.c b/ext/pcre/pcre2lib/sljit/sljitUtils.c
index 0276fa1..f5e866b 100644
--- a/ext/pcre/pcre2lib/sljit/sljitUtils.c
+++ b/ext/pcre/pcre2lib/sljit/sljitUtils.c
@@ -389,7 +389,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_u8 *SLJIT_FUNC sljit_stack_resize(struct sljit_st
 				return NULL;
 		}
 	}
-#elif defined(MADV_DONTNEED)
+#elif defined(MADV_DONTNEED) && !defined(__HAIKU__)
 	if (stack->start < new_start) {
 		page_align = get_page_alignment();
 
diff --git a/ext/standard/microtime.c b/ext/standard/microtime.c
index 9bd45e1..fad5bd4 100644
--- a/ext/standard/microtime.c
+++ b/ext/standard/microtime.c
@@ -131,7 +131,7 @@ PHP_FUNCTION(getrusage)
 #ifdef PHP_WIN32 /* Windows only implements a limited amount of fields from the rusage struct */
 	PHP_RUSAGE_PARA(ru_majflt);
 	PHP_RUSAGE_PARA(ru_maxrss);
-#elif !defined(_OSD_POSIX)
+#elif !defined(_OSD_POSIX) && !defined(__HAIKU__)
 	PHP_RUSAGE_PARA(ru_oublock);
 	PHP_RUSAGE_PARA(ru_inblock);
 	PHP_RUSAGE_PARA(ru_msgsnd);
diff --git a/sapi/phpdbg/phpdbg.c b/sapi/phpdbg/phpdbg.c
index 0f1f036..2351b9c 100644
--- a/sapi/phpdbg/phpdbg.c
+++ b/sapi/phpdbg/phpdbg.c
@@ -1736,7 +1736,7 @@ phpdbg_main:
 				exit(0);
 			}
 
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__HAIKU__)
 			zend_sigaction(SIGIO, &sigio_struct, NULL);
 #endif
 
-- 
2.36.1


From f0e80c47fcf5557c628ec65ff152f03afec3d020 Mon Sep 17 00:00:00 2001
From: Ian Corbitt <ian@ihatemyisp.net>
Date: Sun, 7 Mar 2021 10:54:45 +0000
Subject: resolv.h fix


diff --git a/ext/standard/dns.c b/ext/standard/dns.c
index dc85c45..113029a 100644
--- a/ext/standard/dns.c
+++ b/ext/standard/dns.c
@@ -48,7 +48,7 @@
 #include <arpa/nameser.h>
 #endif
 #if HAVE_RESOLV_H
-#include <resolv.h>
+#include "resolv.h"
 #endif
 #ifdef HAVE_DNS_H
 #include <dns.h>
diff --git a/ext/standard/resolv.h b/ext/standard/resolv.h
new file mode 100644
index 0000000..8639c04
--- /dev/null
+++ b/ext/standard/resolv.h
@@ -0,0 +1,456 @@
+/*
+ * Copyright 2009-2012 Haiku, Inc. All Rights Reserved.
+ * Distributed under the terms of the MIT License.
+ */
+/*
+ * Portions Copyright (C) 2004, 2005, 2008, 2009  Internet Systems Consortium, Inc. ("ISC")
+ * Portions Copyright (C) 1995-2003  Internet Software Consortium.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
+ * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
+ * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
+ * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
+ * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
+ * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
+ * PERFORMANCE OF THIS SOFTWARE.
+ */
+/*
+ * Copyright (c) 1983, 1987, 1989
+ *    The Regents of the University of California.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. All advertising materials mentioning features or use of this software
+ *    must display the following acknowledgement:
+ * 	This product includes software developed by the University of
+ * 	California, Berkeley and its contributors.
+ * 4. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+#ifndef _RESOLV_H_
+#define	_RESOLV_H_
+#include <arpa/nameser.h>
+#include <netinet/in.h>
+#include <netinet6/in6.h>
+#include <stdio.h>
+#include <sys/param.h>
+#include <sys/types.h>
+#include <sys/cdefs.h>
+#include <sys/socket.h>
+/*
+ * Revision information.  This is the release date in YYYYMMDD format.
+ * It can change every day so the right thing to do with it is use it
+ * in preprocessor commands such as "#if (__RES > 19931104)".  Do not
+ * compare for equality; rather, use it to determine whether your resolver
+ * is new enough to contain a certain feature.
+ */
+#define	__RES	20090302
+/*
+ * This used to be defined in res_query.c, now it's in herror.c.
+ * [XXX no it's not.  It's in irs/irs_data.c]
+ * It was
+ * never extern'd by any *.h file before it was placed here.  For thread
+ * aware programs, the last h_errno value set is stored in res->h_errno.
+ *
+ * XXX:	There doesn't seem to be a good reason for exposing RES_SET_H_ERRNO
+ *	(and __h_errno_set) to the public via <resolv.h>.
+ * XXX:	__h_errno_set is really part of IRS, not part of the resolver.
+ *	If somebody wants to build and use a resolver that doesn't use IRS,
+ *	what do they do?  Perhaps something like
+ *		#ifdef WANT_IRS
+ *		# define RES_SET_H_ERRNO(r,x) __h_errno_set(r,x)
+ *		#else
+ *		# define RES_SET_H_ERRNO(r,x) (h_errno = (r)->res_h_errno = (x))
+ *		#endif
+ */
+#define RES_SET_H_ERRNO(r,x) __h_errno_set(r,x)
+struct __res_state; /* forward */
+__BEGIN_DECLS
+void __h_errno_set(struct __res_state *res, int err);
+__END_DECLS
+typedef enum { res_goahead, res_nextns, res_modified, res_done, res_error }
+	res_sendhookact;
+#ifndef __PMT
+#if defined(__STDC__) || defined(__cplusplus)
+#define __PMT(args) args
+#else
+#define __PMT(args) ()
+#endif
+#endif
+typedef res_sendhookact (*res_send_qhook)(struct sockaddr * const *,
+	const u_char **, int *, u_char *, int, int *);
+typedef res_sendhookact (*res_send_rhook)(const struct sockaddr *,
+	const u_char *, int, u_char *, int, int *);
+struct res_sym {
+	int			number;	   /* Identifying number, like T_MX */
+	const char *name;	   /* Its symbolic name, like "MX" */
+	const char *humanname; /* Its fun name, like "mail exchanger" */
+};
+/*
+ * Global defines and variables for resolver stub.
+ */
+#define	MAXNS				3	/* max # name servers we'll track */
+#define	MAXDFLSRCH			3	/* # default domain levels to try */
+#define	MAXDNSRCH			6	/* max # domains in search path */
+#define	LOCALDOMAINPARTS	2	/* min levels in name that is "local" */
+#define	RES_TIMEOUT			5	/* min. seconds between retries */
+#define	MAXRESOLVSORT		10	/* number of net to sort on */
+#define	RES_MAXNDOTS		15	/* should reflect bit field size */
+#define	RES_MAXRETRANS		30	/* only for resolv.conf/RES_OPTIONS */
+#define	RES_MAXRETRY		5	/* only for resolv.conf/RES_OPTIONS */
+#define	RES_DFLRETRY		2	/* Default #/tries. */
+#define	RES_MAXTIME			65535	/* Infinity, in milliseconds. */
+struct __res_state_ext;
+struct __res_state {
+	int	retrans;		 	/* retransmission time interval */
+	int	retry;				/* number of times to retransmit */
+#ifdef sun
+	u_int	options;		/* option flags - see below. */
+#else
+	u_long	options;		/* option flags - see below. */
+#endif
+	int	nscount;			/* number of name servers */
+	struct sockaddr_in
+		nsaddr_list[MAXNS];	/* address of name server */
+#define	nsaddr	nsaddr_list[0]		/* for backward compatibility */
+	u_short	id;				/* current message id */
+	char	*dnsrch[MAXDNSRCH+1];	/* components of domain to search */
+	char	defdname[256];	/* default domain (deprecated) */
+#ifdef sun
+	u_int	pfcode;			/* RES_PRF_ flags - see below. */
+#else
+	u_long	pfcode;			/* RES_PRF_ flags - see below. */
+#endif
+	unsigned ndots:4;		/* threshold for initial abs. query */
+	unsigned nsort:4;		/* number of elements in sort_list[] */
+	char	unused[3];
+	struct {
+		struct in_addr	addr;
+		u_int32_t	mask;
+	} sort_list[MAXRESOLVSORT];
+	res_send_qhook qhook;	/* query hook */
+	res_send_rhook rhook;	/* response hook */
+	int	res_h_errno;		/* last one set for this context */
+	int	_vcsock;			/* PRIVATE: for res_send VC i/o */
+	u_int	_flags;			/* PRIVATE: see below */
+	u_char	_rnd[16];		/* PRIVATE: random state */
+	u_int	_pad;			/* make _u 64 bit aligned */
+	union {
+		/* On an 32-bit arch this means 512b total. */
+		char	pad[56 - 4*sizeof (int) - 2*sizeof (void *)];
+		struct {
+			u_int16_t		nscount;
+			u_int16_t		nstimes[MAXNS];	/* ms. */
+			int			nssocks[MAXNS];
+			struct __res_state_ext *ext;	/* extention for IPv6 */
+		} _ext;
+	} _u;
+};
+typedef struct __res_state *res_state;
+union res_sockaddr_union {
+	struct sockaddr_in	sin;
+	struct sockaddr_in6	sin6;
+#ifdef ISC_ALIGN64
+	int64_t			__align64;		/* 64bit alignment */
+#else
+	int32_t			__align32;		/* 32bit alignment */
+#endif
+	char			__space[128];   /* max size */
+};
+/*
+ * Resolver flags (used to be discrete per-module statics ints).
+ */
+#define	RES_F_VC		0x00000001	/* socket is TCP */
+#define	RES_F_CONN		0x00000002	/* socket is connected */
+#define	RES_F_EDNS0ERR	0x00000004	/* EDNS0 caused errors */
+#define	RES_F__UNUSED	0x00000008	/* (unused) */
+#define	RES_F_LASTMASK	0x000000F0	/* ordinal server of last res_nsend */
+#define	RES_F_LASTSHIFT	4			/* bit position of LASTMASK "flag" */
+#define	RES_GETLAST(res) (((res)._flags & RES_F_LASTMASK) >> RES_F_LASTSHIFT)
+/* res_findzonecut2() options */
+#define	RES_EXHAUSTIVE	0x00000001	/* always do all queries */
+#define	RES_IPV4ONLY	0x00000002	/* IPv4 only */
+#define	RES_IPV6ONLY	0x00000004	/* IPv6 only */
+/*
+ * Resolver options (keep these in synch with res_debug.c, please)
+ */
+#define RES_INIT		0x00000001	/* address initialized */
+#define RES_DEBUG		0x00000002	/* print debug messages */
+#define RES_AAONLY		0x00000004	/* authoritative answers only (!IMPL)*/
+#define RES_USEVC		0x00000008	/* use virtual circuit */
+#define RES_PRIMARY		0x00000010	/* query primary server only (!IMPL) */
+#define RES_IGNTC		0x00000020	/* ignore trucation errors */
+#define RES_RECURSE		0x00000040	/* recursion desired */
+#define RES_DEFNAMES	0x00000080	/* use default domain name */
+#define RES_STAYOPEN	0x00000100	/* Keep TCP socket open */
+#define RES_DNSRCH		0x00000200	/* search up local domain tree */
+#define	RES_INSECURE1	0x00000400	/* type 1 security disabled */
+#define	RES_INSECURE2	0x00000800	/* type 2 security disabled */
+#define	RES_NOALIASES	0x00001000	/* shuts off HOSTALIASES feature */
+#define	RES_USE_INET6	0x00002000	/* use/map IPv6 in gethostbyname() */
+#define RES_ROTATE		0x00004000	/* rotate ns list after each query */
+#define	RES_NOCHECKNAME	0x00008000	/* do not check names for sanity. */
+#define	RES_KEEPTSIG	0x00010000	/* do not strip TSIG records */
+#define	RES_BLAST		0x00020000	/* blast all recursive servers */
+#define RES_NSID		0x00040000	/* request name server ID */
+#define RES_NOTLDQUERY	0x00100000	/* don't unqualified name as a tld */
+#define RES_USE_DNSSEC	0x00200000	/* use DNSSEC using OK bit in OPT */
+/* #define RES_DEBUG2	0x00400000 */	/* nslookup internal */
+#define RES_USE_INET4	0x00800000	/* use IPv4 in gethostbyname() */
+/* KAME extensions: use higher bit to avoid conflict with ISC use */
+#define RES_USE_DNAME	0x10000000	/* use DNAME */
+#define RES_USE_EDNS0	0x40000000	/* use EDNS0 if configured */
+#define RES_NO_NIBBLE2	0x80000000	/* disable alternate nibble lookup */
+#define RES_DEFAULT	\
+	(RES_RECURSE | RES_DEFNAMES | RES_DNSRCH | RES_NO_NIBBLE2)
+/*
+ * Resolver "pfcode" values.  Used by dig.
+ */
+#define RES_PRF_STATS	0x00000001
+#define RES_PRF_UPDATE	0x00000002
+#define RES_PRF_CLASS   0x00000004
+#define RES_PRF_CMD		0x00000008
+#define RES_PRF_QUES	0x00000010
+#define RES_PRF_ANS		0x00000020
+#define RES_PRF_AUTH	0x00000040
+#define RES_PRF_ADD		0x00000080
+#define RES_PRF_HEAD1	0x00000100
+#define RES_PRF_HEAD2	0x00000200
+#define RES_PRF_TTLID	0x00000400
+#define RES_PRF_HEADX	0x00000800
+#define RES_PRF_QUERY	0x00001000
+#define RES_PRF_REPLY	0x00002000
+#define RES_PRF_INIT	0x00004000
+#define RES_PRF_TRUNC	0x00008000
+/*			0x00010000	*/
+/* Things involving an internal (static) resolver context. */
+__BEGIN_DECLS
+extern struct __res_state *__res_get_state(void);
+extern void __res_put_state(struct __res_state *);
+/*
+ * Source and Binary compatibility; _res will not work properly
+ * with multi-threaded programs.
+ */
+extern struct __res_state *__res_state(void);
+#define _res (*__res_state())
+__END_DECLS
+#ifndef __BIND_NOSTATIC
+#define fp_nquery		__fp_nquery
+#define fp_query		__fp_query
+#define hostalias		__hostalias
+#define p_query			__p_query
+#define res_close		__res_close
+#define res_init		__res_init
+#define res_isourserver	__res_isourserver
+#define res_mkquery		__res_mkquery
+#define res_query		__res_query
+#define res_querydomain	__res_querydomain
+#define res_search		__res_search
+#define res_send		__res_send
+#define res_sendsigned	__res_sendsigned
+__BEGIN_DECLS
+void		fp_nquery(const u_char *, int, FILE *);
+void		fp_query(const u_char *, FILE *);
+const char *hostalias(const char *);
+void		p_query(const u_char *);
+void		res_close(void);
+int			res_init(void);
+int			res_isourserver(const struct sockaddr_in *);
+int			res_mkquery(int, const char *, int, int, const u_char *,
+				 int, const u_char *, u_char *, int);
+int			res_query(const char *, int, int, u_char *, int);
+int			res_querydomain(const char *, const char *, int, int,
+				u_char *, int);
+int			res_search(const char *, int, int, u_char *, int);
+int			res_send(const u_char *, int, u_char *, int);
+int			res_sendsigned(const u_char *, int, ns_tsig_key *,
+				u_char *, int);
+__END_DECLS
+#endif
+#if !defined(SHARED_LIBBIND) || defined(LIB)
+/*
+ * If libbind is a shared object (well, DLL anyway)
+ * these externs break the linker when resolv.h is
+ * included by a lib client (like named)
+ * Make them go away if a client is including this
+ *
+ */
+extern const struct res_sym __p_key_syms[];
+extern const struct res_sym __p_cert_syms[];
+extern const struct res_sym __p_class_syms[];
+extern const struct res_sym __p_type_syms[];
+extern const struct res_sym __p_rcode_syms[];
+#endif /* SHARED_LIBBIND */
+#define b64_ntop			__b64_ntop
+#define b64_pton			__b64_pton
+#define dn_comp				__dn_comp
+#define dn_count_labels		__dn_count_labels
+#define dn_expand			__dn_expand
+#define dn_skipname			__dn_skipname
+#define fp_resstat			__fp_resstat
+#define loc_aton			__loc_aton
+#define loc_ntoa			__loc_ntoa
+#define p_cdname			__p_cdname
+#define p_cdnname			__p_cdnname
+#define p_class				__p_class
+#define p_fqname			__p_fqname
+#define p_fqnname			__p_fqnname
+#define p_option			__p_option
+#define p_secstodate		__p_secstodate
+#define p_section			__p_section
+#define p_time				__p_time
+#define p_type				__p_type
+#define p_rcode				__p_rcode
+#define p_sockun			__p_sockun
+#define putlong				__putlong
+#define putshort			__putshort
+#define res_dnok			__res_dnok
+#define res_findzonecut		__res_findzonecut
+#define res_findzonecut2	__res_findzonecut2
+#define res_hnok			__res_hnok
+#define res_hostalias		__res_hostalias
+#define res_mailok			__res_mailok
+#define res_nameinquery		__res_nameinquery
+#define res_nclose			__res_nclose
+#define res_ninit			__res_ninit
+#define res_nmkquery		__res_nmkquery
+#define res_pquery			__res_pquery
+#define res_nquery			__res_nquery
+#define res_nquerydomain	__res_nquerydomain
+#define res_nsearch			__res_nsearch
+#define res_nsend			__res_nsend
+#define res_nsendsigned		__res_nsendsigned
+#define res_nisourserver	__res_nisourserver
+#define res_ownok			__res_ownok
+#define res_queriesmatch	__res_queriesmatch
+#define res_rndinit			__res_rndinit
+#define res_randomid		__res_randomid
+#define res_nrandomid		__res_nrandomid
+#define sym_ntop			__sym_ntop
+#define sym_ntos			__sym_ntos
+#define sym_ston			__sym_ston
+#define res_nopt			__res_nopt
+#define res_nopt_rdata		__res_nopt_rdata
+#define res_ndestroy		__res_ndestroy
+#define	res_nametoclass		__res_nametoclass
+#define	res_nametotype		__res_nametotype
+#define	res_setservers		__res_setservers
+#define	res_getservers		__res_getservers
+#define	res_buildprotolist	__res_buildprotolist
+#define	res_destroyprotolist	__res_destroyprotolist
+#define	res_destroyservicelist	__res_destroyservicelist
+#define	res_get_nibblesuffix	__res_get_nibblesuffix
+#define	res_get_nibblesuffix2	__res_get_nibblesuffix2
+#define	res_ourserver_p		__res_ourserver_p
+#define	res_protocolname	__res_protocolname
+#define	res_protocolnumber	__res_protocolnumber
+#define	res_send_setqhook	__res_send_setqhook
+#define	res_send_setrhook	__res_send_setrhook
+#define	res_servicename		__res_servicename
+#define	res_servicenumber	__res_servicenumber
+__BEGIN_DECLS
+int				res_hnok(const char *);
+int				res_ownok(const char *);
+int				res_mailok(const char *);
+int				res_dnok(const char *);
+int				sym_ston(const struct res_sym *, const char *, int *);
+const char *	sym_ntos(const struct res_sym *, int, int *);
+const char *	sym_ntop(const struct res_sym *, int, int *);
+int				b64_ntop(u_char const *, size_t, char *, size_t);
+int				b64_pton(char const *, u_char *, size_t);
+int				loc_aton(const char *, u_char *);
+const char *	loc_ntoa(const u_char *, char *);
+int				dn_skipname(const u_char *, const u_char *);
+void			putlong(u_int32_t, u_char *);
+void			putshort(u_int16_t, u_char *);
+#if !defined(__ultrix__)
+u_int16_t		_getshort(const u_char *);
+u_int32_t		_getlong(const u_char *);
+#endif
+const char *	p_class(int);
+const char *	p_time(u_int32_t);
+const char *	p_type(int);
+const char *	p_rcode(int);
+const char *	p_sockun(union res_sockaddr_union, char *, size_t);
+const u_char *	p_cdnname(const u_char *, const u_char *, int, FILE *);
+const u_char *	p_cdname(const u_char *, const u_char *, FILE *);
+const u_char *	p_fqnname(const u_char *, const u_char *, int, char *, int);
+const u_char *	p_fqname(const u_char *, const u_char *, FILE *);
+const char *	p_option(u_long);
+char *			p_secstodate(u_long);
+int				dn_count_labels(const char *);
+int				dn_comp(const char *, u_char *, int, u_char **, u_char **);
+int				dn_expand(const u_char *, const u_char *, const u_char *,
+					char *, int);
+void			res_rndinit(res_state);
+u_int			res_randomid(void);
+u_int			res_nrandomid(res_state);
+int				res_nameinquery(const char *, int, int, const u_char *,
+					const u_char *);
+int				res_queriesmatch(const u_char *, const u_char *, const u_char *,
+					const u_char *);
+const char *	p_section(int, int);
+/* Things involving a resolver context. */
+int				res_ninit(res_state);
+int				res_nisourserver(const res_state, const struct sockaddr_in *);
+void			fp_resstat(const res_state, FILE *);
+void			res_pquery(const res_state, const u_char *, int, FILE *);
+const char *	res_hostalias(const res_state, const char *, char *, size_t);
+int				res_nquery(res_state, const char *, int, int, u_char *, int);
+int				res_nsearch(res_state, const char *, int, int, u_char *, int);
+int				res_nquerydomain(res_state, const char *, const char *, int,
+					int, u_char *, int);
+int				res_nmkquery(res_state, int, const char *, int, int,
+					const u_char *, int, const u_char *, u_char *, int);
+int				res_nsend(res_state, const u_char *, int, u_char *, int);
+int				res_nsendsigned(res_state, const u_char *, int, ns_tsig_key *,
+					u_char *, int);
+int				res_findzonecut(res_state, const char *, ns_class, int, char *,
+					size_t, struct in_addr *, int);
+int				res_findzonecut2(res_state, const char *, ns_class, int, char *,
+					size_t, union res_sockaddr_union *, int);
+void			res_nclose(res_state);
+int				res_nopt(res_state, int, u_char *, int, int);
+int				res_nopt_rdata(res_state, int, u_char *, int, u_char *, u_short,
+					u_short, u_char *);
+void			res_send_setqhook(res_send_qhook);
+void			res_send_setrhook(res_send_rhook);
+int				__res_vinit(res_state, int);
+void			res_destroyservicelist(void);
+const char *	res_servicename(u_int16_t, const char *);
+const char *	res_protocolname(int);
+void			res_destroyprotolist(void);
+void			res_buildprotolist(void);
+const char *	res_get_nibblesuffix(res_state);
+const char *	res_get_nibblesuffix2(res_state);
+void			res_ndestroy(res_state);
+u_int16_t		res_nametoclass(const char *, int *);
+u_int16_t		res_nametotype(const char *, int *);
+void			res_setservers(res_state, const union res_sockaddr_union *,
+					int);
+int				res_getservers(res_state, union res_sockaddr_union *, int);
+__END_DECLS
+#endif /* !_RESOLV_H_ */
-- 
2.36.1

