SUMMARY="Simplified Wrapper and Interface Generator"
DESCRIPTION="SWIG is a software development tool that connects programs \
written in C and C++ with a variety of high-level programming languages. SWIG \
is used with different types of target languages including common scripting \
languages such as Perl, PHP, Python, Tcl and Ruby. The list of supported \
languages also includes non-scripting languages such as C#, Common Lisp \
(CLISP, Allegro CL, CFFI, UFFI), D, Go language, Java including Android, \
Lua, Modula-3, OCAML, Octave and R. Also several interpreted and compiled \
Scheme implementations (Guile, MzScheme/Racket, Chicken) are supported. SWIG \
is most commonly used to create high-level interpreted or compiled \
programming environments, user interfaces, and as a tool for testing and \
prototyping C/C++ software. SWIG is typically used to parse C/C++ interfaces \
and generate the 'glue code' required for the above target languages to call \
into the C/C++ code. SWIG can also export its parse tree in the form of XML \
and Lisp s-expressions. SWIG is free software and the code that SWIG \
generates is compatible with both commercial and non-commercial projects."
HOMEPAGE="http://www.swig.org/"
COPYRIGHT="1995-1998 University of Utah and the Regents of the University of California
		1998-2005 University of Chicago
		2005-2006 Arizona Board of Regents (University of Arizona)
		1995-2020 The SWIG Developers"
LICENSE="SWIG"
REVISION="2"
SOURCE_URI="http://sourceforge.net/projects/swig/files/swig/swig-$portVersion/swig-$portVersion.tar.gz"
CHECKSUM_SHA256="d53be9730d8d58a16bf0cbd1f8ac0c0c3e1090573168bfa151b01eb47fa906fc"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	swig$secondaryArchSuffix = $portVersion
	cmd:ccache_swig = $portVersion
	cmd:swig = $portVersion compat >= 4
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libpcre$secondaryArchSuffix
	lib:libz$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libpcre$secondaryArchSuffix
	devel:libz$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:awk
	cmd:bison
	cmd:g++$secondaryArchSuffix
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:libtoolize$secondaryArchSuffix
	cmd:make
	"

BUILD()
{
	export LDFLAGS="-lnetwork"
	runConfigure --omit-dirs binDir ./configure \
		--bindir=$prefix/bin
	make $jobArgs
}

INSTALL()
{
	make install
}

TEST()
{
	make check
}
