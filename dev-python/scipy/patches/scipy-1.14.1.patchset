From 4d538a0d28126e2ed8fe6f849c699a33d3be9697 Mon Sep 17 00:00:00 2001
From: I am <ger-alex@seznam.cz>
Date: Mon, 23 Dec 2024 01:18:05 +0100
Subject: patch build options


diff --git a/meson_options.txt b/meson_options.txt
index 3257cb8..c9d0582 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -1,12 +1,12 @@
 option('blas', type: 'string', value: 'openblas',
         description: 'option for BLAS library switching')
-option('lapack', type: 'string', value: 'openblas',
+option('lapack', type: 'string', value: 'lapack',
         description: 'option for LAPACK library switching')
 option('use-g77-abi', type: 'boolean', value: false,
         description: 'If set to true, forces using g77 compatibility wrappers ' +
                      'for LAPACK functions. The default is to use gfortran ' +
                      'ABI for all LAPACK libraries except MKL.')
-option('use-pythran', type: 'boolean', value: true,
+option('use-pythran', type: 'boolean', value: false,
         description: 'If set to false, disables using Pythran (it falls back ' +
                      'to either pure Python code or Cython code, depending on ' +
                      'the implementation).')
diff --git a/pyproject.toml b/pyproject.toml
index a185fb3..c86bd05 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -24,10 +24,10 @@ requires = [
     # The upper bound on Cython is pre-emptive only
     "Cython>=3.0.8,<3.1.0",        # when updating version, also update check in meson.build
     # The upper bound on pybind11 is pre-emptive only
-    "pybind11>=2.12.0,<2.13.0",     # when updating version, also update check in scipy/meson.build
+    "pybind11>=2.12.0",     # when updating version, also update check in scipy/meson.build
     # The upper bound on pythran is pre-emptive only; 0.16.1
     # is released/working at time of writing.
-    "pythran>=0.14.0,<0.17.0",
+    #"pythran>=0.14.0,<0.17.0",
 
     # numpy requirement for wheel builds for distribution on PyPI - building
     # against 2.x yields wheels that are also compatible with numpy 1.x at
@@ -35,8 +35,8 @@ requires = [
     # Note that building against numpy 1.x works fine too - users and
     # redistributors can do this by installing the numpy version they like and
     # disabling build isolation.
-    "numpy>=2.0.0rc1,<2.3",
-    "numpy>=2.1.0rc1; python_version>='3.13'",
+    "numpy>=1.23.5,<2.3",
+    "numpy>=1.23.5; python_version>='3.10'",
 ]
 
 [project]
diff --git a/scipy/meson.build b/scipy/meson.build
index a085784..8991171 100644
--- a/scipy/meson.build
+++ b/scipy/meson.build
@@ -43,7 +43,9 @@ thread_dep = dependency('threads', required: false)
 #   numpy-include-dir = /abspath/to/host-pythons/site-packages/numpy/core/include
 #
 # This uses the path as is, and avoids running the interpreter.
-incdir_numpy = meson.get_external_property('numpy-include-dir', 'not-given')
+#incdir_numpy = meson.get_external_property('numpy-include-dir', 'not-given')
+incdir_numpy = py3.get_install_dir() / 'numpy' / '_core' / 'include'
+incdir_numpy = incdir_numpy.replace('/boot/system/non-packaged', '/system')
 if incdir_numpy == 'not-given'
   incdir_numpy = run_command(py3,
     [
@@ -153,10 +155,10 @@ f2py = find_program('f2py')
 # details).
 # This should be robust enough. If not, we can make this more complex, using
 # a fallback to `python -m f2py` rather than erroring out.
-f2py_version = run_command([f2py, '-v'], check: true).stdout().strip()
-if f2py_version.version_compare('<'+min_numpy_version)
-  error(f'Found f2py executable is too old: @f2py_version@')
-endif
+#f2py_version = run_command([f2py, '-v'], check: true).stdout().strip()
+#if f2py_version.version_compare('<'+min_numpy_version)
+#  error(f'Found f2py executable is too old: @f2py_version@')
+#endif
 
 # Note: this generato cannot handle:
 # 1. `.pyf.src` files, because `@BASENAME@` will still include .pyf
-- 
2.45.2

