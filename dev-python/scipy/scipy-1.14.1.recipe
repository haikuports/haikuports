SUMMARY="Fundamental algorithms for scientific computing in Python"
DESCRIPTION="SciPy is an open source library of scientific tools for Python. \
SciPy supplements the popular numpy module, gathering a variety of high level \
science and engineering modules together as a single package. SciPy includes \
modules for graphics and plotting, optimization, integration, special \
functions, signal and image processing, genetic algorithms, ODE solvers, and \
others."
HOMEPAGE="https://www.scipy.org/"
COPYRIGHT=" 2001-2002 Enthought, Inc.
	2003-2024 SciPy Developers"
LICENSE="BSD (3-clause)"
REVISION="1"

SOURCE_URI="https://pypi.io/packages/source/s/$portName/$portName-$portVersion.tar.gz"
CHECKSUM_SHA256="5a275584e726026a5699459aa72f828a610821006228e841b94275c4a7c08417"
SOURCE_DIR="$portName-$portVersion"
PATCHES="$portName-$portVersion.patchset"

ARCHITECTURES="!all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	$portName = $portVersion
	"
REQUIRES="
	haiku$secondaryArchSuffix
	gcc${secondaryArchSuffix}_syslibs
	numpy$secondaryArchSuffix
	lib:liblapack$secondaryArchSuffix
	lib:libopenblas$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:liblapack$secondaryArchSuffix
	devel:libopenblas$secondaryArchSuffix
	"

PYTHON_VERSIONS=(3.10)

for i in "${!PYTHON_VERSIONS[@]}"; do
	pythonVersion=${PYTHON_VERSIONS[$i]}
	pythonPackage=python${pythonVersion//.}

	eval "PROVIDES_$pythonPackage=\"
		${portName}_$pythonPackage = $portVersion
		\""

	if [ "$targetArchitecture" = x86_gcc2 ]; then
		eval "PROVIDES_$pythonPackage+=\"
			$portName_$pythonPackage = $portVersion
			\""
	fi

	eval "REQUIRES_$pythonPackage=\"
		haiku$secondaryArchSuffix
		scipy$secondaryArchSuffix == $portVersion base
		cmd:python$pythonVersion
		\""

	BUILD_REQUIRES+="
		meson_python_$pythonPackage
		packaging_$pythonPackage
		pybind11_$pythonPackage
		cython_$pythonPackage
		numpy_$pythonPackage
		pip_$pythonPackage
		
		"
	BUILD_PREREQUIRES+="
		cmd:g++$secondaryArchSuffix
		cmd:gfortran$secondaryArchSuffix
		cmd:make
		cmd:ninja
		cmd:pkg_config$secondaryArchSuffix
		cmd:python$pythonVersion
		"
done


INSTALL()
{
	for i in "${!PYTHON_VERSIONS[@]}"; do
		pythonVersion=${PYTHON_VERSIONS[$i]}
		pythonPackage=python${pythonVersion//.}

		python=python$pythonVersion
		installLocation=$prefix/lib/$python/vendor-packages/
		export PYTHONPATH=$installLocation:$PYTHONPATH

		mkdir -p $installLocation
		rm -rf build

		pip$pythonVersion install . --root=/ --prefix=$prefix --no-build-isolation --verbose

		packageEntries $pythonPackage \
			$prefix/lib/python*
	done
}
