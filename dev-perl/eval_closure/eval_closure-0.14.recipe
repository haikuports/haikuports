SUMMARY="Safely and cleanly create closures via string eval"
DESCRIPTION="String eval is often used for dynamic code generation. For instance, Moose uses it \
heavily, to generate inlined versions of accessors and constructors, which speeds code up at \
runtime by a significant amount. String eval is not without its issues however - it's difficult \
to control the scope it's used in (which determines which variables are in scope inside the \
eval), and it's easy to miss compilation errors, since eval catches them and sticks them in \$@ \
instead.
This module attempts to solve these problems. It provides an eval_closure function, which evals a \
string in a clean environment, other than a fixed list of specified variables. Compilation errors \
are rethrown automatically."
HOMEPAGE="https://metacpan.org/pod/Eval::Closure"
COPYRIGHT="2016 by Jesse Luehrs"
LICENSE="Artistic"
REVISION="1"
SOURCE_URI="https://cpan.metacpan.org/authors/id/D/DO/DOY/Eval-Closure-$portVersion.tar.gz"
CHECKSUM_SHA256="ea0944f2f5ec98d895bef6d503e6e4a376fea6383a6bc64c7670d46ff2218cad"
SOURCE_DIR="Eval-Closure-$portVersion"

ARCHITECTURES="any"

PROVIDES="
	eval_closure = $portVersion
	"
REQUIRES="
	haiku
	vendor_perl
	"

BUILD_REQUIRES="
	haiku_devel
	"
BUILD_PREREQUIRES="
	cmd:make
	cmd:perl
	"

TEST_REQUIRES="
	test_fatal
	test_requires
	"

BUILD()
{
	perl Makefile.PL PREFIX=$prefix
	make
}

INSTALL()
{
	make pure_install

	# remove architecture-specific files
	cd $prefix
	rm -r $(perl -V:vendorarch | cut -d\' -f2 | cut -d/ -f5-)
		# cut extracts the quoted string and strips the prefix (which is perl's and not ours)
}

TEST()
{
	make test
}
