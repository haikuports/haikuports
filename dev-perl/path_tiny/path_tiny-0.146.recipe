SUMMARY="File path utility"
DESCRIPTION="This module provides a small, fast utility for working with file paths. It is \
friendlier to use than File::Spec and provides easy access to functions from several other core \
file handling modules. It aims to be smaller and faster than many alternatives on CPAN, while \
helping people do many common things in consistent and less error-prone ways.
Path::Tiny does not try to work for anything except Unix-like and Win32 platforms. Even then, it \
might break if you try something particularly obscure or tortuous. (Quick! What does this mean: \
///../../..//./././a//b/.././c/././? And how does it differ on Win32?)
All paths are forced to have Unix-style forward slashes. Stringifying the object gives you back \
the path (after some clean up).
File input/output methods flock handles before reading or writing, as appropriate (if supported \
by the platform and/or filesystem).
The *_utf8 methods (slurp_utf8, lines_utf8, etc.) operate in raw mode. On Windows, that means \
they will not have CRLF translation from the :crlf IO layer. Installing Unicode::UTF8 0.58 or \
later will speed up *_utf8 situations in many cases and is highly recommended. Alternatively, \
installing PerlIO::utf8_strict 0.003 or later will be used in place of the default \
:encoding(UTF-8).
This module depends heavily on PerlIO layers for correct operation and thus requires Perl \
5.008001 or later."
HOMEPAGE="https://metacpan.org/pod/Path::Tiny"
COPYRIGHT="2014 by David Golden"
LICENSE="Apache v2"
REVISION="1"
SOURCE_URI="https://cpan.metacpan.org/authors/id/D/DA/DAGOLDEN/Path-Tiny-$portVersion.tar.gz"
CHECKSUM_SHA256="861ef09bca68254e9ab24337bb6ec9d58593a792e9d68a27ee6bec2150f06741"
SOURCE_DIR="Path-Tiny-$portVersion"

ARCHITECTURES="any"

PROVIDES="
	path_tiny = $portVersion
	"
REQUIRES="
	haiku
	unicode_utf8
	vendor_perl
	"

BUILD_REQUIRES="
	haiku_devel
	"
BUILD_PREREQUIRES="
	cmd:make
	cmd:perl
	"

TEST_REQUIRES="
	unicode_utf8
	"

BUILD()
{
	perl Makefile.PL PREFIX=$prefix
	make
}

INSTALL()
{
	make pure_install

	# remove architecture-specific files
	cd $prefix
	rm -r $(perl -V:vendorarch | cut -d\' -f2 | cut -d/ -f5-)
		# cut extracts the quoted string and strips the prefix (which is perl's and not ours)
}

TEST()
{
	make test
}
