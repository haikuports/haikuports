SUMMARY="Building, finding and using SDL binaries"
DESCRIPTION="In short Alien::SDL can be used to detect and get configuration settings from an \
installed SDL and related libraries. Based on your platform it offers the possibility to download \
and install prebuilt binaries or to build SDL & co. from source codes.

The important facts:
* The module does not modify in any way the already existing SDL installation on your system.
* If you reinstall SDL libs on your system you do not need to reinstall Alien::SDL (providing \
that you use the same directory for the new installation).
* The prebuild binaries and/or binaries built from sources are always installed into perl \
module's 'share' directory.
* If you use prebuild binaries and/or binaries built from sources it happens that some of the \
dynamic libraries (*.so, *.dll) will not automaticly loadable as they will be stored somewhere \
under perl module's 'share' directory. To handle this scenario Alien::SDL offers some special \
functionality (see below)."
HOMEPAGE="https://metacpan.org/pod/Alien::SDL"
COPYRIGHT="2009-2015 Kartik Thakore"
LICENSE="Artistic"
REVISION="5"
SOURCE_URI="https://cpan.metacpan.org/authors/id/F/FR/FROGGS/Alien-SDL-$portVersion.tar.gz"
CHECKSUM_SHA256="c9aa2c9dc3c63d89773c7d7203f2a46d1b924d0c72d9f801af147a3dc8bc512a"
SOURCE_DIR="Alien-SDL-$portVersion"
PATCHES="alien_sdl-$portVersion.patchset"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	alien_sdl$secondaryArchSuffix = $portVersion
	cmd:sdl_config.pl
	"
if [ -n "$secondaryArchSuffix" ]; then
	PROVIDES+="
		alien_sdl = $portVersion
		"
fi
REQUIRES="
	haiku$secondaryArchSuffix
	capture_tiny
	file_sharedir
	file_which
	vendor_perl
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	archive_extract
	capture_tiny
	file_sharedir
	file_which
	module_build
	text_patch
	"
BUILD_PREREQUIRES="
	cmd:perl
	cmd:sdl_config$secondaryArchSuffix
	"

TEST_REQUIRES="
	cmd:gcc$secondaryArchSuffix
	devel:libsdl$secondaryArchSuffix
	"

PATCH()
{
	sed -i "s,'include','$relativeIncludeDir',g" lib/Alien/SDL.pm
}

BUILD()
{
	perl Build.PL --with-sdl-config --prefix $prefix
	./Build
}

INSTALL()
{
	./Build pure_install

	# remove architecture-specific files (this would be an "any" arch package,
	# but it isn't because of different paths on secondaryArch)
	cd $prefix
	rm -r $(perl -V:vendorarch | cut -d\' -f2 | cut -d/ -f5-)
		# cut extracts the quoted string and strips the prefix (which is perl's and not ours)
}

TEST()
{
	./Build test
}
