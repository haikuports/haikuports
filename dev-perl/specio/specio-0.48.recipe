SUMMARY="Type constraints and coercions for Perl"
DESCRIPTION="The Specio distribution provides classes for representing type constraints and \
coercion, along with syntax sugar for declaring them.
Note that this is not a proper type system for Perl. Nothing in this distribution will magically \
make the Perl interpreter start checking a value's type on assignment to a variable. In fact, \
there's no built-in way to apply a type to a variable at all.
Instead, you can explicitly check a value against a type, and optionally coerce values to that \
type.
My long-term goal is to replace Moose's built-in types and MooseX::Types with this module."
HOMEPAGE="https://metacpan.org/pod/Specio"
COPYRIGHT="2012 - 2022 by Dave Rolsky"
LICENSE="Artistic"
REVISION="1"
SOURCE_URI="https://cpan.metacpan.org/authors/id/D/DR/DROLSKY/Specio-$portVersion.tar.gz"
CHECKSUM_SHA256="0c85793580f1274ef08173079131d101f77b22accea7afa8255202f0811682b2"
SOURCE_DIR="Specio-$portVersion"

ARCHITECTURES="any"

PROVIDES="
	specio = $portVersion
	"
REQUIRES="
	haiku
	devel_stacktrace
	eval_closure
	module_runtime
	mro_compat
	ref_util
	role_tiny
	sub_quote
	test_fatal
	try_tiny
	vendor_perl
	xstring
	"

BUILD_REQUIRES="
	haiku_devel
	"
BUILD_PREREQUIRES="
	cmd:make
	cmd:perl
	"

TEST_REQUIRES="
	devel_stacktrace
	eval_closure
	module_runtime
	mro_compat
	ref_util
	role_tiny
	sub_quote
	test_fatal
	test_needs
	try_tiny
	xstring
	"

BUILD()
{
	perl Makefile.PL PREFIX=$prefix
	make
}

INSTALL()
{
	make pure_install

	# remove architecture-specific files
	cd $prefix
	rm -r $(perl -V:vendorarch | cut -d\' -f2 | cut -d/ -f5-)
		# cut extracts the quoted string and strips the prefix (which is perl's and not ours)
}

TEST()
{
	make test
}
