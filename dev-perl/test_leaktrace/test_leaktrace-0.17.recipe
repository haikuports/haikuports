SUMMARY="Traces memory leaks"
DESCRIPTION="Test::LeakTrace provides several functions that trace memory leaks. This module \
scans arenas, the memory allocation system, so it can detect any leaked SVs in given blocks.
Leaked SVs are SVs which are not released after the end of the scope they have been created. \
These SVs include global variables and internal caches. For example, if you call a method in a \
tracing block, perl might prepare a cache for the method. Thus, to trace true leaks, \
no_leaks_ok() and leaks_cmp_ok() executes a block more than once."
HOMEPAGE="https://metacpan.org/pod/Test::LeakTrace"
COPYRIGHT="2009-2010, Goro Fuji(gfx)"
LICENSE="Artistic"
REVISION="1"
SOURCE_URI="https://cpan.metacpan.org/authors/id/L/LE/LEEJO/Test-LeakTrace-$portVersion.tar.gz"
CHECKSUM_SHA256="777d64d2938f5ea586300eef97ef03eacb43d4c1853c9c3b1091eb3311467970"
SOURCE_DIR="Test-LeakTrace-$portVersion"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	test_leaktrace$secondaryArchSuffix = $portVersion
	"
if [ -n "$secondaryArchSuffix" ]; then
	PROVIDES+="
		test_leaktrace = $portVersion
		"
fi
REQUIRES="
	haiku$secondaryArchSuffix
	vendor_perl
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
BUILD_PREREQUIRES="
	cmd:gcc$secondaryArchSuffix
	cmd:make
	cmd:perl
	"

BUILD()
{
	perl Makefile.PL PREFIX=$prefix
	make
}

INSTALL()
{
	make pure_install
}

TEST()
{
	make test
}
