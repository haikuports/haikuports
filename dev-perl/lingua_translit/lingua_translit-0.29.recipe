SUMMARY="Transliterates text between writing systems"
DESCRIPTION="Lingua::Translit can be used to convert text from one writing system to another, \
based on national or international transliteration tables. Where possible a reverse \
transliteration is supported.
The term transliteration describes the conversion of text from one writing system or alphabet to \
another one. The conversion is ideally unique, mapping one character to exactly one character, so \
the original spelling can be reconstructed. Practically this is not always the case and one \
single letter of the original alphabet can be transcribed as two, three or even more letters.
Furthermore there is more than one transliteration scheme for one writing system. Therefore it is \
an important and necessary information, which scheme will be or has been used to transliterate a \
text, to work integrative and be able to reconstruct the original data.
Reconstruction is a problem though for non-unique transliterations, if no language specific \
knowledge is available as the resulting clusters of letters may be ambiguous. For example, the \
Greek character \"PSI\" maps to \"ps\", but \"ps\" could also result from the sequence \"PI\", \
\"SIGMA\" since \"PI\" maps to \"p\" and \"SIGMA\" maps to s. If a transliteration table leads to \
ambiguous conversions, the provided table cannot be used reverse.
Otherwise the table can be used in both directions, if appreciated. So if ISO 9 is originally \
created to convert Cyrillic letters to the Latin alphabet, the reverse transliteration will \
transform Latin letters to Cyrillic."
HOMEPAGE="https://metacpan.org/pod/Lingua::Translit"
COPYRIGHT="2007-2008 Alex Linke and Rona Linke
	2009-2016 Lingua-Systems Software GmbH
	2016-2017 Netzum Sorglos, Lingua-Systems Software GmbH
	2017-2022 Netzum Sorglos Software GmbH"
LICENSE="Artistic"
REVISION="1"
SOURCE_URI="https://cpan.metacpan.org/authors/id/A/AL/ALINKE/Lingua-Translit-$portVersion.tar.gz"
CHECKSUM_SHA256="1ad2fabc0079dad708b7d9d55437c9ebb192e610bf960af25945858b92597752"
SOURCE_DIR="Lingua-Translit-$portVersion"

ARCHITECTURES="any"

PROVIDES="
	lingua_translit = $portVersion
	cmd:translit
	"
REQUIRES="
	haiku
	vendor_perl
	"

BUILD_REQUIRES="
	haiku_devel
	"
BUILD_PREREQUIRES="
	cmd:make
	cmd:perl
	"

BUILD()
{
	perl Makefile.PL PREFIX=$prefix
	make
}

INSTALL()
{
	make pure_install

	# remove architecture-specific files
	cd $prefix
	rm -r $(perl -V:vendorarch | cut -d\' -f2 | cut -d/ -f5-)
		# cut extracts the quoted string and strips the prefix (which is perl's and not ours)
}

TEST()
{
	make test
}
