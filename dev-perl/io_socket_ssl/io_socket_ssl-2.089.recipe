SUMMARY="SSL sockets with IO::Socket interface"
DESCRIPTION="IO::Socket::SSL makes using SSL/TLS much easier by wrapping the necessary \
functionality into the familiar IO::Socket interface and providing secure defaults whenever \
possible. This way, existing applications can be made SSL-aware without much effort, at least if \
you do blocking I/O and don't use select or poll.
But, under the hood, SSL is a complex beast. So there are lots of methods to make it do what you \
need if the default behavior is not adequate. Because it is easy to inadvertently introduce \
critical security bugs or just hard to debug problems, I would recommend studying the \
documentation carefully."
HOMEPAGE="https://metacpan.org/pod/IO::Socket::SSL"
COPYRIGHT="2006-2014 Steffen Ullrich"
LICENSE="Artistic"
REVISION="1"
SOURCE_URI="https://cpan.metacpan.org/authors/id/S/SU/SULLR/IO-Socket-SSL-$portVersion.tar.gz"
CHECKSUM_SHA256="f683112c1642967e9149f51ad553eccd017833b2f22eb23a9055609d2e3a14d1"
SOURCE_DIR="IO-Socket-SSL-$portVersion"

ARCHITECTURES="any"

PROVIDES="
	io_socket_ssl = $portVersion
	"
REQUIRES="
	haiku
	net_ssleay
	vendor_perl
	"

BUILD_REQUIRES="
	haiku_devel
	"
BUILD_PREREQUIRES="
	cmd:make
	cmd:perl
	"

TEST_REQUIRES="
	net_ssleay
	"

BUILD()
{
	export NO_NETWORK_TESTING=1
	perl Makefile.PL PREFIX=$prefix
	make
}

INSTALL()
{
	make pure_install

	# remove architecture-specific files
	cd $prefix
	rm -r $(perl -V:vendorarch | cut -d\' -f2 | cut -d/ -f5-)
		# cut extracts the quoted string and strips the prefix (which is perl's and not ours)
}

TEST()
{
	# 1 test failed:
	# t/acceptSSL-timeout.t ............. Dubious, test returned 1 (wstat 256, 0x100)
	# Failed 6/15 subtests
	make test
}
