From 582dcee30889e4e5c3fac48e5e73be6ed74a027f Mon Sep 17 00:00:00 2001
From: Yourself <user@shredder.home>
Date: Tue, 25 Sep 2018 11:50:20 +0000
Subject: removed reference to unused sys/shm.h


diff --git a/src/net/tcpip.h b/src/net/tcpip.h
index 000071c..a13ad9d 100644
--- a/src/net/tcpip.h
+++ b/src/net/tcpip.h
@@ -27,7 +27,6 @@
 #   include <string.h>
 #   include <sys/time.h>
 #   include <sys/ipc.h>
-#   include <sys/shm.h>
 #   include <sys/socket.h>
 #   include <unistd.h>
 #   ifdef HAVE_BSTRING_H
-- 
2.19.0


From 4f1008bbd75c664f4d3b0dcce20981e8f740925a Mon Sep 17 00:00:00 2001
From: Yourself <user@shredder.home>
Date: Tue, 25 Sep 2018 11:55:32 +0000
Subject: replaced undeclared int32_t with int


diff --git a/src/intsect.cpp b/src/intsect.cpp
index 8df9cbf..79c0013 100644
--- a/src/intsect.cpp
+++ b/src/intsect.cpp
@@ -14,8 +14,8 @@
 
 #include <stdlib.h>
 
-void pushback(int32_t x1,int32_t y1,int32_t &x2,int32_t &y2,
-             int32_t xp1, int32_t yp1, int32_t xp2, int32_t yp2, int xdir, int ydir, int inside)
+void pushback(int x1,int y1,int &x2,int &y2,
+             int xp1, int yp1, int xp2, int yp2, int xdir, int ydir, int inside)
 {
 
    // determine if the lines are intersecting before we set back
@@ -27,10 +27,10 @@ void pushback(int32_t x1,int32_t y1,int32_t &x2,int32_t &y2,
 }
 
 
-/* int setback_intersect(int32_t x1,int32_t y1,int32_t &x2,int32_t &y2,
-             int32_t xp1, int32_t yp1, int32_t xp2, int32_t yp2)
+/* int setback_intersect(int x1,int y1,int &x2,int &y2,
+             int xp1, int yp1, int xp2, int yp2)
 {
-  int32_t mx1,my1,b1,mx2,my2,b2,side1,side2,tx2,ty2;
+  int mx1,my1,b1,mx2,my2,b2,side1,side2,tx2,ty2;
   my1=(y2-y1);
   if (!my1)                  // is the first line strait across?
   {
@@ -122,14 +122,14 @@ void pushback(int32_t x1,int32_t y1,int32_t &x2,int32_t &y2,
         {
           if (abs(mx1)>abs(my1))
           {
-            int32_t ae_bd=my1*mx2-mx1*my2;
+            int ae_bd=my1*mx2-mx1*my2;
             CONDITION(ae_bd,"line intersect fuck up");
             tx2=(mx1*mx2*(b2-b1))/ae_bd+xadd;
             ty2=my1*tx2/mx1+b1;
           }
           else
           {
-            int32_t db_ea=(my2*mx1-mx2*my1);
+            int db_ea=(my2*mx1-mx2*my1);
             CONDITION(db_ea,"line intersect fuck up");
             ty2=(mx1*b1*my2-my1*mx2*b2)/db_ea+yadd;
             tx2=mx1*(ty2-b1)/my1;
@@ -149,15 +149,15 @@ void pushback(int32_t x1,int32_t y1,int32_t &x2,int32_t &y2,
 } */
 
 
-int setback_intersect(int32_t x1,int32_t y1,int32_t &x2,int32_t &y2,
-              int32_t xp1, int32_t yp1, int32_t xp2, int32_t yp2,
-                     int32_t inside)  // which side is inside the polygon? (0 always setback)
+int setback_intersect(int x1,int y1,int &x2,int &y2,
+              int xp1, int yp1, int xp2, int yp2,
+                     int inside)  // which side is inside the polygon? (0 always setback)
 {
   // the line equations will be put in the form
   // x(y2-y1)+y(x1-x2)-x1*y2+x2*y1=0
   //     A        B        C
 
-  int32_t a1,b1,c1,a2,b2,c2,r1,r2;
+  int a1,b1,c1,a2,b2,c2,r1,r2;
 
   a1=y2-y1;
   b1=x1-x2;
@@ -169,8 +169,8 @@ int setback_intersect(int32_t x1,int32_t y1,int32_t &x2,int32_t &y2,
     r1=xp1; xp1=xp2; xp2=r1;
   }
 
-  int32_t xdiff,ydiff;
-/*  int32_t xdiff=abs(xp1-xp2),ydiff=yp1-yp2;
+  int xdiff,ydiff;
+/*  int xdiff=abs(xp1-xp2),ydiff=yp1-yp2;
   if (xdiff>=ydiff)                              // increment the endpoints
     if (xp2<xp1) { xp2--; xp1++; }
     else { xp2++; xp1--; }
@@ -199,7 +199,7 @@ int setback_intersect(int32_t x1,int32_t y1,int32_t &x2,int32_t &y2,
            (xp1>=xp2 && ((r2^inside)<0)) ||
        inside==0 || r2==0)
       {
-    int32_t ae=a1*b2,bd=b1*a2;
+    int ae=a1*b2,bd=b1*a2;
     if (ae!=bd)         // co-linear returns 0
     {
       x2=(b1*c2-b2*c1)/(ae-bd);
-- 
2.19.0

