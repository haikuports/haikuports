SUMMARY="Cross-platform Sextractor and Astrometry.net-Based internal astrometric solver"
DESCRIPTION="The Cross Platform SEP-based Star Extractor and Astrometry.net-Based Internal \
Astrometric Solver.
* An Astrometric Plate Solver for Mac, Linux, and Windows, built on Astrometry.net and SEP \
(SExtractor)
* Meant to be an internal library for use in a program like KStars for internal plate solving on \
all supported operating systems
* Python is not required for the library
* Netpbm is not required for the library
* Internal Library, so calls to external programs are not required
* No Astrometry.cfg file is needed, the settings are internal to the program
* Directly loads the image data into SEP and then passes the generated xy-list into \
astrometry.net, so there is no need to save any files.
* No temporary files need to be created for solving and no WCS file needs to be created to read \
the solved information.
* The Index Files are still required for solving images, but the program or the user can specify \
the folder locations rather than putting them in the config file.
* Note: The executable created by MainWindow is only meant for testing purposes. It is for \
developing and improving StellarSolver.cpp and the included libraries in the astrometry and sep folders. It can be used to compare the library to an existing installation of astrometry.net on the computer to perfect the settings."
HOMEPAGE="https://github.com/rlancaste/stellarsolver"
COPYRIGHT="2020 Rob Lancaster"
LICENSE="GNU GPL v3"
REVISION="1"
SOURCE_URI="https://github.com/rlancaste/stellarsolver/archive/refs/tags/$portVersion.tar.gz"
CHECKSUM_SHA256="539f3c312a3095afc117ae2c3111630f974a1c99dde7b0b7bebf16ee7a862a07"
PATCHES="stellarsolver-$portVersion.patchset"

ARCHITECTURES="all x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

commandSuffix=$secondaryArchSuffix
commandBinDir=$binDir
if [ "$targetArchitecture" = x86_gcc2 ]; then
	commandSuffix=
	commandBinDir=$prefix/bin
fi

libVersion="$portVersion"
libVersionCompat="$libVersion compat >= ${libVersion%.*}"

PROVIDES="
	stellarsolver$secondaryArchSuffix = $portVersion
	lib:libstellarsolver$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libcfitsio$secondaryArchSuffix
	lib:libgsl$secondaryArchSuffix
	lib:libQt5Core$secondaryArchSuffix
	lib:libwcs$secondaryArchSuffix
	"

PROVIDES_devel="
	stellarsolver${secondaryArchSuffix}_devel = $portVersion
	devel:libstellarsolver$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES_devel="
	stellarsolver$secondaryArchSuffix == $portVersion base
	"

PROVIDES_tools="
	stellarsolver${secondaryArchSuffix}_tools = $portVersion
	cmd:stellarsolvertester$commandSuffix = $portVersion
	"
REQUIRES_tools="
	$REQUIRES
	stellarsolver$secondaryArchSuffix == $portVersion
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libcfitsio$secondaryArchSuffix
	devel:libgsl$secondaryArchSuffix
	devel:libQt5Core$secondaryArchSuffix
	devel:libwcs$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:cmake
	cmd:gcc$secondaryArchSuffix
	cmd:make
	cmd:pkg_config$secondaryArchSuffix
	"

defineDebugInfoPackage stellarsolver$secondaryArchSuffix \
	$libDir/libstellarsolver.so.$libVersion

BUILD()
{
	cmake -Bbuild -S. -DCMAKE_BUILD_TYPE=Release \
		$cmakeDirArgs \
		-DCMAKE_INSTALL_BINDIR=$commandBinDir \
		-DBUILD_TESTER=ON \
		-Wno-dev
	make -Cbuild $jobArgs
}

INSTALL()
{
	make -Cbuild install

	rm -rf $prefix/share

	prepareInstalledDevelLib \
		libstellarsolver
	fixPkgconfig

	packageEntries devel \
		$developDir \
		$libDir/cmake

	packageEntries tools \
		$commandBinDir
}
