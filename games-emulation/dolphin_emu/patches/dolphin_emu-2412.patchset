From bc20c7f7d98d5a8ae8f362267ebb7907d0e69405 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Wed, 23 Dec 2020 14:30:54 +1000
Subject: applying patch dolphin-5.0.13178.patch


diff --git a/Source/Core/Core/HW/EXI/EXI_DeviceEthernet.h b/Source/Core/Core/HW/EXI/EXI_DeviceEthernet.h
index e432056..9e8fdd6 100644
--- a/Source/Core/Core/HW/EXI/EXI_DeviceEthernet.h
+++ b/Source/Core/Core/HW/EXI/EXI_DeviceEthernet.h
@@ -347,7 +347,7 @@ private:
 
   protected:
 #if defined(WIN32) || defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) ||          \
-    defined(__OpenBSD__)
+    defined(__OpenBSD__) || defined(__HAIKU__)
     std::thread readThread;
     Common::Flag readEnabled;
     Common::Flag readThreadShutdown;
-- 
2.45.2


From 6e5de969acb8d51423919a1b5d49585f0fa71d88 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Wed, 23 Dec 2020 14:43:33 +1000
Subject: Add haiku platform for SFML


diff --git a/Externals/SFML/include/SFML/Config.hpp b/Externals/SFML/include/SFML/Config.hpp
index aae5f54..4ea7e52 100644
--- a/Externals/SFML/include/SFML/Config.hpp
+++ b/Externals/SFML/include/SFML/Config.hpp
@@ -75,11 +75,11 @@
 
         // Android
         #define SFML_SYSTEM_ANDROID
-
+        
     #elif defined(__linux__)
 
          // Linux
-        #define SFML_SYSTEM_LINUX
+        #define SFML_SYSTEM_LINUXs
 
     #elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
 
@@ -98,6 +98,10 @@
 
     #endif
 
+#elif defined(__HAIKU__)
+
+         // Haiku
+    #define SFML_SYSTEM_HAIKU
 #else
 
     // Unsupported system
-- 
2.45.2


From bded2601b503eba5f39666e84cc2f8aee8630125 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Wed, 23 Dec 2020 14:43:58 +1000
Subject: Fix build miniupnpc


diff --git a/Externals/miniupnpc/src/minissdpc.c b/Externals/miniupnpc/src/minissdpc.c
index 235175c..10942cd 100644
--- a/Externals/miniupnpc/src/minissdpc.c
+++ b/Externals/miniupnpc/src/minissdpc.c
@@ -63,7 +63,7 @@ struct sockaddr_un {
 #define PRINT_SOCKET_ERROR(x) perror(x)
 #endif
 
-#if !defined(__DragonFly__) && !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__APPLE__) && !defined(_WIN32) && !defined(__CYGWIN__) && !defined(__sun) && !defined(__GNU__) && !defined(__FreeBSD_kernel__)
+#if !defined(__HAIKU__) && !defined(__DragonFly__) && !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__APPLE__) && !defined(_WIN32) && !defined(__CYGWIN__) && !defined(__sun) && !defined(__GNU__) && !defined(__FreeBSD_kernel__)
 #define HAS_IP_MREQN
 #endif
 
diff --git a/Externals/miniupnpc/src/portlistingparse.c b/Externals/miniupnpc/src/portlistingparse.c
index 0e09278..ed6165d 100644
--- a/Externals/miniupnpc/src/portlistingparse.c
+++ b/Externals/miniupnpc/src/portlistingparse.c
@@ -31,7 +31,7 @@ static const struct {
 
 /* Helper function */
 static UNSIGNED_INTEGER
-atoui(const char * p, int l)
+atoui2(const char * p, int l)
 {
 	UNSIGNED_INTEGER r = 0;
 	while(l > 0 && *p)
@@ -107,7 +107,7 @@ data(void * d, const char * data, int l)
 		pm->remoteHost[l] = '\0';
 		break;
 	case NewExternalPort:
-		pm->externalPort = (unsigned short)atoui(data, l);
+		pm->externalPort = (unsigned short)atoui2(data, l);
 		break;
 	case NewProtocol:
 		if(l > 3)
@@ -116,21 +116,21 @@ data(void * d, const char * data, int l)
 		pm->protocol[l] = '\0';
 		break;
 	case NewInternalPort:
-		pm->internalPort = (unsigned short)atoui(data, l);
+		pm->internalPort = (unsigned short)atoui2(data, l);
 		break;
 	case NewInternalClient:
 		memcpy(pm->internalClient, data, l);
 		pm->internalClient[l] = '\0';
 		break;
 	case NewEnabled:
-		pm->enabled = (unsigned char)atoui(data, l);
+		pm->enabled = (unsigned char)atoui2(data, l);
 		break;
 	case NewDescription:
 		memcpy(pm->description, data, l);
 		pm->description[l] = '\0';
 		break;
 	case NewLeaseTime:
-		pm->leaseTime = atoui(data, l);
+		pm->leaseTime = atoui2(data, l);
 		break;
 	default:
 		break;
-- 
2.45.2


From d06a517757f14848440a6b2934303c3935c976c3 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Wed, 23 Dec 2020 15:22:09 +1000
Subject: Disable SetLocale for Haiku


diff --git a/Source/Core/UICommon/UICommon.cpp b/Source/Core/UICommon/UICommon.cpp
index e4f79a6..cdf8942 100644
--- a/Source/Core/UICommon/UICommon.cpp
+++ b/Source/Core/UICommon/UICommon.cpp
@@ -190,6 +190,7 @@ void ShutdownControllers()
 
 void SetLocale(std::string locale_name)
 {
+#ifndef __HAIKU__
   auto set_locale = [](const std::string& locale) {
 #ifdef __linux__
     std::string adjusted_locale = locale;
@@ -243,6 +244,7 @@ void SetLocale(std::string locale_name)
 
   // If none of the locales tried above are supported, we just keep using whatever locale is set
   // (which is the classic locale by default).
+#endif
 }
 
 void CreateDirectories()
-- 
2.45.2


From 2dfeb05bce365d4d7d36bfb620a62e3d662a6f4c Mon Sep 17 00:00:00 2001
From: Ferdinand Bachmann <ferdinand.bachmann@yrlf.at>
Date: Sat, 4 Jan 2025 18:45:32 +0100
Subject: BBA/HLE: Fix incorrect fmt format string


diff --git a/Source/Core/Core/HW/EXI/BBA/BuiltIn.cpp b/Source/Core/Core/HW/EXI/BBA/BuiltIn.cpp
index 8e9248f..f1c0a5f 100644
--- a/Source/Core/Core/HW/EXI/BBA/BuiltIn.cpp
+++ b/Source/Core/Core/HW/EXI/BBA/BuiltIn.cpp
@@ -686,7 +686,7 @@ bool CEXIETHERNET::BuiltInBBAInterface::SendFrame(const u8* frame, u32 size)
   }
 
   default:
-    ERROR_LOG_FMT(SP1, "Unsupported EtherType {#06x}", *ethertype);
+    ERROR_LOG_FMT(SP1, "Unsupported EtherType {:#06x}", *ethertype);
     return false;
   }
 
-- 
2.45.2


From 3e0c63d49650be0e438f56034217de210048cb3a Mon Sep 17 00:00:00 2001
From: Ferdinand Bachmann <ferdinand.bachmann@yrlf.at>
Date: Sat, 4 Jan 2025 18:46:04 +0100
Subject: Common: Fix compile failure with fmt>=11


diff --git a/Source/Core/Common/Logging/Log.h b/Source/Core/Common/Logging/Log.h
index a13e9fe..4b40297 100644
--- a/Source/Core/Common/Logging/Log.h
+++ b/Source/Core/Common/Logging/Log.h
@@ -99,7 +99,13 @@ void GenericLogFmt(LogLevel level, LogType type, const char* file, int line, con
   static_assert(NumFields == sizeof...(args),
                 "Unexpected number of replacement fields in format string; did you pass too few or "
                 "too many arguments?");
-  GenericLogFmtImpl(level, type, file, line, format, fmt::make_format_args(args...));
+
+#if FMT_VERSION >= 110000
+  auto&& format_str = fmt::format_string<Args...>(format);
+#else
+  auto&& format_str = format;
+#endif
+  GenericLogFmtImpl(level, type, file, line, format_str, fmt::make_format_args(args...));
 }
 }  // namespace Common::Log
 
diff --git a/Source/Core/Common/MsgHandler.h b/Source/Core/Common/MsgHandler.h
index 23f8e90..0220c78 100644
--- a/Source/Core/Common/MsgHandler.h
+++ b/Source/Core/Common/MsgHandler.h
@@ -41,12 +41,17 @@ bool MsgAlertFmt(bool yes_no, MsgType style, Common::Log::LogType log_type, cons
   static_assert(NumFields == sizeof...(args),
                 "Unexpected number of replacement fields in format string; did you pass too few or "
                 "too many arguments?");
-#if FMT_VERSION >= 90000
+#if FMT_VERSION >= 110000
+  static_assert(std::is_base_of_v<fmt::detail::compile_string, S>);
+  auto&& format_str = fmt::format_string<Args...>(format);
+#elif FMT_VERSION >= 90000
   static_assert(fmt::detail::is_compile_string<S>::value);
+  auto&& format_str = format;
 #else
   static_assert(fmt::is_compile_string<S>::value);
+  auto&& format_str = format;
 #endif
-  return MsgAlertFmtImpl(yes_no, style, log_type, file, line, format,
+  return MsgAlertFmtImpl(yes_no, style, log_type, file, line, format_str,
                          fmt::make_format_args(args...));
 }
 
@@ -60,7 +65,9 @@ bool MsgAlertFmtT(bool yes_no, MsgType style, Common::Log::LogType log_type, con
   static_assert(NumFields == sizeof...(args),
                 "Unexpected number of replacement fields in format string; did you pass too few or "
                 "too many arguments?");
-#if FMT_VERSION >= 90000
+#if FMT_VERSION >= 110000
+  static_assert(std::is_base_of_v<fmt::detail::compile_string, S>);
+#elif FMT_VERSION >= 90000
   static_assert(fmt::detail::is_compile_string<S>::value);
 #else
   static_assert(fmt::is_compile_string<S>::value);
-- 
2.45.2


From 461708b6456d6b3b61a531c7d6c3c0a6a1fb7683 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Duval?= <jerome.duval@gmail.com>
Date: Sat, 25 Jan 2025 17:44:12 +0100
Subject: hidapi not present on Haiku


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3495e3b..0612acf 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -727,7 +727,7 @@ else()
   add_subdirectory(Externals/libiconv-1.14 EXCLUDE_FROM_ALL)
 endif()
 
-if(NOT ANDROID)
+if(NOT ANDROID AND NOT HAIKU)
   dolphin_find_optional_system_library(HIDAPI Externals/hidapi)
 endif()
 
-- 
2.45.2


From 0a4d0a2c8081e5a0753fe58e10b2deb5b6284152 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Duval?= <jerome.duval@gmail.com>
Date: Sun, 26 Jan 2025 11:29:50 +0100
Subject: traversal_server links with libnetwork on Haiku


diff --git a/Source/Core/Common/CMakeLists.txt b/Source/Core/Common/CMakeLists.txt
index 81431e5..051f2d2 100644
--- a/Source/Core/Common/CMakeLists.txt
+++ b/Source/Core/Common/CMakeLists.txt
@@ -210,7 +210,7 @@ elseif (ANDROID)
     androidcommon
   )
 elseif(HAIKU)
-  target_link_libraries(common PRIVATE be GL)
+  target_link_libraries(common PRIVATE be GL network)
 endif()
 
 if(ANDROID)
-- 
2.45.2

