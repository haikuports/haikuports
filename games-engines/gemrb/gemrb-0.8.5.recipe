SUMMARY="An infinite game engine generator"
DESCRIPTION="GemRB (Game Engine Made with preRendered Background) \
is a port (actually a new implementation) of the original Infinity \
Engine (the one of Baldur's Gate, Icewind Dale, Planescape: Torment, ...) \
to Linux/Unix, MacOS X and Windows with some enhancements. Would \
you like to create a game like Baldur's Gate?"
HOMEPAGE="https://github.com/gemrb/gemrb"
COPYRIGHT="2003-2017 The GemRB Team"
LICENSE="MIT"
REVISION="1"
SOURCE_URI="https://github.com/gemrb/gemrb/archive/v$portVersion.tar.gz"
CHECKSUM_SHA256="d927e1eebd13a4643db363087fc61c5d2242e8a614da261f15bf4e2b1d94965c"
SOURCE_FILENAME="gemrb-$portVersion.tar.gz"
PATCHES="gemrb-$portVersion.patchset"

ARCHITECTURES="x86_gcc2 x86 x86_64"
SECONDARY_ARCHITECTURES="x86"

GLOBAL_WRITABLE_FILES="
	settings/gemrb/GemRB.cfg.noinstall.sample keep-old
	settings/gemrb/GemRB.cfg.sample keep-old
	"

PROVIDES="
	gemrb$secondaryArchSuffix = $portVersion
	cmd:extend2da.py$secondaryArchSuffix = $portVersion
	cmd:gemrb$secondaryArchSuffix = $portVersion
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libfreetype$secondaryArchSuffix
	lib:libiconv$secondaryArchSuffix
	lib:libintl$secondaryArchSuffix
	lib:libogg$secondaryArchSuffix
	lib:libopenal$secondaryArchSuffix
	lib:libpng16$secondaryArchSuffix
	lib:libSDL_1.2$secondaryArchSuffix
	lib:libsdl_mixer$secondaryArchSuffix
	lib:libvorbis$secondaryArchSuffix
	lib:libz$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libfreetype$secondaryArchSuffix
	devel:libiconv$secondaryArchSuffix
	devel:libintl$secondaryArchSuffix
	devel:libogg$secondaryArchSuffix
	devel:libopenal$secondaryArchSuffix
	devel:libpng16$secondaryArchSuffix
	devel:libSDL$secondaryArchSuffix
	devel:libsdl_mixer$secondaryArchSuffix
	devel:libvorbis$secondaryArchSuffix
	devel:libz$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:cmake
	cmd:gcc$secondaryArchSuffix
	cmd:make
	cmd:python
	"

defineDebugInfoPackage gemrb$secondaryArchSuffix \
	"$binDir"/gemrb

BUILD()
{
	mkdir -p build
	cd build

	cmake .. \
		$cmakeDirArgs \
		-Wno-dev
	make $jobArgs
}

INSTALL()
{
	cd build
	make install

	# Just icons
	rm -rf $prefix/share
}
