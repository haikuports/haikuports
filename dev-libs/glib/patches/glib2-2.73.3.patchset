From e19bb27d45911e0354d21124e4276bbc868236d5 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 29 Jul 2017 12:13:00 +0200
Subject: g_dbus_message_print: use B_PRIiDEV on Haiku

because Haiku doesn't define major() and minor()

diff --git a/gio/gdbusmessage.c b/gio/gdbusmessage.c
index 7aebdeb..5dad399 100644
--- a/gio/gdbusmessage.c
+++ b/gio/gdbusmessage.c
@@ -37,8 +37,12 @@
 #elif MAJOR_IN_TYPES
 #include <sys/types.h>
 #else
+#ifdef __HAIKU__
+#include <SupportDefs.h>
+#else
 #define MAJOR_MINOR_NOT_FOUND 1
 #endif
+#endif
 
 #include "gdbusutils.h"
 #include "gdbusmessage.h"
@@ -3672,8 +3676,14 @@ g_dbus_message_print (GDBusMessage *message,
               if (fstat (fds[n], &statbuf) == 0)
                 {
 #ifndef MAJOR_MINOR_NOT_FOUND                       
+#ifdef __HAIKU__
+                  g_string_append_printf (fs, "%s" "dev=%" B_PRIiDEV, fs->len > 0 ? "," : "",
+                                          statbuf.st_dev);
+#else
+
                   g_string_append_printf (fs, "%s" "dev=%d:%d", fs->len > 0 ? "," : "",
                                           (gint) major (statbuf.st_dev), (gint) minor (statbuf.st_dev));
+#endif
 #endif                  
                   g_string_append_printf (fs, "%s" "mode=0%o", fs->len > 0 ? "," : "",
                                           (guint) statbuf.st_mode);
@@ -3684,9 +3694,14 @@ g_dbus_message_print (GDBusMessage *message,
                   g_string_append_printf (fs, "%s" "gid=%u", fs->len > 0 ? "," : "",
                                           (guint) statbuf.st_gid);
 #ifndef MAJOR_MINOR_NOT_FOUND                     
+#ifdef __HAIKU__
+                  g_string_append_printf (fs, "%s" "rdev=%" B_PRIiDEV, fs->len > 0 ? "," : "",
+                                          statbuf.st_rdev);
+#else
                   g_string_append_printf (fs, "%s" "rdev=%d:%d", fs->len > 0 ? "," : "",
                                           (gint) major (statbuf.st_rdev), (gint) minor (statbuf.st_rdev));
 #endif                  
+#endif
                   g_string_append_printf (fs, "%s" "size=%" G_GUINT64_FORMAT, fs->len > 0 ? "," : "",
                                           (guint64) statbuf.st_size);
                   g_string_append_printf (fs, "%s" "atime=%" G_GUINT64_FORMAT, fs->len > 0 ? "," : "",
-- 
2.36.1


From 38b33411c3f91cee2ffd91d1302d41d9ae917690 Mon Sep 17 00:00:00 2001
From: Emmanuel Gil Peyrot <linkmauve@linkmauve.fr>
Date: Mon, 23 Aug 2021 19:31:38 +0000
Subject: gunixmounts.c: Add Haiku support


diff --git a/gio/gunixmounts.c b/gio/gunixmounts.c
index 962b964..447d4b6 100644
--- a/gio/gunixmounts.c
+++ b/gio/gunixmounts.c
@@ -60,6 +60,9 @@
 #endif
 #include <sys/mount.h>
 #endif
+#ifdef __HAIKU__
+#include <kernel/fs_info.h>
+#endif
 
 #ifndef O_BINARY
 #define O_BINARY 0
@@ -958,6 +961,49 @@ _g_get_unix_mounts (void)
   return return_list;
 }
 
+/* Haiku {{{2 */
+#elif defined(__HAIKU__)
+
+static const char *
+get_mtab_monitor_file (void)
+{
+  return NULL;
+}
+
+static GList *
+_g_get_unix_mounts (void)
+{
+  int32 pos = 0;
+  GList* return_list = NULL;
+  struct fs_info info;
+  GUnixMountEntry* mount_entry;
+
+  while (1)
+    {
+      dev_t dev = next_dev (&pos);
+      if (dev < 0)
+        break;
+
+      if (fs_stat_dev (dev, &info) < 0)
+        continue;
+
+      mount_entry = g_new0 (GUnixMountEntry, 1);
+
+      mount_entry->mount_path = g_strdup (info.volume_name);
+      mount_entry->device_path = g_strdup (info.device_name);
+      mount_entry->filesystem_type = g_strdup (info.fsh_name);
+
+      mount_entry->is_read_only = (info.flags & B_FS_IS_READONLY) ? TRUE : FALSE;
+      mount_entry->is_system_internal = (info.flags & B_FS_IS_REMOVABLE) ? FALSE : TRUE;
+
+      return_list = g_list_prepend (return_list, mount_entry);
+    }
+
+  return_list = g_list_reverse (return_list);
+
+  return return_list;
+}
+
 /* QNX {{{2 */
 #elif defined (HAVE_QNX)
 
@@ -1491,16 +1537,8 @@ _g_get_unix_mount_points (void)
 
   return g_list_reverse (return_list);
 }
-/* Interix {{{2 */
-#elif defined(__INTERIX)
-static GList *
-_g_get_unix_mount_points (void)
-{
-  return _g_get_unix_mounts ();
-}
-
-/* QNX {{{2 */
-#elif defined (HAVE_QNX)
+/* Interix, QNX, Haiku {{{2 */
+#elif defined (__INTERIX) || defined (HAVE_QNX) || defined (__HAIKU__)
 static GList *
 _g_get_unix_mount_points (void)
 {
-- 
2.36.1


From 738132e93099b8313670757f54d5b1b0c9ca38e6 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 29 Jul 2017 12:32:14 +0200
Subject: glib/gutils.c: on Haiku define load_user_special_dirs()

use find_directory() from SupportDefs.h

diff --git a/glib/gutils.c b/glib/gutils.c
index 78ccd61..3f2ea32 100644
--- a/glib/gutils.c
+++ b/glib/gutils.c
@@ -78,6 +78,10 @@
 #include "gwin32.h"
 #endif
 
+#if defined(__HAIKU__)
+#include <FindDirectory.h>
+#include <fs_info.h>
+#endif
 
 /**
  * SECTION:misc_utils
@@ -1763,6 +1767,13 @@ g_build_user_data_dir (void)
 #ifdef G_OS_WIN32
   else
     data_dir = get_special_folder (&FOLDERID_LocalAppData);
+#elif defined(__HAIKU__)
+  else {
+  	char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+    dev_t volume = dev_for_path("/boot");
+    if (find_directory(B_USER_NONPACKAGED_DATA_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+      data_dir = g_strdup(path);
+  }
 #endif
   if (!data_dir || !data_dir[0])
     {
@@ -1827,6 +1838,13 @@ g_build_user_config_dir (void)
 #ifdef G_OS_WIN32
   else
     config_dir = get_special_folder (&FOLDERID_LocalAppData);
+#elif defined(__HAIKU__)
+  else {
+  	char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+    dev_t volume = dev_for_path("/boot");
+    if (find_directory(B_USER_SETTINGS_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+      config_dir = g_strdup(path);
+  }
 #endif
   if (!config_dir || !config_dir[0])
     {
@@ -1890,6 +1908,13 @@ g_build_user_cache_dir (void)
 #ifdef G_OS_WIN32
   else
     cache_dir = get_special_folder (&FOLDERID_InternetCache);
+#elif defined(__HAIKU__)
+  else {
+  	char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+    dev_t volume = dev_for_path("/boot");
+    if (find_directory(B_USER_CACHE_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+      cache_dir = g_strdup(path);
+  }
 #endif
   if (!cache_dir || !cache_dir[0])
     {
@@ -2091,6 +2116,35 @@ load_user_special_dirs (void)
   load_user_special_dirs_macos (g_user_special_dirs);
 }
 
+#elif defined(__HAIKU__)
+static void
+load_user_special_dirs (void)
+{
+  char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+
+  dev_t volume = dev_for_path("/boot");
+  if (find_directory(B_DESKTOP_DIRECTORY, volume, false, path, sizeof(path))
+      == B_OK) {
+    g_user_special_dirs[G_USER_DIRECTORY_DESKTOP] = g_strdup(path);
+    g_user_special_dirs[G_USER_DIRECTORY_DOWNLOAD] = g_strdup(path);
+  } else {
+    g_user_special_dirs[G_USER_DIRECTORY_DOCUMENTS] = NULL;
+    g_user_special_dirs[G_USER_DIRECTORY_DESKTOP] = NULL;
+  }
+
+  if (find_directory(B_USER_DIRECTORY, volume, false, path, sizeof(path))
+      == B_OK) {
+    g_user_special_dirs[G_USER_DIRECTORY_DOCUMENTS] = g_strdup(path);
+  } else
+    g_user_special_dirs[G_USER_DIRECTORY_DOWNLOAD] = NULL;
+
+  g_user_special_dirs[G_USER_DIRECTORY_MUSIC] = NULL;
+  g_user_special_dirs[G_USER_DIRECTORY_PICTURES] = NULL;
+  g_user_special_dirs[G_USER_DIRECTORY_PUBLIC_SHARE] = NULL;
+  g_user_special_dirs[G_USER_DIRECTORY_TEMPLATES] = NULL;
+  g_user_special_dirs[G_USER_DIRECTORY_VIDEOS] = NULL;
+}
+
 #elif defined(G_OS_WIN32)
 
 static void
@@ -2586,7 +2640,16 @@ g_build_system_data_dirs (void)
    */
 #ifndef G_OS_WIN32
   if (!data_dirs || !data_dirs[0])
+#if defined(__HAIKU__)
+    {
+  	  char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+      dev_t volume = dev_for_path("/boot");
+      if (find_directory(B_SYSTEM_DATA_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+        data_dirs = g_strdup(path);
+    }
+#else
     data_dirs = "/usr/local/share/:/usr/share/";
+#endif
 
   data_dir_vector = g_strsplit (data_dirs, G_SEARCHPATH_SEPARATOR_S, 0);
 #else
@@ -2681,6 +2744,20 @@ g_build_system_config_dirs (void)
 
       g_free (special_conf_dirs);
     }
+#elif defined(__HAIKU__)
+  if (conf_dirs)
+    {
+      conf_dir_vector = g_strsplit (conf_dirs, G_SEARCHPATH_SEPARATOR_S, 0);
+    }
+  else
+    {
+      char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+      dev_t volume = dev_for_path("/boot");
+      if (find_directory(B_SYSTEM_SETTINGS_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+        conf_dir_vector = g_strsplit (path, G_SEARCHPATH_SEPARATOR_S, 0);
+      else 
+        conf_dir_vector = g_strsplit ("", G_SEARCHPATH_SEPARATOR_S, 0);
+    }
 #else
   if (!conf_dirs || !conf_dirs[0])
     conf_dirs = "/etc/xdg";
-- 
2.36.1


From b0c7d261949f247cf4984b1a57c3fc3bb65db242 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 23 Nov 2019 20:10:10 +0100
Subject: Haiku patch for x86


diff --git a/glib/tests/mapping.c b/glib/tests/mapping.c
index ea3495c..94bdaf1 100644
--- a/glib/tests/mapping.c
+++ b/glib/tests/mapping.c
@@ -193,6 +193,10 @@ test_private (void)
   g_test_message ("test_private: ok");
 }
 
+#ifdef __HAIKU__
+#include <SupportDefs.h>
+#endif
+
 static void
 test_child_private (void)
 {
@@ -225,7 +229,12 @@ test_child_private (void)
   signal (SIGUSR1, handle_usr1);
 #endif
 
+#ifdef __HAIKU__
+  g_snprintf (pid, sizeof(pid), B_PRId32, getpid ());
+#else
   g_snprintf (pid, sizeof(pid), "%d", getpid ());
+#endif
+
   child_argv[0] = local_argv[0];
   child_argv[1] = "mapchild";
   child_argv[2] = pid;
-- 
2.36.1


From 3c23e1c48a8dc1346f26da7a091bb32cfc677125 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Tue, 17 Aug 2021 08:29:48 +0000
Subject: Fix network detection


diff --git a/gio/meson.build b/gio/meson.build
index 69bb060..c664c88 100644
--- a/gio/meson.build
+++ b/gio/meson.build
@@ -22,6 +22,7 @@ if host_system not in ['windows', 'android']
                         int qclass = C_IN;''',
                      name : 'C_IN in public headers (no arpa/nameser_compat.h needed)')
     if cc.compiles('''#include <sys/types.h>
+                      #include <stdint.h>
                       #include <arpa/nameser.h>
                       #include <arpa/nameser_compat.h>
                       int qclass = C_IN;''',
@@ -42,6 +43,7 @@ if host_system != 'windows'
                         return res_query("test", 0, 0, (void *)0, 0);
                       }'''
   res_query_test_full = '''#include <sys/types.h>
+                           #include <stdint.h>
                            #include <netinet/in.h>
                            #include <arpa/nameser.h>
                         ''' + res_query_test
@@ -55,6 +57,9 @@ if host_system != 'windows'
     elif cc.links(res_query_test, args : '-lsocket', name : 'res_query() in -lsocket')
       network_libs += [ cc.find_library('socket') ]
       network_args += [ '-lsocket' ]
+    elif cc.links(res_query_test, args : '-lnetwork', name : 'res_query() in -lnetwork')
+      network_libs += [ cc.find_library('network') ]
+      network_args += [ '-lnetwork' ]
     else
       error('Could not find res_query()')
     endif
-- 
2.36.1


From f4dca81a0efe06b15c4b4f1cff114d437ade5b6e Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Fri, 28 Jan 2022 10:49:17 +1000
Subject: Use find_directory if XDG vars not found


diff --git a/gio/xdgmime/xdgmime.c b/gio/xdgmime/xdgmime.c
index c3c1162..602175d 100644
--- a/gio/xdgmime/xdgmime.c
+++ b/gio/xdgmime/xdgmime.c
@@ -49,6 +49,11 @@
 #define S_ISREG(m) (((m) & _S_IFMT) == _S_IFREG)
 #endif
 
+#if defined(__HAIKU__)
+#include <FindDirectory.h>
+#include <fs_info.h>
+#endif
+
 typedef struct XdgDirTimeList XdgDirTimeList;
 typedef struct XdgCallbackList XdgCallbackList;
 
@@ -243,6 +248,25 @@ xdg_init_dirs (void)
   home = getenv ("HOME");
   xdg_data_dirs = getenv ("XDG_DATA_DIRS");
 
+#ifdef __HAIKU__
+  {
+    char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+    dev_t volume = dev_for_path("/boot");
+
+    if (xdg_data_home == NULL)
+      if (find_directory(B_USER_NONPACKAGED_DATA_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+        xdg_data_home = strdup(path);
+
+    if (home == NULL)
+      if (find_directory(B_USER_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+        home = strdup(path);
+
+    if (xdg_data_dirs == NULL)
+      if (find_directory(B_SYSTEM_DATA_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+        xdg_data_dirs = strdup(path);
+  }
+#endif
+
   if (xdg_data_dirs == NULL)
     xdg_data_dirs = "/usr/local/share/:/usr/share/";
 
-- 
2.36.1

