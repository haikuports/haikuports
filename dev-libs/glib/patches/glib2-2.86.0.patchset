From 353deff9a3e2c0e8c4b07acbf5f1a39f54bb1e92 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 29 Jul 2017 12:13:00 +0200
Subject: g_dbus_message_print: use B_PRIiDEV on Haiku

because Haiku doesn't define major() and minor()

diff --git a/gio/gdbusmessage.c b/gio/gdbusmessage.c
index 9212035..6bff430 100644
--- a/gio/gdbusmessage.c
+++ b/gio/gdbusmessage.c
@@ -37,8 +37,12 @@
 #elif MAJOR_IN_TYPES
 #include <sys/types.h>
 #else
+#ifdef __HAIKU__
+#include <SupportDefs.h>
+#else
 #define MAJOR_MINOR_NOT_FOUND 1
 #endif
+#endif
 
 #include "gdbusutils.h"
 #include "gdbusmessage.h"
@@ -3880,8 +3884,14 @@ g_dbus_message_print (GDBusMessage *message,
               if (fstat (fds[n], &statbuf) == 0)
                 {
 #ifndef MAJOR_MINOR_NOT_FOUND                       
+#ifdef __HAIKU__
+                  g_string_append_printf (fs, "%s" "dev=%" B_PRIiDEV, fs->len > 0 ? "," : "",
+                                          statbuf.st_dev);
+#else
+
                   g_string_append_printf (fs, "%s" "dev=%d:%d", fs->len > 0 ? "," : "",
                                           (gint) major (statbuf.st_dev), (gint) minor (statbuf.st_dev));
+#endif
 #endif                  
                   g_string_append_printf (fs, "%s" "mode=0%o", fs->len > 0 ? "," : "",
                                           (guint) statbuf.st_mode);
@@ -3892,9 +3902,14 @@ g_dbus_message_print (GDBusMessage *message,
                   g_string_append_printf (fs, "%s" "gid=%u", fs->len > 0 ? "," : "",
                                           (guint) statbuf.st_gid);
 #ifndef MAJOR_MINOR_NOT_FOUND                     
+#ifdef __HAIKU__
+                  g_string_append_printf (fs, "%s" "rdev=%" B_PRIiDEV, fs->len > 0 ? "," : "",
+                                          statbuf.st_rdev);
+#else
                   g_string_append_printf (fs, "%s" "rdev=%d:%d", fs->len > 0 ? "," : "",
                                           (gint) major (statbuf.st_rdev), (gint) minor (statbuf.st_rdev));
 #endif                  
+#endif
                   g_string_append_printf (fs, "%s" "size=%" G_GUINT64_FORMAT, fs->len > 0 ? "," : "",
                                           (guint64) statbuf.st_size);
                   g_string_append_printf (fs, "%s" "atime=%" G_GUINT64_FORMAT, fs->len > 0 ? "," : "",
-- 
2.50.1


From 8fc4bc1b2594789d9b031b1b2158dbf2b15f9362 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 29 Jul 2017 12:32:14 +0200
Subject: glib/gutils.c: on Haiku define load_user_special_dirs()

use find_directory() from SupportDefs.h

diff --git a/glib/gutils.c b/glib/gutils.c
index 9c0fbdf..f75fa2c 100644
--- a/glib/gutils.c
+++ b/glib/gutils.c
@@ -78,6 +78,10 @@
 #include "gwin32.h"
 #endif
 
+#if defined(__HAIKU__)
+#include <FindDirectory.h>
+#include <fs_info.h>
+#endif
 
 #ifdef G_PLATFORM_WIN32
 #  include <windows.h>
@@ -1876,6 +1880,13 @@ g_build_user_data_dir (void)
 #ifdef G_OS_WIN32
   else
     data_dir = get_special_folder (&FOLDERID_LocalAppData);
+#elif defined(__HAIKU__)
+  else {
+       char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+    dev_t volume = dev_for_path("/boot");
+    if (find_directory(B_USER_NONPACKAGED_DATA_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+      data_dir = g_strdup(path);
+  }
 #endif
   if (!data_dir || !data_dir[0])
     {
@@ -1941,6 +1952,13 @@ g_build_user_config_dir (void)
 #ifdef G_OS_WIN32
   else
     config_dir = get_special_folder (&FOLDERID_LocalAppData);
+#elif defined(__HAIKU__)
+  else {
+       char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+    dev_t volume = dev_for_path("/boot");
+    if (find_directory(B_USER_SETTINGS_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+      config_dir = g_strdup(path);
+  }
 #endif
   if (!config_dir || !config_dir[0])
     {
@@ -2208,6 +2226,35 @@ load_user_special_dirs (void)
   load_user_special_dirs_macos (g_user_special_dirs);
 }
 
+#elif defined(__HAIKU__)
+static void
+load_user_special_dirs (void)
+{
+  char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+
+  dev_t volume = dev_for_path("/boot");
+  if (find_directory(B_DESKTOP_DIRECTORY, volume, false, path, sizeof(path))
+      == B_OK) {
+    g_user_special_dirs[G_USER_DIRECTORY_DESKTOP] = g_strdup(path);
+    g_user_special_dirs[G_USER_DIRECTORY_DOWNLOAD] = g_strdup(path);
+  } else {
+    g_user_special_dirs[G_USER_DIRECTORY_DOCUMENTS] = NULL;
+    g_user_special_dirs[G_USER_DIRECTORY_DESKTOP] = NULL;
+  }
+
+  if (find_directory(B_USER_DIRECTORY, volume, false, path, sizeof(path))
+      == B_OK) {
+    g_user_special_dirs[G_USER_DIRECTORY_DOCUMENTS] = g_strdup(path);
+  } else
+    g_user_special_dirs[G_USER_DIRECTORY_DOWNLOAD] = NULL;
+
+  g_user_special_dirs[G_USER_DIRECTORY_MUSIC] = NULL;
+  g_user_special_dirs[G_USER_DIRECTORY_PICTURES] = NULL;
+  g_user_special_dirs[G_USER_DIRECTORY_PUBLIC_SHARE] = NULL;
+  g_user_special_dirs[G_USER_DIRECTORY_TEMPLATES] = NULL;
+  g_user_special_dirs[G_USER_DIRECTORY_VIDEOS] = NULL;
+}
+
 #elif defined(G_OS_WIN32)
 
 static void
@@ -2703,7 +2750,16 @@ g_build_system_data_dirs (void)
    */
 #ifndef G_OS_WIN32
   if (!data_dirs || !data_dirs[0])
+#if defined(__HAIKU__)
+    {
+         char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+      dev_t volume = dev_for_path("/boot");
+      if (find_directory(B_SYSTEM_DATA_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+        data_dirs = g_strdup(path);
+    }
+#else
     data_dirs = "/usr/local/share/:/usr/share/";
+#endif
 
   data_dir_vector = g_strsplit (data_dirs, G_SEARCHPATH_SEPARATOR_S, 0);
 #else
@@ -2798,6 +2854,20 @@ g_build_system_config_dirs (void)
 
       g_free (special_conf_dirs);
     }
+#elif defined(__HAIKU__)
+  if (conf_dirs)
+    {
+      conf_dir_vector = g_strsplit (conf_dirs, G_SEARCHPATH_SEPARATOR_S, 0);
+    }
+  else
+    {
+      char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+      dev_t volume = dev_for_path("/boot");
+      if (find_directory(B_SYSTEM_SETTINGS_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+        conf_dir_vector = g_strsplit (path, G_SEARCHPATH_SEPARATOR_S, 0);
+      else 
+        conf_dir_vector = g_strsplit ("", G_SEARCHPATH_SEPARATOR_S, 0);
+    }
 #else
   if (!conf_dirs || !conf_dirs[0])
     conf_dirs = "/etc/xdg";
-- 
2.50.1


From 73fa5925488775846d8c0a2287dee8266590d397 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Tue, 17 Aug 2021 08:29:48 +0000
Subject: Fix network detection


diff --git a/gio/meson.build b/gio/meson.build
index 39256d3..b3fcee8 100644
--- a/gio/meson.build
+++ b/gio/meson.build
@@ -26,6 +26,7 @@ if host_system not in ['windows', 'android']
                         int qclass = C_IN;''',
                      name : 'C_IN in public headers (no arpa/nameser_compat.h needed)')
     if cc.compiles('''#include <sys/types.h>
+                      #include <stdint.h>
                       #include <arpa/nameser.h>
                       #include <arpa/nameser_compat.h>
                       int qclass = C_IN;''',
@@ -46,6 +47,7 @@ if host_system != 'windows'
                         return res_query("test", 0, 0, (void *)0, 0);
                       }'''
   res_query_test_full = '''#include <sys/types.h>
+                           #include <stdint.h>
                            #include <netinet/in.h>
                            #include <arpa/nameser.h>
                         ''' + res_query_test
@@ -59,6 +61,9 @@ if host_system != 'windows'
     elif cc.links(res_query_test, args : '-lsocket', name : 'res_query() in -lsocket')
       network_libs += [ cc.find_library('socket') ]
       network_args += [ '-lsocket' ]
+    elif cc.links(res_query_test, args : '-lnetwork', name : 'res_query() in -lnetwork')
+      network_libs += [ cc.find_library('network') ]
+      network_args += [ '-lnetwork' ]
     else
       error('Could not find res_query()')
     endif
-- 
2.50.1


From 1e5cff02a773384a2dcf1a884df1a59b9f633154 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Thu, 5 Jan 2023 18:31:01 +1000
Subject: Use find_directory for xdgmime


diff --git a/gio/xdgmime/xdgmime.c b/gio/xdgmime/xdgmime.c
index 0909581..338c49c 100644
--- a/gio/xdgmime/xdgmime.c
+++ b/gio/xdgmime/xdgmime.c
@@ -29,6 +29,11 @@
 #include <unistd.h>
 #include <assert.h>
 
+#if defined(__HAIKU__)
+#include <FindDirectory.h>
+#include <fs_info.h>
+#endif
+
 #ifndef S_ISREG
 #define S_ISREG(m) (((m) & _S_IFMT) == _S_IFREG)
 #endif
@@ -223,6 +228,23 @@ xdg_init_dirs (void)
 
   assert (xdg_dirs == NULL);
 
+#ifdef __HAIKU__
+  current_dir = 0;
+  xdg_dirs = calloc (2, sizeof (char *));
+
+  char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+  dev_t volume = dev_for_path("/boot");
+  if (find_directory(B_SYSTEM_DATA_DIRECTORY, volume, false, path, sizeof(path)) == B_OK)
+    {
+      xdg_data_dirs = strdup(path);
+      strcat (xdg_data_dirs, "/mime/");
+    }
+  else
+    {
+      xdg_data_dirs = strdup("/system/data/mime/");
+    }
+  xdg_dirs[current_dir++] = xdg_data_dirs;
+#else
   xdg_data_home = getenv ("XDG_DATA_HOME");
   home = getenv ("HOME");
   xdg_data_dirs = getenv ("XDG_DATA_DIRS");
@@ -295,7 +317,7 @@ xdg_init_dirs (void)
 
       ptr = end_ptr;
     }
-
+#endif
   /* NULL terminator */
   xdg_dirs[current_dir] = NULL;
 
-- 
2.50.1


From 4209ebe88ea067af9ed98f022faf1add8d3b0fa3 Mon Sep 17 00:00:00 2001
From: Alexander von Gluck <alex@terarocket.io>
Date: Tue, 26 Aug 2025 10:38:29 -0500
Subject: glib: Disable kqueue on Haiku


diff --git a/meson.build b/meson.build
index acaf447..9d21bea 100644
--- a/meson.build
+++ b/meson.build
@@ -734,7 +734,6 @@ functions = [
   'inotify_init1',
   'issetugid',
   'kevent',
-  'kqueue',
   'lchmod',
   'lchown',
   'link',
@@ -781,6 +780,13 @@ if host_system == 'darwin'
   functions += ['_NSGetEnviron']
 endif
 
+# Haiku's kqueue implementation is not yet compatible
+if host_system != 'haiku'
+  functions += ['kqueue']
+else
+  have_func_kqueue = false
+endif
+
 if glib_conf.has('HAVE_SYS_STATVFS_H')
   functions += ['statvfs']
 else
-- 
2.50.1

