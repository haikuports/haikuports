SUMMARY="A portable lossless data compression library"
DESCRIPTION="LZO is a data compression library which is suitable for data \
de-/compression in real-time. This means it favours speed over compression \
ratio.
LZO is written in ANSI C. Both the source code and the compressed data format \
are designed to be portable across platforms.

LZO implements a number of algorithms with the following features:

* Decompression is simple and *very* fast.
* Requires no memory for decompression.
* Compression is pretty fast.
* Requires 64 kB of memory for compression.
* Allows you to dial up extra compression at a speed cost in the compressor. \
The speed of the decompressor is not reduced.
* Includes compression levels for generating pre-compressed data which achieve \
a quite competitive compression ratio.
* There is also a compression level which needs only 8 kB for compression.
* Algorithm is thread safe.
* Algorithm is lossless.
* LZO supports overlapping compression and in-place decompression."
HOMEPAGE="http://www.oberhumer.com/opensource/lzo/"
COPYRIGHT="1996-2011 Markus F.X.J Oberhumer"
LICENSE="GNU GPL v2"
REVISION="2"
SOURCE_URI="http://www.oberhumer.com/opensource/lzo/download/lzo-$portVersion.tar.gz"
CHECKSUM_SHA256="f294a7ced313063c057c504257f437c8335c41bfeed23531ee4e6a2b87bcb34c"

ARCHITECTURES="x86_gcc2 x86 x86_64"
SECONDARY_ARCHITECTURES="x86 x86_gcc2"

PROVIDES="
	lzo$secondaryArchSuffix = $portVersion
	lib:liblzo2$secondaryArchSuffix = 2.0.0 compat >= 2
	"
REQUIRES="
	haiku$secondaryArchSuffix
	"

PROVIDES_devel="
	lzo${secondaryArchSuffix}_devel = $portVersion
	devel:liblzo2$secondaryArchSuffix = 2.0.0 compat >= 2
	"
REQUIRES_devel="
	lzo$secondaryArchSuffix == $portVersion base
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
BUILD_PREREQUIRES="
	cmd:gcc$secondaryArchSuffix
	cmd:make
	cmd:awk
	"

BUILD()
{
	runConfigure ./configure --enable-shared
	make $jobArgs
}

INSTALL()
{
	make install

	rm $libDir/liblzo2.la

	prepareInstalledDevelLib liblzo2
	packageEntries devel $developDir $documentationDir
}

TEST()
{
	make check
}
