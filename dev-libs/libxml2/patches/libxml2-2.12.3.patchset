From 88c7b532d4f767284014f9c9cdd199a7470eae4a Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@pulkomandy.tk>
Date: Wed, 1 Jan 2014 22:13:22 +0100
Subject: Port patches from libxml2-2.8.0.

--- xml2-config.in.orig	2023-11-16 04:17:02.031195136 -0800
+++ xml2-config.in	2024-01-13 14:47:47.172228608 -0800
@@ -40,8 +40,8 @@
     case "$1" in
     --prefix=*)
 	prefix=$optarg
-	includedir=$prefix/include
-	libdir=$prefix/lib
+	includedir=$prefix/develop/headers
+	libdir=$prefix/develop/lib
 	;;
 
     --prefix)
@@ -50,7 +50,7 @@
 
     --exec-prefix=*)
       exec_prefix=$optarg
-      libdir=$exec_prefix/lib
+      libdir=$exec_prefix/develop/lib
       ;;
 
     --exec-prefix)
From 1943f113e77ec2fd7f180c0f09fc20b62ebaeada Mon Sep 17 00:00:00 2001
From: Jessica Hamilton <jessica.l.hamilton@gmail.com>
Date: Sat, 30 May 2015 11:38:15 +1200
Subject: Haiku: search for catalogs in directories

--- catalog.c.orig	2023-11-16 04:17:02.066060288 -0800
+++ catalog.c	2024-01-13 15:08:06.565968896 -0800
@@ -18,6 +18,9 @@
 #ifdef LIBXML_CATALOG_ENABLED
 #include <stdlib.h>
 #include <string.h>
+#ifdef __HAIKU__
+#include <ftw.h>
+#endif
 #ifdef HAVE_SYS_STAT_H
 #include <sys/stat.h>
 #endif
@@ -67,10 +70,10 @@
 #define XML_URN_PUBID "urn:publicid:"
 #define XML_CATAL_BREAK ((xmlChar *) -1)
 #ifndef XML_XML_DEFAULT_CATALOG
-#define XML_XML_DEFAULT_CATALOG "file://" SYSCONFDIR "/xml/catalog"
+#define XML_XML_DEFAULT_CATALOG "/boot/system/data/xml/catalog"
 #endif
 #ifndef XML_SGML_DEFAULT_CATALOG
-#define XML_SGML_DEFAULT_CATALOG "file://" SYSCONFDIR "/sgml/catalog"
+#define XML_SGML_DEFAULT_CATALOG "/boot/system/data/sgml/catalog"
 #endif
 
 #if defined(_WIN32) && defined(_MSC_VER)
@@ -3066,6 +3069,21 @@
  *									*
  ************************************************************************/
 
+#ifdef __HAIKU__
+static xmlCatalogEntryPtr *__haikuNextEntry;
+static int __haikuAddCatalog(const char* subpath, const struct stat* sb, int typeflag)
+{
+	if (typeflag == FTW_F) {
+		*__haikuNextEntry = xmlNewCatalogEntry(XML_CATA_CATALOG, NULL,
+			NULL, BAD_CAST subpath, xmlCatalogDefaultPrefer, NULL);
+		if (*__haikuNextEntry != NULL)
+			__haikuNextEntry = &((*__haikuNextEntry)->next);
+	}
+
+	return 0;
+}
+#endif
+
 /**
  * xmlInitializeCatalogData:
  *
@@ -3158,10 +3176,16 @@
 			cur++;
 		    path = (char *) xmlStrndup((const xmlChar *)paths, cur - paths);
 		    if (path != NULL) {
+#ifdef __HAIKU__
+			__haikuNextEntry = nextent;
+			ftw(path, __haikuAddCatalog, 3);
+			nextent = __haikuNextEntry;
+#else
 			*nextent = xmlNewCatalogEntry(XML_CATA_CATALOG, NULL,
 				NULL, BAD_CAST path, xmlCatalogDefaultPrefer, NULL);
 			if (*nextent != NULL)
 			    nextent = &((*nextent)->next);
+#endif
 			xmlFree(path);
 		    }
 		}
