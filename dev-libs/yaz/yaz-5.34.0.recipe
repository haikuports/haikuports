SUMMARY="C/C++ toolkit for Z39.50v3 clients and servers"
DESCRIPTION="YAZ is a C/C++ library for information retrieval applications using the Z39.50/SRU/\
Solr protocols for information retrieval.

Properties of YAZ:
* Complete Z39.50 version 3 support. Amendments and Z39.50-2002 revision is supported.
* Supports SRU GET/POST/SOAP version 1.1, 1.2 and 2.0 (over HTTP and HTTPS).
* Includes BER encoders/decoders for the ISO ILL protocol.
* Supports Apache Solr Web Service version 1.4.x (client side only)
* Supports the following transports: BER over TCP/IP (RFC1729), BER over Unix local socket, and \
HTTP 1.1.
* Secure Socket Layer support using GnuTLS. If enabled, YAZ uses HTTPS transport (for SOAP) or \
'Secure BER' (for Z39.50).
* Offers ZOOM C API implementing Z39.50, SRU and Solr Web Service.
* The YAZ library offers a set of useful utilities related to the protocols, such as MARC \
(ISO2709) parser, CCL (ISO8777) parser, CQL parser, memory management routines, character set \
conversion.
* Portable code. YAZ compiles out-of-the box on most Unixes and on Windows using Microsoft Visual \
C++.
* Fast operation. The C based BER encoders/decoders as well as the server component of YAZ is \
very fast.
* Liberal license that allows for commercial use of YAZ."
HOMEPAGE="http://www.indexdata.com/yaz"
COPYRIGHT="1995-2023 Index Data"
LICENSE="BSD (3-clause)"
REVISION="1"
SOURCE_URI="https://download.indexdata.com/pub/yaz/yaz-$portVersion.tar.gz"
CHECKSUM_SHA256="bcbea894599a13342910003401c17576f0fb910092aecb51cb54065d0cd2d613"
PATCHES="yaz-$portVersion.patchset"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

commandSuffix=$secondaryArchSuffix
commandBinDir=$binDir
if [ "$targetArchitecture" = x86_gcc2 ]; then
	commandSuffix=
	commandBinDir=$prefix/bin
fi

libVersion="5.0.0"
libVersionCompat="$libVersion compat >= ${libVersion%.*}"

PROVIDES="
	yaz$secondaryArchSuffix = $portVersion
	cmd:yaz_client$commandSuffix
	lib:libyaz_icu$secondaryArchSuffix = $libVersionCompat
	lib:libyaz_server$secondaryArchSuffix = $libVersionCompat
	lib:libyaz$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libexslt$secondaryArchSuffix
	lib:libgnutls$secondaryArchSuffix
	lib:libhiredis$secondaryArchSuffix
	lib:libhistory$secondaryArchSuffix
	lib:libiconv$secondaryArchSuffix
	lib:libicudata$secondaryArchSuffix
	lib:libicui18n$secondaryArchSuffix
	lib:libicuuc$secondaryArchSuffix
	lib:libncurses$secondaryArchSuffix
	lib:libreadline$secondaryArchSuffix
	lib:libxml2$secondaryArchSuffix
	lib:libxslt$secondaryArchSuffix
	"

PROVIDES_devel="
	yaz${secondaryArchSuffix}_devel = $portVersion
	cmd:yaz_config$commandSuffix
	devel:libyaz_icu$secondaryArchSuffix = $libVersionCompat
	devel:libyaz_server$secondaryArchSuffix = $libVersionCompat
	devel:libyaz$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES_devel="
	yaz$secondaryArchSuffix == $portVersion base
	devel:libxml2$secondaryArchSuffix
	devel:libxslt$secondaryArchSuffix
	devel:libz$secondaryArchSuffix
	"

PROVIDES_tools="
	yaz${secondaryArchSuffix}_tools = $portVersion
	cmd:yaz_asncomp$commandSuffix
	cmd:yaz_iconv$commandSuffix
	cmd:yaz_icu$commandSuffix
	cmd:yaz_illclient$commandSuffix
	cmd:yaz_json_parse$commandSuffix
	cmd:yaz_marcdump$commandSuffix
	cmd:yaz_record_conv$commandSuffix
	cmd:yaz_url$commandSuffix
	cmd:yaz_ztest$commandSuffix
	cmd:zoomsh$commandSuffix
	"
REQUIRES_tools="
	yaz$secondaryArchSuffix == $portVersion
	$REQUIRES
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libgnutls$secondaryArchSuffix
	devel:libhiredis$secondaryArchSuffix
	devel:libiconv$secondaryArchSuffix
	devel:libicui18n$secondaryArchSuffix >= 74
	devel:libncurses$secondaryArchSuffix
	devel:libreadline$secondaryArchSuffix
	devel:libtclstub8.6$secondaryArchSuffix
	devel:libxml2$secondaryArchSuffix
	devel:libxslt$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:awk
	cmd:bison
	cmd:autoreconf
	cmd:gcc$secondaryArchSuffix
	cmd:libtoolize$secondaryArchSuffix
	cmd:make
	cmd:pkg_config$secondaryArchSuffix
	cmd:xsltproc
	"

defineDebugInfoPackage yaz$secondaryArchSuffix \
	$libDir/libyaz_icu.so.$libVersion \
	$libDir/libyaz_server.so.$libVersion \
	$libDir/libyaz.so.$libVersion

PATCH()
{
	# Hardcoded assumption of libraries residing in lib/,
	sed -i -e "s|/lib\"|/$libDir\"|" configure.ac
}

BUILD()
{
	export LDFLAGS="-lnetwork"
	autoreconf -fi
	runConfigure --omit-dirs "binDir" ./configure \
		--bindir=$commandBinDir \
		--with-gnutls \
		--disable-static
	make $jobArgs
}

INSTALL()
{
	make install

	# remove libtool files
	rm -f $libDir/*.la

	prepareInstalledDevelLibs \
		libyaz_icu \
		libyaz_server \
		libyaz
	fixPkgconfig

	packageEntries devel \
		$developDir \
		$commandBinDir/yaz-config \
		$manDir/man1/yaz-config.1 \
		$dataDir/doc

	packageEntries tools \
		$commandBinDir/yaz-asncomp \
		$commandBinDir/yaz-iconv \
		$commandBinDir/yaz-icu \
		$commandBinDir/yaz-illclient \
		$commandBinDir/yaz-json-parse \
		$commandBinDir/yaz-marcdump \
		$commandBinDir/yaz-record-conv \
		$commandBinDir/yaz-url \
		$commandBinDir/yaz-ztest \
		$commandBinDir/zoomsh \
		$manDir/man8 \
		$manDir/man1/yaz-asncomp.1 \
		$manDir/man1/yaz-iconv.1 \
		$manDir/man1/yaz-icu.1 \
		$manDir/man1/yaz-illclient.1 \
		$manDir/man1/yaz-json-parse.1 \
		$manDir/man1/yaz-marcdump.1 \
		$manDir/man1/yaz-record-conv.1 \
		$manDir/man1/yaz-url.1 \
		$manDir/man1/zoomsh.1
}

TEST()
{
	make check
}
