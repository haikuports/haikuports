SUMMARY="A fast JSON parser/generator for C++ with both SAX/DOM style API"
DESCRIPTION="RapidJSON is a JSON parser and generator for C++. It was \
inspired by RapidXml.

RapidJSON is small but complete. It supports both SAX and DOM style API. The \
SAX parser is only a half thousand lines of code.

RapidJSON is fast. Its performance can be comparable to strlen(). It also \
optionally supports SSE2/SSE4.2 for acceleration.

RapidJSON is self-contained and header-only. It does not depend on external \
libraries such as BOOST. It even does not depend on STL.

RapidJSON is memory-friendly. Each JSON value occupies exactly 16 bytes for \
most 32/64-bit machines (excluding text string). By default it uses a fast \
memory allocator, and the parser allocates memory compactly during parsing.

RapidJSON is Unicode-friendly. It supports UTF-8, UTF-16, UTF-32 (LE & BE), \
and their detection, validation and transcoding internally. For example, you \
can read a UTF-8 file and let RapidJSON transcode the JSON strings into \
UTF-16 in the DOM. It also supports surrogates and \"\u0000\" \
(null character)."
HOMEPAGE="https://github.com/Tencent/rapidjson"
COPYRIGHT="2015 THL A29 Limited, a Tencent company, and Milo Yip"
LICENSE="MIT"
REVISION="1"
srcGitRev="24b5e7a8b27f42fa16b96fc70aade9106cf7102f"
SOURCE_URI="https://github.com/Tencent/rapidjson/archive/$srcGitRev.tar.gz"
CHECKSUM_SHA256="2d2601a82d2d3b7e143a3c8d43ef616671391034bc46891a9816b79cf2d3e7a8"
SOURCE_FILENAME="rapidjson-$portVersion.tar.gz"
SOURCE_DIR="rapidjson-$srcGitRev"
PATCHES="rapidjson-$portVersion.patchset"

ARCHITECTURES="all"
SECONDARY_ARCHITECTURES="x86"

libVersion="$portVersion"
libVersionCompat="$libVersion compat >= ${libVersion%%.*}"

PROVIDES="
	rapidjson$secondaryArchSuffix = $portVersion
	devel:librapidjson$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES="
	haiku$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
BUILD_PREREQUIRES="
	cmd:cmake
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:make
	cmd:pkg_config$secondaryArchSuffix
	"

BUILD()
{
	cmake -B build -S . -DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX=$prefix \
		-DDOC_INSTALL_DIR=$docDir \
		-DLIB_INSTALL_DIR=$libDir \
		-DINCLUDE_INSTALL_DIR=$includeDir \
		-DBUILD_SHARED_LIBS=ON \
		-DRAPIDJSON_BUILD_DOC=ON \
		-DRAPIDJSON_BUILD_EXAMPLES=OFF \
		-DRAPIDJSON_BUILD_TESTS=ON \
		-DRAPIDJSON_BUILD_THIRDPARTY_GTEST=OFF \
		-Wno-dev

	make -C build $jobArgs
}

INSTALL()
{
	make -C build install

	fixPkgconfig
}

TEST()
{
	ctest --test-dir build --output-on-failure
}
