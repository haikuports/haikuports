From cbc626edcd4920704f74d271acc1fd6dac508b2e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fran=C3=A7ois=20Revol?= <revol@free.fr>
Date: Tue, 20 Nov 2018 21:16:37 +0100
Subject: [PATCH 1/2] build: KEYCHAIN_DBUS

---
 CMakeLists.txt |  1 +
 keychain_p.h   | 10 +++++-----
 2 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8e5320e..185fa68 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -160,6 +160,7 @@ if(UNIX AND NOT APPLE AND NOT ANDROID)
         list(APPEND qtkeychain_LIBRARIES ${LIBSECRET_LIBRARIES})
     endif()
 
+    add_definitions(-DKEYCHAIN_DBUS=1)
     list(APPEND qtkeychain_SOURCES keychain_unix.cpp gnomekeyring.cpp libsecret.cpp plaintextstore.cpp)
     qt_add_dbus_interface(qtkeychain_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/org.kde.KWallet.xml kwallet_interface KWalletInterface)
     list(APPEND qtkeychain_LIBRARIES ${QTDBUS_LIBRARIES} )
diff --git a/keychain_p.h b/keychain_p.h
index ab7f0be..58c0fd6 100644
--- a/keychain_p.h
+++ b/keychain_p.h
@@ -15,7 +15,7 @@
 #include <QSettings>
 #include <QQueue>
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_DARWIN) && !defined(Q_OS_ANDROID)
+#if defined(KEYCHAIN_DBUS)
 
 #include <QDBusPendingCallWatcher>
 
@@ -49,7 +49,7 @@ public:
     Mode mode;
     QByteArray data;
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_DARWIN) && !defined(Q_OS_ANDROID)
+#if defined(KEYCHAIN_DBUS)
     org::kde::KWallet* iface;
     int walletHandle;
 
@@ -93,7 +93,7 @@ public:
     explicit ReadPasswordJobPrivate( const QString &service_, ReadPasswordJob* qq );
     void scheduledStart();
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_DARWIN) && !defined(Q_OS_ANDROID)
+#if defined(KEYCHAIN_DBUS)
     void fallbackOnError(const QDBusError& err);
 
 private Q_SLOTS:
@@ -116,7 +116,7 @@ public:
     explicit WritePasswordJobPrivate( const QString &service_, WritePasswordJob* qq );
     void scheduledStart();
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_DARWIN) && !defined(Q_OS_ANDROID)
+#if defined(KEYCHAIN_DBUS)
     void fallbackOnError(const QDBusError& err);
 #endif
 
@@ -130,7 +130,7 @@ public:
 
     void scheduledStart();
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_DARWIN) && !defined(Q_OS_ANDROID)
+#if defined(KEYCHAIN_DBUS)
     void fallbackOnError(const QDBusError& err);
 #endif
 
-- 
2.24.1


From 2f535170e6792dfc48606ebc9d3b6753984f5fca Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fran=C3=A7ois=20Revol?= <revol@free.fr>
Date: Sat, 17 Nov 2018 18:38:47 +0100
Subject: [PATCH 2/2] Add Haiku support

We had to work around QCoreApplication not creating a BApplication:
When not used in a GUI application, we must create a BApplication object
ourselves as it's required for the API we use.
At least until QCoreApplication is fixed to create one maybe.
---
 CMakeLists.txt     |  17 ++++-
 keychain_haiku.cpp | 187 +++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 201 insertions(+), 3 deletions(-)
 create mode 100644 keychain_haiku.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 185fa68..db7273d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -26,6 +26,10 @@ if(CMAKE_SYSTEM_NAME STREQUAL Android)
     set(ANDROID 1)
 endif()
 
+if(CMAKE_SYSTEM_NAME STREQUAL Haiku)
+    set(HAIKU 1)
+endif()
+
 if (WIN32)
     option(USE_CREDENTIAL_STORE "Build with windows CredentialStore support" ON)
 
@@ -42,7 +46,7 @@ endif()
 if (Qt5Core_FOUND AND NOT BUILD_WITH_QT4)
   set(QTKEYCHAIN_VERSION_INFIX 5)
 
-  if(UNIX AND NOT APPLE AND NOT ANDROID)
+  if(UNIX AND NOT APPLE AND NOT ANDROID AND NOT HAIKU)
     find_package(Qt5DBus REQUIRED)
     include_directories(${Qt5DBus_INCLUDE_DIRS})
     set(QTDBUS_LIBRARIES ${Qt5DBus_LIBRARIES})
@@ -147,7 +151,14 @@ if(APPLE)
     list(APPEND qtkeychain_LIBRARIES ${SECURITY_LIBRARY})
 endif()
 
-if(UNIX AND NOT APPLE AND NOT ANDROID)
+if(HAIKU)
+    list(APPEND qtkeychain_SOURCES keychain_haiku.cpp)
+
+    find_library(BE_LIBRARY be REQUIRED)
+    list(APPEND qtkeychain_LIBRARIES ${BE_LIBRARY})
+endif()
+
+if(UNIX AND NOT APPLE AND NOT ANDROID AND NOT HAIKU)
     option(LIBSECRET_SUPPORT "Build with libsecret support" ON)
 
     if(LIBSECRET_SUPPORT)
@@ -252,7 +263,7 @@ ecm_setup_version("${QTKEYCHAIN_VERSION}" VARIABLE_PREFIX SNORE
   PACKAGE_VERSION_FILE "${CMAKE_CURRENT_BINARY_DIR}/Qt${QTKEYCHAIN_VERSION_INFIX}KeychainConfigVersion.cmake"
   SOVERSION ${QTKEYCHAIN_VERSION})
 
-if(UNIX AND NOT APPLE AND NOT ANDROID)
+if(UNIX AND NOT APPLE AND NOT ANDROID AND NOT HAIKU)
     set(PRI_EXTRA_DEPS "dbus")
 endif()
 ecm_generate_pri_file(BASE_NAME Qt${QTKEYCHAIN_VERSION_INFIX}Keychain
diff --git a/keychain_haiku.cpp b/keychain_haiku.cpp
new file mode 100644
index 0000000..58b1ab7
--- /dev/null
+++ b/keychain_haiku.cpp
@@ -0,0 +1,187 @@
+/******************************************************************************
+ *   Copyright (C) 2018 Fran√ßois Revol <revol@free.fr>                        *
+ *                                                                            *
+ * This program is distributed in the hope that it will be useful, but        *
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY *
+ * or FITNESS FOR A PARTICULAR PURPOSE. For licensing and distribution        *
+ * details, check the accompanying file 'COPYING'.                            *
+ *****************************************************************************/
+#include "keychain_p.h"
+
+#include <KeyStore.h>
+
+#include <Application.h>
+#include <AppFileInfo.h>
+#include <File.h>
+
+#include <QDebug>
+#include <QCoreApplication>
+#include <QString>
+
+using namespace QKeychain;
+
+class AutoApp {
+public:
+    AutoApp();
+    ~AutoApp();
+    BApplication *app;
+};
+
+
+AutoApp::AutoApp()
+    : app(NULL)
+{
+    if (be_app != NULL)
+        return;
+
+    // no BApplication object, probably using QCoreApplication
+    // but we need one around
+
+    QString appSignature;
+
+    char signature[B_MIME_TYPE_LENGTH];
+    signature[0] = '\0';
+
+    QString appPath = QCoreApplication::applicationFilePath();
+
+    BFile appFile(appPath.toUtf8(), B_READ_ONLY);
+    if (appFile.InitCheck() == B_OK) {
+        BAppFileInfo info(&appFile);
+        if (info.InitCheck() == B_OK) {
+            if (info.GetSignature(signature) != B_OK)
+                signature[0] = '\0';
+        }
+    }
+
+    if (signature[0] != '\0')
+        appSignature = QLatin1String(signature);
+    else
+        appSignature = QLatin1String("application/x-vnd.qtkeychain-") +
+            QCoreApplication::applicationName().remove("_x86");
+
+    app = new BApplication(appSignature.toUtf8().constData());
+}
+
+AutoApp::~AutoApp()
+{
+    delete app;
+}
+
+static QString strForStatus( status_t os ) {
+    const char * const buf = strerror(os) ;
+    return QObject::tr( "error 0x%1: %2" )
+            .arg( os, 8, 16 ).arg( QString::fromUtf8( buf, strlen( buf ) ) );
+}
+
+void ReadPasswordJobPrivate::scheduledStart()
+{
+    AutoApp aa;
+    QString errorString;
+    Error error = NoError;
+    BKeyStore keyStore;
+    BPasswordKey password;
+
+    status_t result = keyStore.GetKey(B_KEY_TYPE_PASSWORD,
+                                      q->service().toUtf8().constData(),
+                                      q->key().toUtf8().constData(),
+                                      false, password);
+
+    data = QByteArray(reinterpret_cast<const char*>(password.Data()), password.DataLength());
+
+    switch ( result ) {
+    case B_OK:
+        q->emitFinished();
+        return;
+    case B_ENTRY_NOT_FOUND:
+        errorString = tr("Password not found");
+        error = EntryNotFound;
+        break;
+    default:
+        errorString = strForStatus( result );
+        error = OtherError;
+        break;
+    }
+
+    q->emitFinishedWithError( error, errorString );
+}
+
+void WritePasswordJobPrivate::scheduledStart()
+{
+    AutoApp aa;
+    QString errorString;
+    Error error = NoError;
+    BKeyStore keyStore;
+    BPasswordKey password(data.constData(),
+        B_KEY_PURPOSE_GENERIC,
+        q->service().toUtf8().constData(),
+        q->key().toUtf8().constData());
+    status_t result = B_OK;
+
+    // re-add as binary if it's not text
+    if (mode == Binary)
+        result = password.SetData(reinterpret_cast<const uint8*>(data.constData()), data.size());
+
+    if (result == B_OK)
+        result = keyStore.AddKey(password);
+
+    if (result == B_NAME_IN_USE) {
+        BPasswordKey old_password;
+        result = keyStore.GetKey(B_KEY_TYPE_PASSWORD,
+                                 q->service().toUtf8().constData(),
+                                 q->key().toUtf8().constData(),
+                                 false, old_password);
+        if (result == B_OK)
+            result = keyStore.RemoveKey(old_password);
+        if (result == B_OK)
+            result = keyStore.AddKey(password);
+    }
+
+    switch ( result ) {
+    case B_OK:
+        q->emitFinished();
+        return;
+    case B_ENTRY_NOT_FOUND:
+        errorString = tr("Password not found");
+        error = EntryNotFound;
+        break;
+    default:
+        errorString = strForStatus( result );
+        error = OtherError;
+        break;
+    }
+
+    q->emitFinishedWithError( error, errorString );
+}
+
+void DeletePasswordJobPrivate::scheduledStart()
+{
+    AutoApp aa;
+    QString errorString;
+    Error error = NoError;
+    BKeyStore keyStore;
+    BPasswordKey password;
+
+    status_t result = keyStore.GetKey(B_KEY_TYPE_PASSWORD,
+                                      q->service().toUtf8().constData(),
+                                      q->key().toUtf8().constData(),
+                                      false, password);
+
+    if (result == B_OK)
+        result = keyStore.RemoveKey(password);
+
+    switch ( result ) {
+    case B_OK:
+        q->emitFinished();
+        return;
+    case B_ENTRY_NOT_FOUND:
+        errorString = tr("Password not found");
+        error = EntryNotFound;
+        break;
+    default:
+        errorString = strForStatus( result );
+        error = CouldNotDeleteEntry;
+        break;
+    }
+
+    q->emitFinishedWithError( error, errorString );
+}
-- 
2.24.1
From 59de297f69ff03275ed07dab6883293315ace3d2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fran=C3=A7ois=20Revol?= <revol@free.fr>
Date: Tue, 4 Feb 2020 00:13:38 +0100
Subject: [PATCH] Allow overriding install include path for Haiku

---
 CMakeLists.txt | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ce7fec4..ab0ec68 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -215,7 +215,10 @@ else()
 endif()
 
 target_link_libraries(${QTKEYCHAIN_TARGET_NAME} PUBLIC ${qtkeychain_LIBRARIES})
-target_include_directories(${QTKEYCHAIN_TARGET_NAME} PUBLIC $<INSTALL_INTERFACE:include/>)
+if(NOT INTERFACE_INCLUDE_SUFFIX)
+    set(INTERFACE_INCLUDE_SUFFIX include)
+endif()
+target_include_directories(${QTKEYCHAIN_TARGET_NAME} PUBLIC $<INSTALL_INTERFACE:${INTERFACE_INCLUDE_SUFFIX}/>)
 
 generate_export_header(${QTKEYCHAIN_TARGET_NAME}
   EXPORT_FILE_NAME qkeychain_export.h
-- 
2.24.1

