SUMMARY="Library to assist with accessing public transport timetables and other data"
DESCRIPTION="A library for accessing realtime public transport data and for performing public \
transport journey queries.
This includes:

Finding bus stops or train stations, departures/arrivals from there, and journeys between those.
Path and routing information for individual transport sections of a journey.
Information about train coach and train station platform layouts.
Information about rental vehicle positions and availability, such as shared bikes or scooters.
Realtime information about the operational status of elevators or escalators.
Unified access to onboard API on trains for obtaining the current position and journey.

!! Before using this, please read the license compliance and attribution section below !!

* When using the data retrieved by this library you need to comply with the license terms of the \
backends this is coming from, in particular https://www.navitia.io/api-term-of-use.
* Attribution information that need to be displayed in an appropriate place in the application using \
this are provided globally via KPublicTransport::Manager::attributions() as well as more \
fine-grained per query reply via KPublicTransport::Reply::attributions().
* Besides attributing backend data correctly, this library also contains static data retrieved from \
Wikidata licensed as CC0 as well as data from OpenStreetMap licensed as ODbL, so those should be \
appropriately credited in your application as well."
HOMEPAGE="https://invent.kde.org/libraries/kpublictransport"
COPYRIGHT="2010-2025 KDE Organisation"
LICENSE="GNU LGPL v2"
REVISION="1"
SOURCE_URI="https://download.kde.org/stable/release-service/$portVersion/src/kpublictransport-$portVersion.tar.xz"
CHECKSUM_SHA256="2134e51dc956bd43ce673e857cd62c15ad983b2ca68a9ca1a67ded2ce2c035f4"
SOURCE_DIR="kpublictransport-$portVersion"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

libVersion="$portVersion"
libVersionCompat="$libVersion compat >= ${libVersion%%.*}"

PROVIDES="
	kpublictransport_kf6$secondaryArchSuffix = $portVersion
	lib:libKPublicTransport$secondaryArchSuffix = $libVersionCompat
	lib:libKPublicTransportOnboard$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libGL$secondaryArchSuffix
	# KF6
	lib:libKF6I18n$secondaryArchSuffix
	# Qt6
	lib:libQt6Core$secondaryArchSuffix
	lib:libQt6Qml$secondaryArchSuffix
	lib:libz$secondaryArchSuffix
	"
REPLACES="
	kpublictransport24$secondaryArchSuffix
	"

PROVIDES_devel="
	kpublictransport_kf6${secondaryArchSuffix}_devel = $portVersion
	devel:libKPublicTransport$secondaryArchSuffix = $libVersionCompat
	devel:libKPublicTransportOnboard$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES_devel="
	kpublictransport_kf6$secondaryArchSuffix == $portVersion base
	"

ARCHITECTURES_doc="any"

PROVIDES_doc="
	kpublictransport_kf6${secondaryArchSuffix}_doc = $portVersion
	"
REQUIRES_doc="
	kpublictransport_kf6${secondaryArchSuffix}_devel == $portVersion
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libprotobuf$secondaryArchSuffix >= 31
	devel:libz$secondaryArchSuffix
	# KF6
	extra_cmake_modules$secondaryArchSuffix
	devel:libKF6I18n$secondaryArchSuffix
	# Qt6
	qt6_tools${secondaryArchSuffix}_devel
	devel:libQt6Core$secondaryArchSuffix
	devel:libQt6Qml$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:cmake
	cmd:dot
	cmd:doxygen
	cmd:g++$secondaryArchSuffix
	cmd:make
	cmd:msgfmt$secondaryArchSuffix
	cmd:msgmerge$secondaryArchSuffix
	cmd:pkg_config$secondaryArchSuffix
	"

BUILD()
{
	cmake -B build -S. -DCMAKE_BUILD_TYPE=Release \
		$cmakeDirArgs \
		-DKDE_INSTALL_PLUGINDIR=$addOnsDir/Qt6 \
		-DKDE_INSTALL_QMLDIR=$dataDir/Qt6/qml \
		-DKDE_INSTALL_QTQCHDIR=$documentationDir/packages/qt6_base \
		-DECM_DIR=/system/data/cmake/Modules/ECM/cmake \
		-DBUILD_QCH=ON \
		-DBUILD_TESTING=OFF

	make -C build $jobArgs
}

INSTALL()
{
	make -C build install

	prepareInstalledDevelLibs \
		libKPublicTransport \
		libKPublicTransportOnboard

	packageEntries devel \
		$developDir \
		$libDir/cmake

	packageEntries doc \
		$documentationDir
}

TEST()
{
	# 80% tests passed, 10 tests failed out of 49
	export LIBRARY_PATH="$sourceDir/build/bin${LIBRARY_PATH:+:$LIBRARY_PATH}"
	ctest --test-dir build --output-on-failure
}
