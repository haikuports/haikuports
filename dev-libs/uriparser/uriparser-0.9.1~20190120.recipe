SUMMARY="A strictly RFC 3986 compliant URI parsing library in C"
DESCRIPTION="Uriparser is a strictly RFC 3986 compliant URI parsing library \
written in C."
HOMEPAGE="https://uriparser.github.io/"
COPYRIGHT="2007 Weijia Song
	2013 Radu Hociung
	2007-2018 Sebastian Pipping"
LICENSE="BSD (3-clause)"
REVISION="1"
srcGitRev="95a18f725bb6ab50120319f162eb8302bdf93b43"
SOURCE_URI="https://github.com/uriparser/uriparser/archive/$srcGitRev.tar.gz"
CHECKSUM_SHA256="03ea00c702a7c68f63c99fa9d0fca143bf5db1d5c35976278694aa2ce884f1fd"
SOURCE_FILENAME="uriparser-$srcGitRev.tar.gz"
SOURCE_DIR="uriparser-$srcGitRev"

ARCHITECTURES="x86_gcc2 x86 x86_64"
SECONDARY_ARCHITECTURES="x86"

libVersion="1.0.24"
libVersionCompat="$libVersion compat >= ${libVersion%%.*}"

PROVIDES="
	uriparser$secondaryArchSuffix = $portVersion
	lib:liburiparser$secondaryArchSuffix = $libVersionCompat
	"
if [ -z "$secondaryArchSuffix" ]; then
PROVIDES="$PROVIDES
	cmd:uriparse = $portVersion
	"
fi

REQUIRES="
	haiku$secondaryArchSuffix
	"
if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
REQUIRES="$REQUIRES
	lib:libgtest$secondaryArchSuffix
	"
fi

PROVIDES_devel="
	uriparser${secondaryArchSuffix}_devel = $portVersion
	devel:liburiparser$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES_devel="
	uriparser$secondaryArchSuffix == $portVersion base
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
BUILD_REQUIRES="$BUILD_REQUIRES
	devel:libgtest$secondaryArchSuffix
	"
fi

BUILD_PREREQUIRES="
	cmd:cmake
	cmd:gcc$secondaryArchSuffix
	cmd:libtoolize$secondaryArchSuffix
	cmd:make
	"
if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
BUILD_PREREQUIRES="$BUILD_PREREQUIRES
	cmd:dot
	cmd:doxygen
	cmd:pkg_config$secondaryArchSuffix
	cmd:qhelpgenerator$secondaryArchSuffix
	"
fi


defineDebugInfoPackage uriparser$secondaryArchSuffix \
	"$libDir"/liburiparser.so.$libVersion

if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
BUILD()
{
	mkdir -p build && cd build
	cmake .. $cmakeDirArgs

	make $jobArgs
}
else
BUILD()
{
	mkdir -p build && cd build
	cmake .. $cmakeDirArgs \
		-DURIPARSER_BUILD_TESTS:BOOL=OFF \
		-DURIPARSER_BUILD_DOCS:BOOL=OFF

	make $jobArgs
}
fi

INSTALL()
{
	cd build
	make install

	rm -f "$libDir"/liburiparser.la

	if [ -n "$secondaryArchSuffix" ]; then
		rm -rf "$binDir"
	fi

	prepareInstalledDevelLib liburiparser
	fixPkgconfig

	packageEntries devel \
		"$developDir"
}

if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
TEST()
{
	cd build
	make test
}
fi
