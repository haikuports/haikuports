From 949d8099d5e1578ef443033c080405ff12a891c7 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 15 Jul 2017 13:50:02 +0200
Subject: apply 1.5.2 patch.


diff --git a/config.layout b/config.layout
index fb087a8..a599e0d 100644
--- a/config.layout
+++ b/config.layout
@@ -60,6 +60,23 @@
     runtimedir:    ${localstatedir}/run
 </Layout>
 
+#	Haiku Layout making use of finddir
+<Layout haiku>
+    prefix:        /boot/system
+    exec_prefix:   /boot/system
+    bindir:        /boot/system/bin
+    sbindir:       /boot/system/servers
+    libdir:        /boot/system/lib
+    libexecdir:    /boot/system/servers
+    mandir:        /boot/system/documentation/man
+    sysconfdir:    /boot/system/settings
+    datadir:       /boot/system/data
+    installbuilddir: /boot/develop/build
+    includedir:    /boot/system/include
+    localstatedir: /boot/system/var
+    runtimedir:    ${localstatedir}/log
+</Layout>
+
 #   Mac OS X Server (Rhapsody)
 <Layout Mac OS X Server>
     prefix:        /Local/Library/WebServer
diff --git a/configure.in b/configure.in
index 6833b32..b6514a3 100644
--- a/configure.in
+++ b/configure.in
@@ -203,7 +203,7 @@ AC_PROG_MAKE_SET
 AC_PROG_CPP
 AC_PROG_AWK
 AC_PROG_LN_S
-AC_PROG_RANLIB
+AC_PROG_LIBTOOL
 AC_PROG_INSTALL
 AC_CHECK_PROG(RM, rm, rm)
 AC_CHECK_PROG(AS, as, as)
@@ -726,9 +726,9 @@ case $host in
       ac_cv_func_CreateFileMapping=yes
       ;;
    *)
+      AC_SEARCH_LIBS(socket, socket network)
       AC_SEARCH_LIBS(gethostbyname, nsl)
       AC_SEARCH_LIBS(gethostname, nsl)
-      AC_SEARCH_LIBS(socket, socket)
       AC_SEARCH_LIBS(crypt, crypt ufc)
       AC_CHECK_LIB(truerand, main)
       AC_SEARCH_LIBS(modf, m)
-- 
2.30.2


From 8021c3550e2b5cdb63865caac83292fe97266792 Mon Sep 17 00:00:00 2001
From: Sergei Trofimovich <slyfox@gentoo.org>
Date: Wed, 25 Nov 2020 09:36:25 +0000
Subject: build/apr_common.m4: avoid explicit inclusion of '"confdefs.h"'

The failure is observed on `autoconf-2.69d` (soon to be released
as `autoconf-2.70`). There `int64_t` detection fails as:

```
$ autoreconf && ./configure
...
checking whether int64_t and int use fmt %d... no
checking whether int64_t and long use fmt %ld... no
checking whether int64_t and long long use fmt %lld... no
configure: error: could not determine the string function for int64_t
```

This happens because `./configure` always stumbles on warning:

```
configure:3350: gcc -c -g -O2 -Werror  conftest.c >&5
In file included from conftest.c:31:
confdefs.h:22: error: "__STDC_WANT_IEC_60559_ATTRIBS_EXT__" redefined [-Werror]
   22 | #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
      |
```

It's triggered by double inclusion of `"confdefs.h"` contents:
explicitly in `APR_TRY_COMPILE_NO_WARNING` macro and implicitly
via `AC_LANG_SOURCE` use.

To fix it and avoid having to define `main()` declaration the change
uses `AC_LANG_PROGRAM` instead.

Tested on both `autoconf-2.69` and `autoconf-2.69d`.

Bug: https://bugs.gentoo.org/738156
Bug: https://bugs.gentoo.org/750353
Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>

diff --git a/build/apr_common.m4 b/build/apr_common.m4
index f4e2dfd..6f5782e 100644
--- a/build/apr_common.m4
+++ b/build/apr_common.m4
@@ -504,13 +504,9 @@ AC_DEFUN([APR_TRY_COMPILE_NO_WARNING],
    CFLAGS="$CFLAGS -Werror"
  fi
  AC_COMPILE_IFELSE(
-  [AC_LANG_SOURCE(
-   [#include "confdefs.h"
-   ]
-   [[$1]]
-   [int main(int argc, const char *const *argv) {]
+  [AC_LANG_PROGRAM(
+   [[$1]],
    [[$2]]
-   [   return 0; }]
   )], [CFLAGS=$apr_save_CFLAGS
 $3],  [CFLAGS=$apr_save_CFLAGS
 $4])
-- 
2.30.2


From c7539ee1246f5599653228a19c3b6a53fe69db6d Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Mon, 25 Apr 2022 21:18:48 +0200
Subject: Haiku: decide to use standard POSIX methods

BeOS methods aren't supported in unix platform code.

diff --git a/configure.in b/configure.in
index b6514a3..eb1864c 100644
--- a/configure.in
+++ b/configure.in
@@ -1249,6 +1249,9 @@ case $host in
             APR_DECISION_OVERRIDE(USE_SHMEM_MMAP_ZERO USE_SHMEM_SHMGET_ANON)
         fi
         ;;
+    *haiku* )
+        APR_DECISION_OVERRIDE(USE_SHMEM_MMAP_ANON)
+        ;;
     *hpux11* ) 
         APR_DECISION_OVERRIDE(USE_SHMEM_SHMGET_ANON)
         ;;
@@ -1325,6 +1328,9 @@ case $host in
                                   USE_SHMEM_SHMGET)
         fi
         ;;
+    *haiku* )
+        APR_DECISION_OVERRIDE(USE_SHMEM_MMAP_TMP)
+        ;;
 esac
 APR_END_DECISION
 AC_DEFINE_UNQUOTED($ac_decision)
@@ -2381,6 +2387,11 @@ esac
 if test "x$apr_lock_method" != "x"; then
     APR_DECISION_FORCE($apr_lock_method)
 fi
+case $host in
+    *haiku* )
+        APR_DECISION_OVERRIDE(USE_SYSVSEM_SERIALIZE)
+        ;;
+esac
 APR_END_DECISION
 AC_DEFINE_UNQUOTED($ac_decision)
 
-- 
2.30.2


From bb9b40ae5b8715a1301ff04108be55b1f8bd503c Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Tue, 26 Apr 2022 14:42:58 +0200
Subject: fix checking if fcntl returns EACCES when F_SETLK is already held

passing errno with exit status might not work

diff --git a/configure.in b/configure.in
index eb1864c..0db1070 100644
--- a/configure.in
+++ b/configure.in
@@ -2445,6 +2445,7 @@ AC_TRY_RUN([
 int fd;
 struct flock proc_mutex_lock_it = {0};
 const char *fname = "conftest.fcntl";
+int lockit();
 
 int main()
 {
@@ -2463,11 +2464,11 @@ int main()
         wait(&status);
     }
     else {
-      return(lockit());
+      return (lockit() != EACCES ? 1 : 0);
     }
 
     close(fd);
-    exit(WEXITSTATUS(status) != EACCES);
+    exit(WEXITSTATUS(status));
 }
 
 int lockit() {
-- 
2.30.2

