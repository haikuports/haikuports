From ec7550e64bd99890d91977ede7ec36b4faebef4e Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 19 Apr 2014 21:36:18 +0000
Subject: gcc2 build fix


diff --git a/configure.ac b/configure.ac
index 24e1698..6095b44 100644
--- a/configure.ac
+++ b/configure.ac
@@ -255,7 +255,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
 dnl empty_array_size
 AC_MSG_CHECKING([how to create empty arrays])
 
-empty_array_size="xxxx"
+empty_array_size="xxx"
 AC_TRY_COMPILE([],[struct { int foo; int bar[]; } doo;], empty_array_size="")
 
 if test "x$empty_array_size" = "xxxx"; then
@@ -636,6 +636,7 @@ if test "x$enable_cddb" != "xno"; then
     [AC_MSG_WARN([new enough libcddb not found. CDDB access disabled. Get libcddb from http://libcddb.sourceforge.net])
     HAVE_CDDB=no])
     AC_CHECK_LIB(socket, connect)
+    AC_CHECK_LIB(network, connect)
     AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, gethostbyname))
 fi
 
diff --git a/example/mmc1.c b/example/mmc1.c
index 29991e7..66b7a67 100644
--- a/example/mmc1.c
+++ b/example/mmc1.c
@@ -90,9 +90,9 @@ main(int argc, const char *argv[])
     {
 	driver_return_code_t i_status;
 	bool b_erasable;
+	cdio_mmc_feature_profile_t disctype;
 
 	i_status = mmc_get_disc_erasable(p_cdio, &b_erasable);
-	cdio_mmc_feature_profile_t disctype;
 	if (DRIVER_OP_SUCCESS == i_status)
 	    printf("-- Disc is %serasable.\n", b_erasable ? "" : "not ");
 	else
-- 
2.14.3


From fbb4485e4292ac9ce8b52c95fbeae86ffdf1c103 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@pulkomandy.tk>
Date: Fri, 12 Sep 2014 11:36:35 +0200
Subject: Fix tests for gcc2.


diff --git a/lib/driver/abs_path.c b/lib/driver/abs_path.c
index 235c5b4..f329f82 100644
--- a/lib/driver/abs_path.c
+++ b/lib/driver/abs_path.c
@@ -93,10 +93,12 @@ cdio_dirname(const char *fname)
 char *
 cdio_abspath(const char *cwd, const char *fname)
 {
+    size_t len;
+    char* result;
     if (isdirsep(*fname)) return strdup(fname);
 
-    size_t len   = strlen(cwd) + strlen(fname) + 2;
-    char* result = calloc(sizeof(char), len);
+    len   = strlen(cwd) + strlen(fname) + 2;
+    result = calloc(sizeof(char), len);
     snprintf(result, len, "%s%c%s",
 	     cwd, CDIO_FILE_SEPARATOR, fname);
     return result;
-- 
2.14.3


From 2af1bdaa4c314ee92fc265fc3202b2c37af514ce Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@pulkomandy.tk>
Date: Sun, 5 Nov 2017 18:44:13 +0100
Subject: Fix gcc2 build.


diff --git a/src/getopt.c b/src/getopt.c
index 80c7cb2..b601eb9 100644
--- a/src/getopt.c
+++ b/src/getopt.c
@@ -830,6 +830,14 @@ _getopt_internal_r (int argc, char *const *argv, const char *optstring,
   {
     char c = *d->__nextchar++;
     char *temp = strchr (optstring, c);
+	char *nameend;
+	const struct option *p;
+	const struct option *pfound = NULL;
+	int exact = 0;
+	int ambig = 0;
+	int indfound = 0;
+	int option_index;
+
 
     /* Increment `optind' when we start to process its last character.  */
     if (*d->__nextchar == '\0')
@@ -877,14 +885,6 @@ _getopt_internal_r (int argc, char *const *argv, const char *optstring,
 	if (longopts == NULL)
 	  goto no_longs;
 
-	char *nameend;
-	const struct option *p;
-	const struct option *pfound = NULL;
-	int exact = 0;
-	int ambig = 0;
-	int indfound = 0;
-	int option_index;
-
 	/* This is an option that requires an argument.  */
 	if (*d->__nextchar != '\0')
 	  {
-- 
2.14.3

