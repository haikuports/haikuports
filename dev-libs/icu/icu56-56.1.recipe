SUMMARY="Libraries to support Unicode and globalization"
SUMMARY_devel="The ICU development files"
DESCRIPTION="International Components for Unicode (ICU) is a mature, widely \
used set of C/C++ and Java libraries providing Unicode and Globalization \
support for software applications. ICU is widely portable and gives \
applications the same results on all platforms and between C/C++ and Java \
software.
ICU is released under a nonrestrictive open source license that is suitable \
for use with both commercial software and with other open source or free \
software.

Here are a few highlights of the services provided by ICU:

* Code Page Conversion: Convert text data to or from Unicode and nearly any \
other character set or encoding. ICU's conversion tables are based on charset \
data collected by IBM over the course of many decades, and is the most \
complete available anywhere.
* Collation: Compare strings according to the conventions and standards of a \
particular language, region or country. ICU's collation is based on the \
Unicode Collation Algorithm plus locale-specific comparison rules from the \
Common Locale Data Repository, a comprehensive source for this type of data.
* Formatting: Format numbers, dates, times and currency amounts according the \
conventions of a chosen locale. This includes translating month and day names \
into the selected language, choosing appropriate abbreviations, ordering \
fields correctly, etc. This data also comes from the Common Locale Data \
Repository.
* Time Calculations: Multiple types of calendars are provided beyond the \
traditional Gregorian calendar. A thorough set of timezone calculation APIs \
are provided.
* Unicode Support: ICU closely tracks the Unicode standard, providing easy \
access to all of the many Unicode character properties, Unicode Normalization, \
Case Folding and other fundamental operations as specified by the Unicode \
Standard.
* Regular Expression: ICU's regular expressions fully support Unicode while \
providing very competitive performance.
* Bidi: support for handling text containing a mixture of left to right \
(English) and right to left (Arabic or Hebrew) data.
* Text Boundaries: Locate the positions of words, sentences, paragraphs within \
a range of text, or identify locations that would be suitable for line \
wrapping when displaying the text."
HOMEPAGE="http://www.icu-project.org"
COPYRIGHT="1995-2015 IBM Corporation and others."
LICENSE="ICU"
REVISION="1"
SOURCE_URI="http://download.icu-project.org/files/icu4c/$portVersion/icu4c-56_1-src.tgz"
SOURCE_URI_2="http://www.iana.org/time-zones/repository/releases/tzdata2016f.tar.gz#noarchive"
SOURCE_URI_3="http://download.icu-project.org/files/icu4c/$portVersion/icu4c-56_1-data.zip#noarchive"
CHECKSUM_SHA256="3a64e9105c734dcf631c0b3ed60404531bce6c0f5a64bfe1a6402a4cc2314816"
CHECKSUM_SHA256_2="ed8c951008d12f1db55a11e96fc055718c6571233327d9de16a7f8475e2502b0"
CHECKSUM_SHA256_3="d9114d82ea87c4b2e7f2ae11117c21922b98aefba7b4e92c3a80075303b2ed23"
SOURCE_DIR="icu"
PATCHES="icu-$portVersion.patchset"
if [ $effectiveTargetArchitecture = x86_gcc2 ]; then
PATCHES+="
	"icu-$portVersion.gcc2.patchset"
	"
fi

ARCHITECTURES="x86_gcc2 x86 ?x86_64 arm"
SECONDARY_ARCHITECTURES="x86_gcc2 x86"

PROVIDES="
	icu56$secondaryArchSuffix = $portVersion compat >= 56
	lib:libicudata$secondaryArchSuffix = $portVersion compat >= 56
	lib:libicui18n$secondaryArchSuffix = $portVersion compat >= 56
	lib:libicuio$secondaryArchSuffix = $portVersion compat >= 56
	lib:libicule$secondaryArchSuffix = $portVersion compat >= 56
	lib:libiculx$secondaryArchSuffix = $portVersion compat >= 56
	lib:libicutest$secondaryArchSuffix = $portVersion compat >= 56
	lib:libicutu$secondaryArchSuffix = $portVersion compat >= 56
	lib:libicuuc$secondaryArchSuffix = $portVersion compat >= 56
	"
REQUIRES="
	haiku$secondaryArchSuffix
	"
if [ $effectiveTargetArchitecture != x86_gcc2 ]; then
REQUIRES+="
	"
fi

PROVIDES_devel="
	icu56${secondaryArchSuffix}_devel = $portVersion
	cmd:icu_config${secondaryArchSuffix} = $portVersion compat >= 56
	devel:libicudata${secondaryArchSuffix} = $portVersion compat >= 56
	devel:libicui18n${secondaryArchSuffix} = $portVersion compat >= 56
	devel:libicuio${secondaryArchSuffix} = $portVersion compat >= 56
	devel:libicule${secondaryArchSuffix} = $portVersion compat >= 56
	devel:libiculx${secondaryArchSuffix} = $portVersion compat >= 56
	devel:libicutest${secondaryArchSuffix} = $portVersion compat >= 56
	devel:libicutu${secondaryArchSuffix} = $portVersion compat >= 56
	devel:libicuuc${secondaryArchSuffix} = $portVersion compat >= 56
	"
REQUIRES_devel="
	icu56${secondaryArchSuffix} == $portVersion base
	"
CONFLICTS_devel="
	icu${secondaryArchSuffix}_devel
	icu55${secondaryArchSuffix}_devel
	icu54${secondaryArchSuffix}_devel
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
BUILD_PREREQUIRES="
	cmd:autoconf
	cmd:awk
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:make
	cmd:pkg_config$secondaryArchSuffix
	cmd:sed
	"

BUILD()
{
	cd source
	cp ../../../sources-2/tzdata*.tar.gz tools/tzcode/
	unzip -oq ../../../sources-3/icu4c-*-data.zip
	rm -f data/in/icudt??l.dat
	autoconf
	runConfigure ./configure \
		--disable-samples --disable-extras
	make $jobArgs
}

INSTALL()
{
	cd source
	make install

	prepareInstalledDevelLibs \
		libicudata \
		libicui18n \
		libicuio \
		libicule \
		libiculx \
		libicutu \
		libicuuc
	fixPkgconfig

	# Update icu-config to point to the develop/lib dir
	fixDevelopLibDirReferences \
		$binDir/icu-config

	# Rename the data/icu directory when built for the secondary architecture,
	# so that it doesn't clash with the primary package's.
	if [ -n "$secondaryArchSuffix" ]; then
		mv $dataDir/icu $dataDir/icu$secondaryArchSuffix
		# TODO: The icu-config, the Makefile.inc, and possibly other files need
		# to be adjusted as well. They are probably also not quite correct for
		# the primary architecture (lib vs. develop/lib).
	fi

	# devel package
	packageEntries devel \
		$developDir \
		$dataDir/icu$secondaryArchSuffix \
		$libDir/icu \
		$binDir/icu-config \
		$manDir/man1/icu-config.1

	# main package cleanup
	rm -r $binDir
}

TEST()
{
	cd source
	make check
}
