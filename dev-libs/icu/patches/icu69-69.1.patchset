From bf3dfd7a0d2e1d59c69d39b6209aad6203236594 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zolt=C3=A1n=20Mizsei?= <zmizsei@extrowerk.com>
Date: Mon, 18 Oct 2021 00:36:10 +0200
Subject: [PATCH] Applied ICU66 Haiku patchset

---
 source/common/putilimp.h         |  4 +-
 source/config/mh-haiku           |  2 +-
 source/configure.ac              | 43 ++-------------------
 source/tools/tzcode/Makefile.in  |  2 +-
 source/tools/tzcode/icuzdump.cpp | 22 +++++------
 source/tools/tzcode/tz2icu.cpp   | 66 ++++++++++++++++----------------
 6 files changed, 51 insertions(+), 88 deletions(-)

diff --git a/source/common/putilimp.h b/source/common/putilimp.h
index 5b95a68..81685ec 100644
--- a/source/common/putilimp.h
+++ b/source/common/putilimp.h
@@ -101,7 +101,7 @@ typedef size_t uintptr_t;
 #if U_PLATFORM_HAS_WINUWP_API == 0
 #   define U_TZSET _tzset
 #endif
-#elif U_PLATFORM == U_PF_OS400
+#elif U_PLATFORM == U_PF_OS400 || defined(__HAIKU__)
    /* not defined */
 #else
 #   define U_TZSET tzset
@@ -139,7 +139,7 @@ typedef size_t uintptr_t;
 #if U_PLATFORM_HAS_WINUWP_API == 0
 #   define U_TZNAME _tzname
 #endif
-#elif U_PLATFORM == U_PF_OS400
+#elif U_PLATFORM == U_PF_OS400 || defined(__HAIKU__)
    /* not defined */
 #else
 #   define U_TZNAME tzname
diff --git a/source/config/mh-haiku b/source/config/mh-haiku
index bb814cd..965c949 100644
--- a/source/config/mh-haiku
+++ b/source/config/mh-haiku
@@ -20,7 +20,7 @@ LIBCPPFLAGS =
 THREADSCPPFLAGS =
 
 #
-CPPFLAGS += -D__STDC_ISO_10646__ -DU_CHARSET_IS_UTF8=1
+CPPFLAGS += -DU_CHARSET_IS_UTF8=1
 
 ## Compiler switch to embed a runtime search path
 LD_RPATH=
diff --git a/source/configure.ac b/source/configure.ac
index 425fdc7..eb11c93 100644
--- a/source/configure.ac
+++ b/source/configure.ac
@@ -311,7 +311,7 @@ if test "$ENABLE_STATIC" = "YES"; then
             OLD_LDFLAGS="${LDFLAGS}"
 
             case "${host}" in
-            *-linux*|i*86-*-*bsd*|i*86-pc-gnu)
+            *-linux*|i*86-*-*bsd*|i*86-pc-gnu|*-haiku*)
                 if test "$GCC" = yes; then
                     CPPFLAGS="${CPPFLAGS} -ffunction-sections -fdata-sections"
                     LDFLAGS="${LDFLAGS} -Wl,--gc-sections"
@@ -808,50 +808,12 @@ else
 fi
 AC_SUBST(U_HAVE_POPEN)
 
-AC_CHECK_FUNC(tzset)
+#AC_CHECK_FUNC(tzset)
 U_HAVE_TZSET=0
-if test x$ac_cv_func_tzset = xyes
-then
-    U_TZSET=tzset
-    U_HAVE_TZSET=1
-else
-    AC_CHECK_FUNC(_tzset)
-    if test x$ac_cv_func__tzset = xyes
-    then
-        U_TZSET=_tzset
-        U_HAVE_TZSET=1
-    else
-      CONFIG_CPPFLAGS="${CONFIG_CPPFLAGS} -DU_HAVE_TZSET=0"
-    fi
-fi
 AC_SUBST(U_HAVE_TZSET)
 AC_SUBST(U_TZSET)
 
 U_HAVE_TZNAME=0
-AC_CACHE_CHECK(for tzname,ac_cv_var_tzname,
-[AC_LINK_IFELSE([AC_LANG_PROGRAM([[#ifndef _XOPEN_SOURCE
-#define _XOPEN_SOURCE
-#endif
-#include <stdlib.h>
-#include <time.h>
-#ifndef tzname /* For SGI.  */
-extern char *tzname[]; /* RS6000 and others reject char **tzname.  */
-#endif]], [atoi(*tzname);])],[ac_cv_var_tzname=yes],[ac_cv_var_tzname=no])])
-if test $ac_cv_var_tzname = yes; then
-  U_TZNAME=tzname
-  U_HAVE_TZNAME=1
-else
-  AC_CACHE_CHECK(for _tzname,ac_cv_var__tzname,
-  [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <stdlib.h>
-  #include <time.h>
-  extern char *_tzname[];]], [atoi(*_tzname);])],[ac_cv_var__tzname=yes],[ac_cv_var__tzname=no])])
-    if test $ac_cv_var__tzname = yes; then
-      U_TZNAME=_tzname
-      U_HAVE_TZNAME=1
-    else
-     CONFIG_CPPFLAGS="${CONFIG_CPPFLAGS} -DU_HAVE_TZNAME=0"
-    fi
-fi
 AC_SUBST(U_HAVE_TZNAME)
 AC_SUBST(U_TZNAME)
 
@@ -1298,6 +1260,7 @@ case "${host}" in
 	*-*-nto*)	platform=U_QNX ;;
 	*-dec-osf*) 	platform=U_OSF ;;
 	*-*-beos)		platform=U_BEOS ;;
+	*-*-haiku)		platform=U_HAIKU ;;
 	*-*-irix*)		platform=U_IRIX ;;
 	*-ncr-*)		platform=U_MPRAS ;;
 	*) 		platform=U_UNKNOWN_PLATFORM ;;
diff --git a/source/tools/tzcode/Makefile.in b/source/tools/tzcode/Makefile.in
index 4ba969f..ea249f0 100644
--- a/source/tools/tzcode/Makefile.in
+++ b/source/tools/tzcode/Makefile.in
@@ -136,7 +136,7 @@ $(ICUZDUMPTARG):	$(srcdir)/icuzdump.cpp
 		$(LINK.cc)  -I$(srcdir) -I$(top_srcdir)/common -I$(top_srcdir)/i18n -I$(top_srcdir)/tools/toolutil -I$(top_srcdir)/io  -pedantic $(srcdir)/icuzdump.cpp $(LIBICUUC) $(LIBICUDT) $(LIBICUI18N) $(LIBICUIO) $(LIBICUTOOLUTIL) -o $@
 
 
-$(TDATA): tdatamarker
+$(TDATA) $(XDATA): tdatamarker
 
 tdatamarker: $(TZDATA)
 	mkdir $(VANGUARD_DIR)
diff --git a/source/tools/tzcode/icuzdump.cpp b/source/tools/tzcode/icuzdump.cpp
index 783f63d..4b8c450 100644
--- a/source/tools/tzcode/icuzdump.cpp
+++ b/source/tools/tzcode/icuzdump.cpp
@@ -137,12 +137,12 @@ public:
 
         getCutOverTimes(cutlo, cuthi);
         t = cutlo;
-        timezone->getOffset(t, false, rawOffset, dstOffset, status);
+        timezone->getOffset(t, FALSE, rawOffset, dstOffset, status);
         while (t < cuthi) {
             int32_t newRawOffset, newDstOffset;
             UDate newt = t + SEARCH_INCREMENT;
 
-            timezone->getOffset(newt, false, newRawOffset, newDstOffset, status);
+            timezone->getOffset(newt, FALSE, newRawOffset, newDstOffset, status);
 
             UBool bSameOffset = (rawOffset + dstOffset) == (newRawOffset + newDstOffset);
             UBool bSameDst = ((dstOffset != 0) && (newDstOffset != 0)) || ((dstOffset == 0) && (newDstOffset == 0));
@@ -151,14 +151,14 @@ public:
                 // find the boundary
                 UDate lot = t;
                 UDate hit = newt;
-                while (true) {
+                while (TRUE) {
                     int32_t diff = (int32_t)(hit - lot);
                     if (diff <= tick) {
                         break;
                     }
                     UDate medt = lot + ((diff / 2) / tick) * tick;
                     int32_t medRawOffset, medDstOffset;
-                    timezone->getOffset(medt, false, medRawOffset, medDstOffset, status);
+                    timezone->getOffset(medt, FALSE, medRawOffset, medDstOffset, status);
 
                     bSameOffset = (rawOffset + dstOffset) == (medRawOffset + medDstOffset);
                     bSameDst = ((dstOffset != 0) && (medDstOffset != 0)) || ((dstOffset == 0) && (medDstOffset == 0));
@@ -171,10 +171,10 @@ public:
                 }
                 // write out the boundary
                 str.remove();
-                formatter->format(lot, rawOffset + dstOffset, (dstOffset == 0 ? false : true), str);
+                formatter->format(lot, rawOffset + dstOffset, (dstOffset == 0 ? FALSE : TRUE), str);
                 out << str << " > ";
                 str.remove();
-                formatter->format(hit, newRawOffset + newDstOffset, (newDstOffset == 0 ? false : true), str);
+                formatter->format(hit, newRawOffset + newDstOffset, (newDstOffset == 0 ? FALSE : TRUE), str);
                 out << str;
                 if (linesep != NULL) {
                     out << linesep;
@@ -211,7 +211,7 @@ private:
 
 class ZoneIterator {
 public:
-    ZoneIterator(UBool bAll = false) {
+    ZoneIterator(UBool bAll = FALSE) {
         if (bAll) {
             zenum = TimeZone::createEnumeration();
         }
@@ -288,7 +288,7 @@ extern int
 main(int argc, char *argv[]) {
     int32_t low = 1902;
     int32_t high = 2038;
-    UBool bAll = false;
+    UBool bAll = FALSE;
     const char *dir = NULL;
     const char *linesep = NULL;
 
@@ -355,7 +355,7 @@ main(int argc, char *argv[]) {
 
     ZoneIterator* zit;
     if (bAll) {
-        zit = new ZoneIterator(true);
+        zit = new ZoneIterator(TRUE);
     } else {
         if (argc <= 1) {
             zit = new ZoneIterator();
@@ -402,7 +402,7 @@ main(int argc, char *argv[]) {
 
     } else {
         // stdout
-        UBool bFirst = true;
+        UBool bFirst = TRUE;
         for (;;) {
             TimeZone* tz = zit->next();
             if (tz == NULL) {
@@ -411,7 +411,7 @@ main(int argc, char *argv[]) {
             dumper.setTimeZone(tz);
             tz->getID(id);
             if (bFirst) {
-                bFirst = false;
+                bFirst = FALSE;
             } else {
                 cout << endl;
             }
diff --git a/source/tools/tzcode/tz2icu.cpp b/source/tools/tzcode/tz2icu.cpp
index dcdbf65..54bdecb 100644
--- a/source/tools/tzcode/tz2icu.cpp
+++ b/source/tools/tzcode/tz2icu.cpp
@@ -51,7 +51,7 @@
 
 using namespace std;
 
-bool ICU44PLUS = true;
+bool ICU44PLUS = TRUE;
 string TZ_RESOURCE_NAME = ICU_TZ_RESOURCE;
 
 //--------------------------------------------------------------------
@@ -361,7 +361,7 @@ void readzoneinfo(ifstream& file, ZoneInfo& info, bool is64bitData) {
     }
 
     // Build transitions vector out of corresponding times and types.
-    bool insertInitial = false;
+    bool insertInitial = FALSE;
     if (is64bitData && !ICU44PLUS) {
         if (timecnt > 0) {
             int32_t minidx = -1;
@@ -388,7 +388,7 @@ void readzoneinfo(ifstream& file, ZoneInfo& info, bool is64bitData) {
                 info.transitions.insert(itr, Transition(LOWEST_TIME32, transitionTypes[minidx]));
             } else {
                 // Otherwise, we need insert the initial type later
-                insertInitial = true;
+                insertInitial = TRUE;
             }
         }
     } else {
@@ -470,7 +470,7 @@ void readzoneinfo(ifstream& file, ZoneInfo& info, bool is64bitData) {
         // strings.  E.g., 0,5,10,14 => 0,1,2,3.
 
         // Keep track of which abbreviations get used.
-        vector<bool> abbrseen(abbroffset.size(), false);
+        vector<bool> abbrseen(abbroffset.size(), FALSE);
 
         for (vector<ZoneType>::iterator it=info.types.begin();
              it!=info.types.end();
@@ -500,7 +500,7 @@ void readzoneinfo(ifstream& file, ZoneInfo& info, bool is64bitData) {
             } else {
                 int32_t index = x - abbroffset.begin();
                 it->abbr = index;
-                abbrseen[index] = true;
+                abbrseen[index] = TRUE;
             }
         }
 
@@ -549,7 +549,7 @@ void handleFile(string path, string id) {
 
     // eat 32bit data part
     ZoneInfo info;
-    readzoneinfo(file, info, false);
+    readzoneinfo(file, info, FALSE);
 
     // Check for errors
     if (!file) {
@@ -558,22 +558,22 @@ void handleFile(string path, string id) {
 
     // we only use 64bit part
     ZoneInfo info64;
-    readzoneinfo(file, info64, true);
+    readzoneinfo(file, info64, TRUE);
 
-    bool alldone = false;
+    bool alldone = FALSE;
     int64_t eofPos = (int64_t) file.tellg();
 
     // '\n' + <envvar string> + '\n' after the 64bit version data
     char ch = file.get();
     if (ch == 0x0a) {
-        bool invalidchar = false;
+        bool invalidchar = FALSE;
         while (file.get(ch)) {
             if (ch == 0x0a) {
                 break;
             }
             if (ch < 0x20) {
                 // must be printable ascii
-                invalidchar = true;
+                invalidchar = TRUE;
                 break;
             }
         }
@@ -582,7 +582,7 @@ void handleFile(string path, string id) {
             file.seekg(0, ios::end);
             eofPos = eofPos - (int64_t) file.tellg();
             if (eofPos == 0) {
-                alldone = true;
+                alldone = TRUE;
             }
         }
     }
@@ -789,7 +789,7 @@ struct FinalRulePart {
 
     bool isset; // used during building; later ignored
 
-    FinalRulePart() : isset(false) {}
+    FinalRulePart() : isset(FALSE) {}
     void set(const string& id,
              const string& _mode,
              int32_t _month,
@@ -802,7 +802,7 @@ struct FinalRulePart {
         if (isset) {
             throw invalid_argument("FinalRulePart set twice");
         }
-        isset = true;
+        isset = TRUE;
         if (_mode == "DOWLEQ") {
             mode = DOWLEQ;
         } else if (_mode == "DOWGEQ") {
@@ -1037,11 +1037,11 @@ void ZoneInfo::print(ostream& os, const string& id) const {
         // pre 32bit transitions
         if (trn != transitions.end() && trn->time < LOWEST_TIME32) {
             os << "    transPre32:intvector { ";
-            for (first = true; trn != transitions.end() && trn->time < LOWEST_TIME32; ++trn) {
+            for (first = TRUE; trn != transitions.end() && trn->time < LOWEST_TIME32; ++trn) {
                 if (!first) {
                     os<< ", ";
                 }
-                first = false;
+                first = FALSE;
                 os << (int32_t)(trn->time >> 32) << ", " << (int32_t)(trn->time & 0x00000000ffffffff);
             }
             os << " }" << endl;
@@ -1050,11 +1050,11 @@ void ZoneInfo::print(ostream& os, const string& id) const {
         // 32bit transtions
         if (trn != transitions.end() && trn->time < HIGHEST_TIME32) {
             os << "    trans:intvector { ";
-            for (first = true; trn != transitions.end() && trn->time < HIGHEST_TIME32; ++trn) {
+            for (first = TRUE; trn != transitions.end() && trn->time < HIGHEST_TIME32; ++trn) {
                 if (!first) {
                     os << ", ";
                 }
-                first = false;
+                first = FALSE;
                 os << trn->time;
             }
             os << " }" << endl;
@@ -1063,27 +1063,27 @@ void ZoneInfo::print(ostream& os, const string& id) const {
         // post 32bit transitons
         if (trn != transitions.end()) {
             os << "    transPost32:intvector { ";
-            for (first = true; trn != transitions.end(); ++trn) {
+            for (first = TRUE; trn != transitions.end(); ++trn) {
                 if (!first) {
                     os<< ", ";
                 }
-                first = false;
+                first = FALSE;
                 os << (int32_t)(trn->time >> 32) << ", " << (int32_t)(trn->time & 0x00000000ffffffff);
             }
             os << " }" << endl;
         }
     } else {
         os << "    :intvector { ";
-        for (trn = transitions.begin(), first = true; trn != transitions.end(); ++trn) {
+        for (trn = transitions.begin(), first = TRUE; trn != transitions.end(); ++trn) {
             if (!first) os << ", ";
-            first = false;
+            first = FALSE;
             os << trn->time;
         }
         os << " }" << endl;
     }
 
 
-    first=true;
+    first=TRUE;
     if (ICU44PLUS) {
         os << "    typeOffsets:intvector { ";
     } else {
@@ -1091,7 +1091,7 @@ void ZoneInfo::print(ostream& os, const string& id) const {
     }
     for (typ = types.begin(); typ != types.end(); ++typ) {
         if (!first) os << ", ";
-        first = false;
+        first = FALSE;
         os << typ->rawoffset << ", " << typ->dstoffset;
     }
     os << " }" << endl;
@@ -1127,7 +1127,7 @@ void ZoneInfo::print(ostream& os, const string& id) const {
 
     // Alias list, if any
     if (aliases.size() != 0) {
-        first = true;
+        first = TRUE;
         if (ICU44PLUS) {
             os << "    links:intvector { ";
         } else {
@@ -1135,7 +1135,7 @@ void ZoneInfo::print(ostream& os, const string& id) const {
         }
         for (set<int32_t>::const_iterator i=aliases.begin(); i!=aliases.end(); ++i) {
             if (!first) os << ", ";
-            first = false;
+            first = FALSE;
             os << *i;
         }
         os << " }" << endl;
@@ -1221,7 +1221,7 @@ struct SimplifiedZoneType {
  */
 ZoneType::ZoneType(const SimplifiedZoneType& t) :
     rawoffset(t.rawoffset), dstoffset(t.dstoffset),
-    abbr(-1), isdst(false), isstd(false), isgmt(false) {}
+    abbr(-1), isdst(FALSE), isstd(FALSE), isgmt(FALSE) {}
 
 /**
  * Optimize the type list to remove excess entries.  The type list may
@@ -1431,19 +1431,19 @@ void FinalRule::print(ostream& os) const {
 
 int main(int argc, char *argv[]) {
     string rootpath, zonetab, version;
-    bool validArgs = false;
+    bool validArgs = FALSE;
 
     if (argc == 4 || argc == 5) {
-        validArgs = true;
+        validArgs = TRUE;
         rootpath = argv[1];
         zonetab = argv[2];
         version = argv[3];
         if (argc == 5) {
             if (strcmp(argv[4], "--old") == 0) {
-                ICU44PLUS = false;
+                ICU44PLUS = FALSE;
                 TZ_RESOURCE_NAME = ICU_TZ_RESOURCE_OLD;
             } else {
-                validArgs = false;
+                validArgs = FALSE;
             }
         }
     }
@@ -1623,7 +1623,7 @@ int main(int argc, char *argv[]) {
     links = links2;
     reverseLinks = reverse2;
 
-    if (false) { // Debugging: Emit link map
+    if (FALSE) { // Debugging: Emit link map
         for (map<string,set<string> >::const_iterator i = links.begin();
              i!=links.end(); ++i) {
             cout << i->first << ": ";
@@ -1850,11 +1850,11 @@ int main(int argc, char *argv[]) {
                   file << "Default";
                 }
                 file << country << ":intvector { ";
-                bool first = true;
+                bool first = TRUE;
                 for (set<string>::const_iterator j=zones.begin();
                      j != zones.end(); ++j) {
                     if (!first) file << ", ";
-                    first = false;
+                    first = FALSE;
                     if (zoneIDs.find(*j) == zoneIDs.end()) {
                         cerr << "Error: Nonexistent zone in country map: " << *j << endl;
                         return 1;
-- 
2.30.2

