From a5f2a226107dca45c83531fa3c3bd9dfce6322b7 Mon Sep 17 00:00:00 2001
From: erysdren <contact@erysdren.me>
Date: Mon, 17 Feb 2025 01:57:41 -0600
Subject: fix for haiku


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 81b4e73a1..6841d6085 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -16,9 +16,6 @@ if(POLICY CMP0063)
   cmake_policy(SET CMP0063 NEW)
 endif()
 
-set(CMAKE_TOOLCHAIN_FILE "${CMAKE_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake")
-set(VCPKG_OVERLAY_PORTS "${CMAKE_SOURCE_DIR}/vcpkg-overlay-ports/freeimage;${CMAKE_SOURCE_DIR}/vcpkg-overlay-ports/openexr")
-
 set(CMAKE_C_VISIBILITY_PRESET hidden)
 set(CMAKE_CXX_VISIBILITY_PRESET hidden)
 set(CMAKE_VISIBILITY_INLINES_HIDDEN TRUE)
@@ -87,24 +84,6 @@ endif()
 
 include(cmake/Utils.cmake)
 
-# Find Git
-find_package(Git)
-
-if(NOT GIT_FOUND)
-  message(FATAL_ERROR "Could not find git")
-endif()
-
-# Find Pandoc
-if(NOT PANDOC_PATH)
-  find_program(PANDOC_PATH NAMES "pandoc" DOC "Pandoc program location")
-
-  if(PANDOC_PATH STREQUAL "PANDOC_PATH-NOTFOUND")
-    message(FATAL_ERROR "Could not find pandoc")
-  else()
-    message(STATUS "Found Pandoc: ${PANDOC_PATH}")
-  endif()
-endif()
-
 # Prevent overriding the parent project's compiler/linker
 # settings on Windows
 set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
@@ -118,7 +97,7 @@ find_package(freetype CONFIG REQUIRED)
 find_package(Catch2 CONFIG REQUIRED)
 find_package(fmt CONFIG REQUIRED)
 find_package(GLEW REQUIRED)
-find_package(miniz CONFIG REQUIRED)
+# find_package(miniz CONFIG REQUIRED)
 find_package(tinyxml2 CONFIG REQUIRED)
 
 # Find Qt and OpenGL
@@ -130,8 +109,8 @@ find_package(Qt6 COMPONENTS Core Widgets OpenGL OpenGLWidgets Svg Test REQUIRED)
 find_package(Threads)
 
 # Populate version variables using git
-get_git_describe("${GIT_EXECUTABLE}" "${CMAKE_SOURCE_DIR}" GIT_DESCRIBE)
-get_app_version(GIT_DESCRIBE APP_VERSION_YEAR APP_VERSION_NUMBER)
+# get_git_describe("${GIT_EXECUTABLE}" "${CMAKE_SOURCE_DIR}" GIT_DESCRIBE)
+# get_app_version(GIT_DESCRIBE APP_VERSION_YEAR APP_VERSION_NUMBER)
 set(APP_BUILD_TYPE "${CMAKE_BUILD_TYPE}")
 
 # Some global variables used in several targets
diff --git a/app/CMakeLists.txt b/app/CMakeLists.txt
index 26c6e0b4d..6c58a8922 100644
--- a/app/CMakeLists.txt
+++ b/app/CMakeLists.txt
@@ -1,4 +1,4 @@
-include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/GenerateManual.cmake)
+# include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/GenerateManual.cmake)
 
 set(APP_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src")
 set(APP_RESOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/resources")
@@ -113,7 +113,7 @@ target_link_libraries(TrenchBroom common) # common already comes with all its de
 # Xcode "new build system" does't allow custom commands to be depended on by two unrelated targets
 # In this case, ${INDEX_OUTPUT_PATH} is depended on by TrenchBroom and GenerateManual
 # so we must make TrenchBroom depend on GenerateManual (see #3608)
-add_dependencies(TrenchBroom GenerateManual)
+# add_dependencies(TrenchBroom GenerateManual)
 set_compiler_config(TrenchBroom)
 
 set_target_properties(TrenchBroom PROPERTIES AUTORCC TRUE)
@@ -216,7 +216,7 @@ endif()
 # Set up the resources and DLLs for the executable
 set(APP_RESOURCE_DEST_DIR "$<TARGET_FILE_DIR:TrenchBroom>")
 
-if(WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES "Linux|FreeBSD")
+if(WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES "Linux|FreeBSD|Haiku")
     # Copy button images to resources directory
     add_custom_command(TARGET TrenchBroom POST_BUILD
             COMMAND ${CMAKE_COMMAND} -E copy_directory "${APP_RESOURCE_DIR}/graphics/images" "${APP_RESOURCE_DEST_DIR}/images")
@@ -248,22 +248,24 @@ if(WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES "Linux|FreeBSD")
             COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_RESOURCE_DEST_DIR}/stylesheets/"
             COMMAND ${CMAKE_COMMAND} -E copy_directory "${APP_RESOURCE_DIR}/stylesheets" "${APP_RESOURCE_DEST_DIR}/stylesheets")
 
-    # Copy manual files to resource directory
-    add_custom_command(TARGET TrenchBroom POST_BUILD
-            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_RESOURCE_DEST_DIR}/manual/"
-            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_RESOURCE_DEST_DIR}/manual/images"
-            COMMAND ${CMAKE_COMMAND} -E copy "${INDEX_OUTPUT_PATH}" "${APP_RESOURCE_DEST_DIR}/manual/"
-            COMMAND ${CMAKE_COMMAND} -E copy "${DOC_MANUAL_SHORTCUTS_JS_TARGET_ABSOLUTE}" "${APP_RESOURCE_DEST_DIR}/manual/")
-
-    foreach(MANUAL_FILE ${DOC_MANUAL_TARGET_FILES_ABSOLUTE})
+    if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Haiku")
+        # Copy manual files to resource directory
         add_custom_command(TARGET TrenchBroom POST_BUILD
-                COMMAND ${CMAKE_COMMAND} -E copy ${MANUAL_FILE} "${APP_RESOURCE_DEST_DIR}/manual/")
-    endforeach(MANUAL_FILE)
+                COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_RESOURCE_DEST_DIR}/manual/"
+                COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_RESOURCE_DEST_DIR}/manual/images"
+                COMMAND ${CMAKE_COMMAND} -E copy "${INDEX_OUTPUT_PATH}" "${APP_RESOURCE_DEST_DIR}/manual/"
+                COMMAND ${CMAKE_COMMAND} -E copy "${DOC_MANUAL_SHORTCUTS_JS_TARGET_ABSOLUTE}" "${APP_RESOURCE_DEST_DIR}/manual/")
 
-    foreach(MANUAL_IMAGE_FILE ${DOC_MANUAL_TARGET_IMAGE_FILES_ABSOLUTE})
-        add_custom_command(TARGET TrenchBroom POST_BUILD
-                COMMAND ${CMAKE_COMMAND} -E copy ${MANUAL_IMAGE_FILE} "${APP_RESOURCE_DEST_DIR}/manual/images/")
-    endforeach(MANUAL_IMAGE_FILE)
+        foreach(MANUAL_FILE ${DOC_MANUAL_TARGET_FILES_ABSOLUTE})
+            add_custom_command(TARGET TrenchBroom POST_BUILD
+                    COMMAND ${CMAKE_COMMAND} -E copy ${MANUAL_FILE} "${APP_RESOURCE_DEST_DIR}/manual/")
+        endforeach(MANUAL_FILE)
+
+        foreach(MANUAL_IMAGE_FILE ${DOC_MANUAL_TARGET_IMAGE_FILES_ABSOLUTE})
+            add_custom_command(TARGET TrenchBroom POST_BUILD
+                    COMMAND ${CMAKE_COMMAND} -E copy ${MANUAL_IMAGE_FILE} "${APP_RESOURCE_DEST_DIR}/manual/images/")
+        endforeach(MANUAL_IMAGE_FILE)
+    endif()
 endif()
 
 # Common CPack configuration
diff --git a/cmake/Utils.cmake b/cmake/Utils.cmake
index 33233de95..450a0112e 100644
--- a/cmake/Utils.cmake
+++ b/cmake/Utils.cmake
@@ -227,11 +227,14 @@ macro(GET_GIT_DESCRIBE GIT SOURCE_DIR GIT_DESCRIBE)
     endif()
 endmacro(GET_GIT_DESCRIBE)
 
+
 macro(GET_BUILD_PLATFORM PLATFORM_NAME)
     if(WIN32)
         set(${PLATFORM_NAME} "Win64")
     elseif(APPLE)
         set(${PLATFORM_NAME} "macOS")
+    elseif(HAIKU)
+        set(${PLATFORM_NAME} "Haiku")
     elseif(UNIX)
         set(${PLATFORM_NAME} "Linux")
     else()
diff --git a/cmake/packages/freeimage-config.cmake b/cmake/packages/freeimage-config.cmake
index 027013f14..1080629c0 100644
--- a/cmake/packages/freeimage-config.cmake
+++ b/cmake/packages/freeimage-config.cmake
@@ -13,7 +13,9 @@ find_path(freeimage_INCLUDE_DIR
   /usr/include
   /usr/local/include
   /sw/include
-  /opt/local/include)
+  /opt/local/include
+  /boot/system/develop/headers
+  /boot/system/develop/headers/x86)
 find_library(freeimage_LIBRARY
   NAMES FreeImage freeimage
   PATHS
@@ -22,7 +24,9 @@ find_library(freeimage_LIBRARY
   /usr/local/lib64
   /usr/local/lib
   /sw/lib
-  /opt/local/lib)
+  /opt/local/lib
+  /boot/system/lib
+  /boot/system/lib/x86)
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(freeimage
diff --git a/cmake/packages/freetype-config.cmake b/cmake/packages/freetype-config.cmake
index ccacae6c9..2d7b9fd31 100644
--- a/cmake/packages/freetype-config.cmake
+++ b/cmake/packages/freetype-config.cmake
@@ -14,7 +14,9 @@ find_path(freetype_INCLUDE_DIR
   /usr/include/freetype2
   /usr/local/include
   /sw/include
-  /opt/local/include)
+  /opt/local/include
+  /boot/system/develop/headers/freetype2
+  /boot/system/develop/headers/x86/freetype2)
 find_library(freetype_LIBRARY
   NAMES FreeType freetype
   PATHS
@@ -23,7 +25,9 @@ find_library(freetype_LIBRARY
   /usr/local/lib64
   /usr/local/lib
   /sw/lib
-  /opt/local/lib)
+  /opt/local/lib
+  /boot/system/lib
+  /boot/system/lib/x86)
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(freetype
diff --git a/cmake/packages/tinyxml2-config.cmake b/cmake/packages/tinyxml2-config.cmake
index c529fd484..205fa5d83 100644
--- a/cmake/packages/tinyxml2-config.cmake
+++ b/cmake/packages/tinyxml2-config.cmake
@@ -13,7 +13,9 @@ find_path(tinyxml2_INCLUDE_DIR
   /usr/include
   /usr/local/include
   /sw/include
-  /opt/local/include)
+  /opt/local/include
+  /boot/system/develop/headers
+  /boot/system/develop/headers/x86)
 find_library(tinyxml2_LIBRARY
   NAMES tinyxml2
   PATHS
@@ -22,7 +24,9 @@ find_library(tinyxml2_LIBRARY
   /usr/local/lib64
   /usr/local/lib
   /sw/lib
-  /opt/local/lib)
+  /opt/local/lib
+  /boot/system/lib
+  /boot/system/lib/x86)
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(tinyxml2
diff --git a/common/CMakeLists.txt b/common/CMakeLists.txt
index 2fec2697c..e9d7e8b37 100644
--- a/common/CMakeLists.txt
+++ b/common/CMakeLists.txt
@@ -1034,7 +1034,7 @@ set(COMMON_HEADER
 add_library(common OBJECT ${COMMON_SOURCE} ${COMMON_HEADER})
 set_target_properties(common PROPERTIES AUTOMOC TRUE)
 target_include_directories(common PUBLIC ${COMMON_SOURCE_DIR})
-target_link_libraries(common PUBLIC tinyxml2::tinyxml2 kdl vm GLEW::GLEW miniz::miniz freeimage::FreeImage freetype OpenGL::GL Qt6::Widgets Qt6::OpenGL Qt6::OpenGLWidgets Qt6::Svg fmt::fmt assimp::assimp)
+target_link_libraries(common PUBLIC tinyxml2::tinyxml2 kdl vm GLEW::GLEW miniz::miniz freeimage::FreeImage freetype OpenGL::GL Qt6::Widgets Qt6::OpenGL Qt6::OpenGLWidgets Qt6::Svg fmt::fmt assimp::assimp execinfo)
 
 # use precompiled headers on CMake 3.16 or later
 if (TB_ENABLE_PCH AND ${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.16.0")
@@ -1114,7 +1114,9 @@ add_custom_target(generate_version ${CMAKE_COMMAND}
   -D APP_BUILD_TYPE="${APP_BUILD_TYPE}"
   -D SRC="${COMMON_SOURCE_DIR}/Version.h.in"
   -D DST="${CMAKE_CURRENT_BINARY_DIR}/Version.h"
-  -D GIT_EXECUTABLE="${GIT_EXECUTABLE}"
+  # -D GIT_EXECUTABLE="${GIT_EXECUTABLE}"
+  -D APP_VERSION_YEAR="${APP_VERSION_YEAR}"
+  -D APP_VERSION_NUMBER="${APP_VERSION_NUMBER}"
   -P "${CMAKE_CURRENT_SOURCE_DIR}/cmake/GenerateVersion.cmake")
 add_dependencies(common generate_version)
 
diff --git a/common/cmake/GenerateVersion.cmake b/common/cmake/GenerateVersion.cmake
index 082c04547..776b5bd0c 100644
--- a/common/cmake/GenerateVersion.cmake
+++ b/common/cmake/GenerateVersion.cmake
@@ -1,8 +1,8 @@
 include("${UTILS}")
 
 get_filename_component(SRC_DIR ${SRC} DIRECTORY)
-get_git_describe("${GIT_EXECUTABLE}" "${SRC_DIR}" GIT_DESCRIBE)
-get_app_version(GIT_DESCRIBE APP_VERSION_YEAR APP_VERSION_NUMBER)
+# get_git_describe("${GIT_EXECUTABLE}" "${SRC_DIR}" GIT_DESCRIBE)
+# get_app_version(GIT_DESCRIBE APP_VERSION_YEAR APP_VERSION_NUMBER)
 get_build_platform(APP_PLATFORM_NAME)
 
 configure_file("${SRC}" "${DST}" @ONLY)
diff --git a/common/src/io/StandardMapParser.cpp b/common/src/io/StandardMapParser.cpp
index f8521b89b..522782cdb 100644
--- a/common/src/io/StandardMapParser.cpp
+++ b/common/src/io/StandardMapParser.cpp
@@ -294,7 +294,7 @@ void StandardMapParser::parseObject(ParserStatus& status)
     expect(QuakeMapToken::String | QuakeMapToken::OParenthesis, token);
     if (token.hasType(QuakeMapToken::String))
     {
-      expect({BrushPrimitiveId, PatchId}, token);
+      expect(std::vector<std::string>{BrushPrimitiveId, PatchId}, token);
       if (token.data() == BrushPrimitiveId)
       {
         parseBrushPrimitive(status, startLocation);
diff --git a/common/src/io/ZipFileSystem.h b/common/src/io/ZipFileSystem.h
index e4fc4d579..156bb6c1b 100644
--- a/common/src/io/ZipFileSystem.h
+++ b/common/src/io/ZipFileSystem.h
@@ -22,7 +22,7 @@
 #include "Result.h"
 #include "io/ImageFileSystem.h"
 
-#include <miniz/miniz.h>
+#include "miniz.h"
 
 #include <mutex>
 
diff --git a/common/src/render/ShaderProgram.cpp b/common/src/render/ShaderProgram.cpp
index 41be114bb..e1be3ceb6 100644
--- a/common/src/render/ShaderProgram.cpp
+++ b/common/src/render/ShaderProgram.cpp
@@ -145,7 +145,7 @@ void ShaderProgram::set(const std::string& name, const float value)
 void ShaderProgram::set(const std::string& name, const double value)
 {
   assert(checkActive());
-  glAssert(glUniform1d(findUniformLocation(name), value));
+  glAssert(glUniform1f(findUniformLocation(name), (float)value));
 }
 
 void ShaderProgram::set(const std::string& name, const vm::vec2f& value)
diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index f4edbf38b..3f27bdd6a 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -1,3 +1,4 @@
 add_subdirectory(kdl)
 add_subdirectory(vm)
 add_subdirectory(stackwalker)
+add_subdirectory(miniz)
diff --git a/lib/miniz/CMakeLists.txt b/lib/miniz/CMakeLists.txt
new file mode 100644
index 000000000..3e3c07a40
--- /dev/null
+++ b/lib/miniz/CMakeLists.txt
@@ -0,0 +1,12 @@
+cmake_minimum_required(VERSION 3.5)
+project(miniz LANGUAGES C VERSION 3.0.2)
+
+add_library(miniz STATIC)
+add_library(miniz::miniz ALIAS miniz)
+
+target_sources(miniz PRIVATE
+	${PROJECT_SOURCE_DIR}/miniz.c
+	${PROJECT_SOURCE_DIR}/miniz.h
+)
+
+target_include_directories(miniz PUBLIC ${PROJECT_SOURCE_DIR})
-- 
2.48.1

