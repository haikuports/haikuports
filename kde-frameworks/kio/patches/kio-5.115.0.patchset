From d7845dfeb29ca8652b1cf267e8175ffbb49d3179 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sun, 25 Feb 2024 22:58:08 +1000
Subject: Fix build on Haiku


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 17b2a03..bf60ebe 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -174,7 +174,7 @@ add_definitions(-DTRANSLATION_DOMAIN=\"kio5\")
 ki18n_install(po)
 
 if (KF5DocTools_FOUND)
-    kdoctools_install(po)
+    #kdoctool_install(po)
 endif()
 
 if (KF5DocTools_FOUND)
diff --git a/autotests/jobtest.cpp b/autotests/jobtest.cpp
index 46e4f38..4acdb8e 100644
--- a/autotests/jobtest.cpp
+++ b/autotests/jobtest.cpp
@@ -1946,7 +1946,7 @@ void JobTest::statTimeResolution()
 
     QFile dest_file(filePath);
     QVERIFY(dest_file.open(QIODevice::ReadOnly));
-#if defined(Q_OS_LINUX) || defined(Q_OS_FREEBSD)
+#if defined(Q_OS_LINUX) || defined(Q_OS_FREEBSD) || defined(Q_OS_HAIKU)
     // with nano secs precision
     struct timespec ut[2];
     ut[0].tv_sec = early70sTime;
diff --git a/docs/CMakeLists.txt b/docs/CMakeLists.txt
index b88f5d4..1fabc11 100644
--- a/docs/CMakeLists.txt
+++ b/docs/CMakeLists.txt
@@ -1,3 +1,3 @@
-add_subdirectory(kcookiejar5)
-add_subdirectory(kioslave5)
-add_subdirectory(kcontrol5)
+#add_subdirectory(kcookiejar5)
+#add_subdirectory(kioslave5)
+#add_subdirectory(kcontrol5)
diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index ddfdc02..2eecf7b 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -245,6 +245,10 @@ if (TARGET KF5::AuthCore)
   target_link_libraries(KF5KIOCore PRIVATE KF5::AuthCore)   #SlaveBase uses KAuth::Action
 endif()
 
+if (HAIKU)
+  target_link_libraries(KF5KIOCore PRIVATE network)
+endif ()
+
 if(ACL_FOUND)
   target_link_libraries(KF5KIOCore PRIVATE ${ACL_LIBS})
 endif()
diff --git a/src/ioslaves/file/CMakeLists.txt b/src/ioslaves/file/CMakeLists.txt
index 88aa396..982532e 100644
--- a/src/ioslaves/file/CMakeLists.txt
+++ b/src/ioslaves/file/CMakeLists.txt
@@ -34,6 +34,10 @@ if(UNIX)
   target_link_libraries(kio_file Qt${QT_MAJOR_VERSION}::Network KF5::AuthCore)
 endif()
 
+if (HAIKU)
+  target_link_libraries(kio_file gnu network)
+endif ()
+
 if(ACL_FOUND)
    target_link_libraries(kio_file ${ACL_LIBS})
 endif()
diff --git a/src/ioslaves/file/file_unix.cpp b/src/ioslaves/file/file_unix.cpp
index c0bc643..af87f8d 100644
--- a/src/ioslaves/file/file_unix.cpp
+++ b/src/ioslaves/file/file_unix.cpp
@@ -73,6 +73,11 @@
 #include <sys/extattr.h>
 #endif
 
+#ifdef __HAIKU__
+#undef HAVE_DIRENT_D_TYPE
+#undef HAVE_SYS_XATTR_H
+#endif
+
 using namespace KIO;
 
 /* 512 kB */
@@ -927,7 +932,7 @@ void FileProtocol::copy(const QUrl &srcUrl, const QUrl &destUrl, int _mode, JobF
 
     // copy access and modification time
     if (!wasKilled()) {
-#if defined(Q_OS_LINUX) || defined(Q_OS_FREEBSD)
+#if defined(Q_OS_LINUX) || defined(Q_OS_FREEBSD) || defined(Q_OS_HAIKU)
         // with nano secs precision
         struct timespec ut[2];
         ut[0] = buffSrc.st_atim;
diff --git a/src/ioslaves/file/kauth/CMakeLists.txt b/src/ioslaves/file/kauth/CMakeLists.txt
index 4dbe296..d9020f6 100644
--- a/src/ioslaves/file/kauth/CMakeLists.txt
+++ b/src/ioslaves/file/kauth/CMakeLists.txt
@@ -1,6 +1,10 @@
 add_executable(file_helper filehelper.cpp fdsender.cpp)
 target_link_libraries(file_helper Qt${QT_MAJOR_VERSION}::Network KF5::AuthCore KF5::I18n KF5::KIOCore)
 
+if (HAIKU)
+	target_link_libraries(file_helper network)
+endif ()
+
 #install(TARGETS file_helper DESTINATION ${KAUTH_HELPER_INSTALL_DIR})
 #kauth_install_helper_files(file_helper org.kde.kio.file root)
 #kauth_install_actions(org.kde.kio.file file.actions)
diff --git a/src/kpac/CMakeLists.txt b/src/kpac/CMakeLists.txt
index f158c8e..b5edd54 100644
--- a/src/kpac/CMakeLists.txt
+++ b/src/kpac/CMakeLists.txt
@@ -52,6 +52,10 @@ if (TARGET Qt${QT_MAJOR_VERSION}::Qml)
       target_link_libraries(kded_proxyscout PRIVATE resolv)
     endif ()
 
+    if (HAIKU)
+      target_link_libraries(kded_proxyscout PRIVATE network)
+    endif ()
+
     if (TARGET Qt6::Core5Compat)
         target_link_libraries(kded_proxyscout PRIVATE Qt6::Core5Compat) # QTextCodec
     endif()
@@ -87,6 +91,10 @@ if (HAVE_SOCKET_LIBRARY)
   target_link_libraries(kpac_dhcp_helper socket)
 endif ()
 
+if (HAIKU)
+  target_link_libraries(kpac_dhcp_helper network)
+endif ()
+
 install(TARGETS kpac_dhcp_helper DESTINATION ${KDE_INSTALL_LIBEXECDIR_KF} )
 
 ########### install files ###############
diff --git a/src/widgets/previewjob.cpp b/src/widgets/previewjob.cpp
index 214e3b3..2429b34 100644
--- a/src/widgets/previewjob.cpp
+++ b/src/widgets/previewjob.cpp
@@ -11,7 +11,7 @@
 #include "previewjob.h"
 #include "kio_widgets_debug.h"
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_ANDROID)
+#if defined(Q_OS_UNIX) && !defined(Q_OS_ANDROID) && !defined(Q_OS_HAIKU)
 #define WITH_SHM 1
 #else
 #define WITH_SHM 0
-- 
2.43.2


From 06d8b5484eeae4b207bfbe888fd388dd0d3123b7 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sun, 25 Feb 2024 22:59:02 +1000
Subject: Add OpenWith handler for Haiku


diff --git a/src/gui/openurljob.cpp b/src/gui/openurljob.cpp
index 35d45ae..ac7945a 100644
--- a/src/gui/openurljob.cpp
+++ b/src/gui/openurljob.cpp
@@ -160,7 +160,7 @@ void KIO::OpenUrlJob::start()
         emitResult();
     };
 
-#if defined(Q_OS_WIN) || defined(Q_OS_MACOS)
+#if defined(Q_OS_WIN) || defined(Q_OS_MACOS) || defined(Q_OS_HAIKU)
     if (d->m_externalBrowserEnabled) {
         // For Windows and MacOS, the mimetypes handling is different, so use QDesktopServices
         qtOpenUrl();
diff --git a/src/widgets/CMakeLists.txt b/src/widgets/CMakeLists.txt
index 3ad2b72..419e491 100644
--- a/src/widgets/CMakeLists.txt
+++ b/src/widgets/CMakeLists.txt
@@ -159,6 +159,10 @@ if(ACL_FOUND)
    target_link_libraries(KF5KIOWidgets PRIVATE ${ACL_LIBS})
 endif()
 
+if(HAIKU)
+   target_link_libraries(KF5KIOWidgets PRIVATE be tracker)
+endif()
+
 # Headers not prefixed with KIO/
 ecm_generate_headers(KIOWidgets_HEADERS
   HEADER_NAMES
diff --git a/src/widgets/krun.cpp b/src/widgets/krun.cpp
index 3faab31..90e6377 100644
--- a/src/widgets/krun.cpp
+++ b/src/widgets/krun.cpp
@@ -70,6 +70,10 @@
 #include "widgetsopenwithhandler_win.cpp" // displayNativeOpenWithDialog
 #endif
 
+#ifdef Q_OS_HAIKU
+#include "widgetsopenwithhandler_haiku.cpp"
+#endif
+
 KRunPrivate::KRunPrivate(KRun *parent)
     : q(parent)
     , m_showingDialog(false)
@@ -197,7 +201,7 @@ bool KRun::displayOpenWithDialog(const QList<QUrl> &lst, QWidget *window, bool t
         return false;
     }
 
-#ifdef Q_OS_WIN
+#if defined(Q_OS_WIN) || defined(Q_OS_HAIKU)
     KConfigGroup cfgGroup(KSharedConfig::openConfig(), QStringLiteral("KOpenWithDialog Settings"));
     if (cfgGroup.readEntry("Native", true)) {
         return displayNativeOpenWithDialog(lst, window);
diff --git a/src/widgets/widgetsopenwithhandler.cpp b/src/widgets/widgetsopenwithhandler.cpp
index ce51f52..bef7d0a 100644
--- a/src/widgets/widgetsopenwithhandler.cpp
+++ b/src/widgets/widgetsopenwithhandler.cpp
@@ -20,6 +20,10 @@
 #include "widgetsopenwithhandler_win.cpp" // displayNativeOpenWithDialog
 #endif
 
+#ifdef Q_OS_HAIKU
+#include "widgetsopenwithhandler_haiku.cpp"
+#endif
+
 KIO::WidgetsOpenWithHandler::WidgetsOpenWithHandler(QObject *parent)
     : KIO::OpenWithHandlerInterface(parent)
 {
@@ -48,7 +52,7 @@ void KIO::WidgetsOpenWithHandler::promptUserForApplication(KJob *job, const QLis
         parentWidget = qApp->activeWindow();
     }
 
-#ifdef Q_OS_WIN
+#if defined(Q_OS_WIN) || defined(Q_OS_HAIKU)
     KConfigGroup cfgGroup(KSharedConfig::openConfig(), QStringLiteral("KOpenWithDialog Settings"));
     if (cfgGroup.readEntry("Native", true)) {
         // Implemented in applicationlauncherjob_win.cpp
diff --git a/src/widgets/widgetsopenwithhandler_haiku.cpp b/src/widgets/widgetsopenwithhandler_haiku.cpp
new file mode 100644
index 0000000..9614b87
--- /dev/null
+++ b/src/widgets/widgetsopenwithhandler_haiku.cpp
@@ -0,0 +1,38 @@
+/*
+    This file is part of the KDE libraries
+    SPDX-FileCopyrightText: 2022 Gerasim Troeglazov <3dEyes@gmail.com>
+
+    SPDX-License-Identifier: LGPL-2.0-or-later
+*/
+
+#include <QDir>
+#include <QWidget>
+
+#include <InterfaceKit.h>
+#include <StorageKit.h>
+#include <SupportKit.h>
+#include <MimeType.h>
+#include <Roster.h>
+
+static bool displayNativeOpenWithDialog(const QList<QUrl> &lst, QWidget *window)
+{
+	BMessenger trackerMessenger("application/x-vnd.Be-TRAK");
+	if (trackerMessenger.IsValid()) {
+		BMessage openCommand(B_REFS_RECEIVED);
+    	for (const QUrl &url : lst) {
+    		if (!url.isLocalFile())
+    			return false;
+        	QString filepath = QDir::toNativeSeparators(url.toLocalFile());
+        	BEntry fileEntry(filepath.toUtf8().data());
+			entry_ref fileRef;
+			if (fileEntry.GetRef(&fileRef) == B_OK) {
+				update_mime_info(filepath.toUtf8().data(), false, true, false);
+				openCommand.AddRef("refs", &fileRef);
+			}
+    	}
+		openCommand.AddInt32("launchUsingSelector", 0);
+		if (trackerMessenger.SendMessage(&openCommand) == B_OK)
+			return true;
+	}
+    return false;
+}
-- 
2.43.2


From e4eaa974dd547ee95f884999318058c223fd8139 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sun, 25 Feb 2024 23:14:26 +1000
Subject: Fix build


diff --git a/src/ioslaves/file/file_unix.cpp b/src/ioslaves/file/file_unix.cpp
index af87f8d..0de6b05 100644
--- a/src/ioslaves/file/file_unix.cpp
+++ b/src/ioslaves/file/file_unix.cpp
@@ -76,6 +76,9 @@
 #ifdef __HAIKU__
 #undef HAVE_DIRENT_D_TYPE
 #undef HAVE_SYS_XATTR_H
+#define HAVE_SYS_XATTR_H 0
+#undef HAVE_SYS_EXTATTR_H
+#define HAVE_SYS_EXTATTR_H 0
 #endif
 
 using namespace KIO;
-- 
2.43.2


From 4dfb100876f110ad3e9ee5f3fe35b85d579ba7d3 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sun, 10 Mar 2024 15:28:06 +1000
Subject: Disable threads kio_file support for now. It's totally broken on
 OpenBSD and Haiku (https://bugs.kde.org/show_bug.cgi?id=463796)


diff --git a/src/core/slave.cpp b/src/core/slave.cpp
index e51d76a..00e7c24 100644
--- a/src/core/slave.cpp
+++ b/src/core/slave.cpp
@@ -455,7 +455,7 @@ Slave *Slave::createSlave(const QString &protocol, const QUrl &url, int &error,
     const auto useThreads = []() {
         return qgetenv("KIO_ENABLE_WORKER_THREADS") != "0";
     };
-    static bool bUseThreads = useThreads();
+    static bool bUseThreads = false;
 
     // Threads have performance benefits, but degrade robustness
     // (a worker crashing kills the app). So let's only enable the feature for kio_file, for now.
-- 
2.43.2

