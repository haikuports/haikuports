SUMMARY="Generate documentation from source code"
DESCRIPTION="Doxygen is the de facto standard tool for generating \
documentation from annotated C++ sources, but it also supports other popular \
programming languages such as C, Objective-C, C#, PHP, Java, Python, IDL \
(Corba  and Microsoft flavors), Fortran, VHDL, Tcl, and to some extent D.
Doxygen can:
  * generate an on-line documentation browser (in HTML) and/or an \
off-line reference manual (in LaTeX) from a set of documented source \
files. There is also support for generating output in RTF (MS-Word), \
PostScript, hyperlinked PDF, compressed HTML, and Unix man pages. The \
documentation is extracted directly from the sources, which makes it much \
easier to keep the documentation consistent with the source code.
 * extract the code structure from undocumented source files. This is \
very useful to quickly find your way in large source distributions. \
Doxygen can also visualize the relations between the various elements \
by means of include dependency graphs, inheritance diagrams, and \
collaboration diagrams, which are all generated automatically."
HOMEPAGE="http://www.doxygen.org/"
COPYRIGHT="1997-2016 Dimitri van Heesch"
LICENSE="GNU GPL v2"
REVISION="1"
SOURCE_URI="http://ftp.stack.nl/pub/users/dimitri/doxygen-$portVersion.src.tar.gz"
CHECKSUM_SHA256="af667887bd7a87dc0dbf9ac8d86c96b552dfb8ca9c790ed1cbffaa6131573f6b"
PATCHES="doxygen-$portVersion.patch"

ARCHITECTURES="!x86_gcc2 x86 x86_64"
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	doxygen$secondaryArchSuffix = $portVersion compat >= 1.8
	cmd:doxygen = $portVersion compat >= 1.8
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libiconv$secondaryArchSuffix
	"

BUILD_REQUIRES="
	devel:libiconv$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	haiku${secondaryArchSuffix}_devel
	cmd:cmake
	cmd:python
	cmd:bison
	cmd:flex
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:make
	cmd:perl
	cmd:sed
	"

BUILD()
{
	# doesn't use GNUInstallDirs so we can't use $cmakeDirArgs
	cmake . -DCMAKE_INSTALL_PREFIX=$prefix
	make $jobArgs
}

INSTALL()
{
	make install
}
