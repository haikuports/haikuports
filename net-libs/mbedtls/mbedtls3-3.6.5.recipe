SUMMARY="Open source, portable, easy to use, readable and flexible SSL library"
DESCRIPTION="mbed TLS (formerly known as PolarSSL) makes it trivially easy for \
developers to include cryptographic and SSL/TLS capabilities in their (embedded) \
products, facilitating this functionality with a minimal coding footprint."
HOMEPAGE="https://tls.mbed.org/"
COPYRIGHT="2006-2018 ARM Limited"
LICENSE="Apache v2"
REVISION="1"
SOURCE_URI="https://github.com/Mbed-TLS/mbedtls/releases/download/mbedtls-$portVersion/mbedtls-$portVersion.tar.bz2"
CHECKSUM_SHA256="4a11f1777bb95bf4ad96721cac945a26e04bf19f57d905f241fe77ebeddf46d8"
SOURCE_DIR="mbedtls-$portVersion"
PATCHES="mbedtls3-$portVersion.patchset"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

libVersion="$portVersion"
libVersionCompat="$libVersion compat >= ${libVersion%%.*}"

PROVIDES="
	mbedtls3$secondaryArchSuffix = $portVersion
	lib:libmbedcrypto$secondaryArchSuffix = $libVersionCompat
	lib:libmbedtls$secondaryArchSuffix = $libVersionCompat
	lib:libmbedx509$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libz$secondaryArchSuffix
	"

CONFLICTS="
	mbedtls$secondaryArchSuffix
	"

PROVIDES_tools="
	mbedtls3${secondaryArchSuffix}_tools
	cmd:aead_demo = $portVersion
	cmd:aescrypt2 = $portVersion
	cmd:benchmark = $portVersion
	cmd:cert_app = $portVersion
	cmd:cert_req = $portVersion
	cmd:cert_write = $portVersion
	cmd:cipher_aead_demo = $portVersion
	cmd:crl_app = $portVersion
	cmd:crypto_examples = $portVersion
	cmd:crypt_and_hash = $portVersion
	cmd:dh_client = $portVersion
	cmd:dh_genprime = $portVersion
	cmd:dh_server = $portVersion
	cmd:dtls_client = $portVersion
	cmd:dtls_server = $portVersion
	cmd:ecdh_curve25519 = $portVersion
	cmd:ecdsa = $portVersion
	cmd:generic_sum = $portVersion
	cmd:gen_entropy = $portVersion
	cmd:gen_key = $portVersion
	cmd:gen_random_ctr_drbg = $portVersion
	cmd:gen_random_havege = $portVersion
	cmd:hmac_demo = $portVersion
	cmd:key_app = $portVersion
	cmd:key_app_writer = $portVersion
	cmd:key_ladder_demo = $portVersion
	cmd:key_ladder_demo.sh = $portVersion
	cmd:load_roots = $portVersion
	cmd:md_hmac_demo = $portVersion
	cmd:metatest = $portVersion
	cmd:mini_client = $portVersion
	cmd:mpi_demo = $portVersion
	cmd:pem2der = $portVersion
	cmd:pk_decrypt = $portVersion
	cmd:pk_encrypt = $portVersion
	cmd:pk_sign = $portVersion
	cmd:pk_verify = $portVersion
	cmd:psa_constant_names = $portVersion
	cmd:psa_hash = $portVersion
	cmd:query_compile_time_config = $portVersion
	cmd:query_included_headers = $portVersion
	cmd:req_app = $portVersion
	cmd:rsa_decrypt = $portVersion
	cmd:rsa_encrypt = $portVersion
	cmd:rsa_genkey = $portVersion
	cmd:rsa_sign = $portVersion
	cmd:rsa_sign_pss = $portVersion
	cmd:rsa_verify = $portVersion
	cmd:rsa_verify_pss = $portVersion
	cmd:selftest = $portVersion
	cmd:ssl_cert_test = $portVersion
	cmd:ssl_client1 = $portVersion
	cmd:ssl_client2 = $portVersion
	cmd:ssl_context_info = $portVersion
	cmd:ssl_fork_server = $portVersion
	cmd:ssl_mail_client = $portVersion
	cmd:ssl_pthread_server = $portVersion
	cmd:ssl_server = $portVersion
	cmd:ssl_server2 = $portVersion
	cmd:strerror = $portVersion
	cmd:udp_proxy = $portVersion
	cmd:udp_proxy_wrapper.sh = $portVersion
	cmd:zeroize = $portVersion
	"
REQUIRES_tools="
	mbedtls3$secondaryArchSuffix == $portVersion base
	haiku$secondaryArchSuffix
	lib:libz$secondaryArchSuffix
	"

CONFLICTS_tools="
	mbedtls$secondaryArchSuffix_tools
	"

PROVIDES_devel="
	mbedtls3${secondaryArchSuffix}_devel = $portVersion
	devel:libmbedcrypto$secondaryArchSuffix = $libVersionCompat
	devel:libmbedtls$secondaryArchSuffix = $libVersionCompat
	devel:libmbedx509$secondaryArchSuffix = $libVersionCompat
	devel:libeverest$secondaryArchSuffix
	devel:libp256m$secondaryArchSuffix
	"
REQUIRES_devel="
	mbedtls3$secondaryArchSuffix == $portVersion base
	"

CONFLICTS_devel="
	mbedtls$secondaryArchSuffix_devel
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libz$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:cmake
	cmd:gcc$secondaryArchSuffix
	cmd:ninja
	cmd:perl
	cmd:python3
	cmd:sed
	"

BUILD()
{
	export LDFLAGS="-lnetwork"
	cmake -Bbuild -S. -G Ninja -DCMAKE_BUILD_TYPE=Release \
		$cmakeDirArgs \
		-DUSE_SHARED_MBEDTLS_LIBRARY=ON \
		-DUSE_STATIC_MBEDTLS_LIBRARY=OFF \
		-DMBEDTLS_FATAL_WARNINGS=OFF \
		-Wno-dev
	cmake --build build $jobArgs
}

INSTALL()
{
	cmake --install build

	# remove useless binary
	rm -r $prefix/bin/hello

	prepareInstalledDevelLibs \
		libmbedcrypto \
		libmbedtls \
		libmbedx509 \
		libeverest \
		libp256m
	fixPkgconfig

	packageEntries devel \
		"$developDir" \
		"$libDir/cmake"

	packageEntries tools \
		$prefix/bin
}

TEST()
{

	LIBRARY_PATH="$sourceDir/library${LIBRARY_PATH:+:$LIBRARY_PATH}" ctest --test-dir build --output-on-failure
}
