From 4165721eb5ccdb598ec6a19527ba5e81a6a236a3 Mon Sep 17 00:00:00 2001
From: Trung Nguyen <trungnt282910@gmail.com>
Date: Sun, 29 May 2022 16:29:52 +0000
Subject: [libcxx] Initial support for Haiku

---
 CMakeLists.txt                           | 12 ++++++++++++
 cmake/config-ix.cmake                    | 15 +++++++++++++++
 include/CMakeLists.txt                   |  1 +
 include/__config                         |  1 +
 include/__locale                         |  4 +++-
 include/__support/haiku/xlocale.h        | 17 +++++++++++++++++
 src/include/config_elast.h               |  2 ++
 src/locale.cpp                           |  2 ++
 8 files changed, 53 insertions(+), 1 deletion(-)
 create mode 100644 include/__support/haiku/xlocale.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index cdd5495e36..af2f838c03 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -749,6 +749,10 @@ function(cxx_link_system_libraries target)
     target_link_libraries(${target} PRIVATE rt)
   endif()
 
+  if (LIBCXX_HAS_ROOT_LIB)
+    target_link_libraries(${target} PRIVATE root)
+  endif()
+
   if (LIBCXX_USE_COMPILER_RT)
     find_compiler_rt_library(builtins LIBCXX_BUILTINS_LIBRARY)
     if (LIBCXX_BUILTINS_LIBRARY)
@@ -814,6 +818,13 @@ function(cxx_add_windows_flags target)
   endif()
 endfunction()
 
+# Haiku-related flags =======================================================
+function(cxx_add_haiku_flags target)
+  if(HAIKU)
+    target_compile_definitions(${target} PRIVATE _DEFAULT_SOURCE)
+  endif()
+endfunction()
+
 # Configuration file flags =====================================================
 if (NOT LIBCXX_ABI_VERSION EQUAL 1)
   config_define(${LIBCXX_ABI_VERSION} _LIBCPP_ABI_VERSION)
@@ -883,6 +894,7 @@ function(cxx_add_common_build_flags target)
   cxx_add_basic_build_flags(${target})
   cxx_add_warning_flags(${target})
   cxx_add_windows_flags(${target})
+  cxx_add_haiku_flags(${target})
   cxx_add_exception_flags(${target})
   cxx_add_rtti_flags(${target})
   cxx_add_module_flags(${target})
diff --git a/cmake/config-ix.cmake b/cmake/config-ix.cmake
index 894f637f81..f5fe6281c1 100644
--- a/cmake/config-ix.cmake
+++ b/cmake/config-ix.cmake
@@ -8,8 +8,14 @@ if(WIN32 AND NOT MINGW)
   # NOTE(compnerd) this is technically a lie, there is msvcrt, but for now, lets
   # let the default linking take care of that.
   set(LIBCXX_HAS_C_LIB NO)
+  set(LIBCXX_HAS_ROOT_LIB NO)
+elseif(HAIKU)
+  # Haiku uses libroot instead.
+  set(LIBCXX_HAS_C_LIB NO)
+  check_library_exists(root fopen "" LIBCXX_HAS_ROOT_LIB)
 else()
   check_library_exists(c fopen "" LIBCXX_HAS_C_LIB)
+  set(LIBCXX_HAS_ROOT_LIB NO)
 endif()
 
 if (NOT LIBCXX_USE_COMPILER_RT)
@@ -46,6 +52,9 @@ if (LIBCXX_SUPPORTS_NODEFAULTLIBS_FLAG)
   elseif (LIBCXX_HAS_GCC_S_LIB)
     list(APPEND CMAKE_REQUIRED_LIBRARIES gcc_s)
   endif ()
+  if (HAIKU AND LIBCXX_HAS_ROOT_LIB)
+    list(APPEND CMAKE_REQUIRED_LIBRARIES root)
+  endif ()
   if (MINGW)
     # Mingw64 requires quite a few "C" runtime libraries in order for basic
     # programs to link successfully with -nodefaultlibs.
@@ -99,6 +108,12 @@ elseif(FUCHSIA)
   set(LIBCXX_HAS_RT_LIB NO)
   set(LIBCXX_HAS_SYSTEM_LIB NO)
   check_library_exists(atomic __atomic_fetch_add_8 "" LIBCXX_HAS_ATOMIC_LIB)
+elseif(HAIKU)
+  set(LIBCXX_HAS_M_LIB NO)
+  set(LIBCXX_HAS_PTHREAD_LIB NO)
+  check_library_exists(rt clock_gettime "" LIBCXX_HAS_RT_LIB)
+  set(LIBCXX_HAS_SYSTEM_LIB NO)
+  check_library_exists(atomic __atomic_fetch_add_8 "" LIBCXX_HAS_ATOMIC_LIB)
 else()
   check_library_exists(pthread pthread_create "" LIBCXX_HAS_PTHREAD_LIB)
   check_library_exists(m ccos "" LIBCXX_HAS_M_LIB)
diff --git a/include/CMakeLists.txt b/include/CMakeLists.txt
index 29a317b8ae..764cc1be7d 100644
--- a/include/CMakeLists.txt
+++ b/include/CMakeLists.txt
@@ -152,6 +152,7 @@ set(files
   strstream
   __support/android/locale_bionic.h
   __support/fuchsia/xlocale.h
+  __support/haiku/xlocale.h
   __support/ibm/limits.h
   __support/ibm/locale_mgmt_aix.h
   __support/ibm/nanosleep.h
diff --git a/include/__config b/include/__config
index a3838c89e8..e65c44dfb2 100644
--- a/include/__config
+++ b/include/__config
@@ -1132,6 +1132,7 @@ extern "C" _LIBCPP_FUNC_VIS void __sanitizer_annotate_contiguous_container(
       defined(__CloudABI__) || \
       defined(__sun__) || \
       defined(__MVS__) || \
+      defined(__HAIKU__) || \
       (defined(__MINGW32__) && __has_include(<pthread.h>))
 #    define _LIBCPP_HAS_THREAD_API_PTHREAD
 #  elif defined(__Fuchsia__)
diff --git a/include/__locale b/include/__locale
index 77e5faab26..54a240079a 100644
--- a/include/__locale
+++ b/include/__locale
@@ -35,6 +35,8 @@
 # include <__support/newlib/xlocale.h>
 #elif defined(__OpenBSD__)
 # include <__support/openbsd/xlocale.h>
+#elif defined(__HAIKU__)
+# include <__support/haiku/xlocale.h>
 #elif (defined(__APPLE__)      || defined(__FreeBSD__) \
     || defined(__EMSCRIPTEN__) || defined(__IBMCPP__))
 # include <xlocale.h>
@@ -419,7 +421,7 @@ public:
 #else
     static const mask __regex_word = 1<<10;
 #endif // defined(__BIONIC__)
-#elif defined(__GLIBC__)
+#elif defined(__GLIBC__) || defined(__HAIKU__)
     typedef unsigned short mask;
     static const mask space  = _ISspace;
     static const mask print  = _ISprint;
diff --git a/include/__support/haiku/xlocale.h b/include/__support/haiku/xlocale.h
new file mode 100644
index 0000000000..0ce3fca183
--- /dev/null
+++ b/include/__support/haiku/xlocale.h
@@ -0,0 +1,17 @@
+// -*- C++ -*-
+//===-----------------------------------------------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef _LIBCPP_SUPPORT_HAIKU_XLOCALE_H
+#define _LIBCPP_SUPPORT_HAIKU_XLOCALE_H
+
+#if defined(__HAIKU__)
+#include <__support/xlocale/__strtonum_fallback.h>
+#endif // Haiku
+
+#endif
diff --git a/src/include/config_elast.h b/src/include/config_elast.h
index 3113f9fb5c..176cb06e3b 100644
--- a/src/include/config_elast.h
+++ b/src/include/config_elast.h
@@ -35,6 +35,8 @@
 // No _LIBCPP_ELAST needed on Apple
 #elif defined(__sun__)
 #define _LIBCPP_ELAST ESTALE
+#elif defined(__HAIKU__)
+// No _LIBCPP_ELAST needed on Haiku
 #elif defined(_LIBCPP_MSVCRT_LIKE)
 #define _LIBCPP_ELAST (_sys_nerr - 1)
 #else
diff --git a/src/locale.cpp b/src/locale.cpp
index a0209d0ce8..0e5b8a8e37 100644
--- a/src/locale.cpp
+++ b/src/locale.cpp
@@ -1150,6 +1150,8 @@ ctype<char>::classic_table()  _NOEXCEPT
     return _ctype_ + 1;
 #elif defined(_AIX)
     return (const unsigned int *)__lc_ctype_ptr->obj->mask;
+#elif defined(__HAIKU__)
+    return __ctype_b;
 #else
     // Platform not supported: abort so the person doing the port knows what to
     // fix
-- 
2.35.0

