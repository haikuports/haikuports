From c389388ad1b140f47c18951c9afe2e4b72ca6325 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Sun, 14 Apr 2019 17:27:45 +1000
Subject: Add Haiku MediaKit support


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3986ba3..61f6e5e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -93,6 +93,7 @@ option ( enable-dsound "compile DirectSound support (if it is available)" on )
 option ( enable-wasapi "compile Windows WASAPI support (if it is available)" on )
 option ( enable-waveout "compile Windows WaveOut support (if it is available)" on )
 option ( enable-winmidi "compile Windows MIDI support (if it is available)" on )
+option ( enable-haiku "compile Haiku MediaKit audio support (if it is available)" on )
 option ( enable-sdl2 "compile SDL2 audio support (if it is available)" on )
 option ( enable-pulseaudio "compile PulseAudio support (if it is available)" on )
 option ( enable-pipewire "compile PipeWire support (if it is available)" on )
@@ -188,8 +189,10 @@ endif ()
 include ( CMakePrintHelpers ) # for cmake_print_properties() and cmake_print_variables() 
 include ( TestInline )
 include ( TestVLA )
+if ( NOT HAIKU )
 include ( TestBigEndian )
 test_big_endian ( WORDS_BIGENDIAN )
+endif ( NOT HAIKU )
 
 unset ( LIBFLUID_CPPFLAGS CACHE )
 unset ( LIBFLUID_LIBS CACHE )
@@ -251,6 +254,11 @@ if ( CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES "Clang" OR CMAKE_C_C
   endif (CMAKE_C_COMPILER_ID STREQUAL "Intel" )
 endif ( CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES "Clang" OR CMAKE_C_COMPILER_ID STREQUAL "Intel" )
 
+# Haiku
+if ( HAIKU )
+set ( CMAKE_CXX_FLAGS "-fpermissive")
+endif ( HAIKU )
+
 # Windows
 unset ( WINDOWS_LIBS CACHE )
 unset ( DSOUND_SUPPORT CACHE )
@@ -384,6 +392,12 @@ if ( CMAKE_SYSTEM MATCHES "SunOS" )
   set ( LIBFLUID_LIBS "${LIBFLUID_LIBS};nsl;socket" )
 endif ( CMAKE_SYSTEM MATCHES "SunOS" )
 
+# Haiku
+if ( CMAKE_SYSTEM MATCHES "Haiku" )
+  set ( FLUID_LIBS "${FLUID_LIBS};network;bsd;be;media" )
+  set ( LIBFLUID_LIBS "${LIBFLUID_LIBS};network;bsd;be;media" )
+endif ( CMAKE_SYSTEM MATCHES "Haiku" )
+
 # Apple Mac OSX
 unset ( COREAUDIO_SUPPORT CACHE )
 unset ( COREAUDIO_LIBS CACHE )
@@ -697,6 +711,11 @@ if ( enable-readline )
   endif ( Readline_FOUND )
 endif ( enable-readline )
 
+unset ( HAIKU_SUPPORT CACHE )
+if ( enable-haiku )
+  set ( HAIKU_SUPPORT 1 )
+endif ( enable-haiku )
+
 unset ( AUFILE_SUPPORT CACHE )
 if ( enable-aufile )
   set ( AUFILE_SUPPORT 1 )
diff --git a/cmake_admin/report.cmake b/cmake_admin/report.cmake
index 882b8d6..0cef968 100644
--- a/cmake_admin/report.cmake
+++ b/cmake_admin/report.cmake
@@ -147,6 +147,12 @@ else ( DBUS_SUPPORT )
   set ( MISC_REPORT "${MISC_REPORT}  D-Bus:                 no\n" )
 endif ( DBUS_SUPPORT )
 
+if ( HAIKU_SUPPORT )
+  message ( "Haiku MediaKit support: yes" )
+else ( HAIKU_SUPPORT )
+  message ( "Haiku MediaKit support: no" )
+endif ( HAIKU_SUPPORT )
+
 if ( LADSPA_SUPPORT )
   set ( MISC_REPORT "${MISC_REPORT}  LADSPA support:        yes\n" )
 else ( LADSPA_SUPPORT )
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 181b8ae..0e46c12 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -73,6 +73,10 @@ if ( SDL2_SUPPORT )
   set ( fluid_sdl2_SOURCES drivers/fluid_sdl2.c )
 endif ( SDL2_SUPPORT )
 
+if ( HAIKU_SUPPORT )
+  set ( fluid_haiku_SOURCES drivers/fluid_haiku.cpp )
+endif ( HAIKU_SUPPORT )
+
 if ( OSS_SUPPORT )
   set ( fluid_oss_SOURCES drivers/fluid_oss.c )
 endif ( OSS_SUPPORT )
@@ -248,6 +252,7 @@ add_library ( libfluidsynth-OBJ OBJECT
     ${fluid_wasapi_SOURCES}
     ${fluid_waveout_SOURCES}
     ${fluid_winmidi_SOURCES}
+    ${fluid_haiku_SOURCES}
     ${fluid_sdl2_SOURCES}
     ${fluid_libinstpatch_SOURCES}
     ${libfluidsynth_SOURCES}
diff --git a/src/config.cmake b/src/config.cmake
index 436add7..4a8829d 100644
--- a/src/config.cmake
+++ b/src/config.cmake
@@ -208,6 +208,9 @@
 /* Define to enable SDL2 audio driver */
 #cmakedefine SDL2_SUPPORT @SDL2_SUPPORT@
 
+/* Define to enable Haiku MediaKit audio driver */
+#cmakedefine HAIKU_SUPPORT @HAIKU_SUPPORT@
+
 /* Define to 1 if you have the ANSI C header files. */
 #cmakedefine STDC_HEADERS @STDC_HEADERS@
 
diff --git a/src/drivers/fluid_adriver.c b/src/drivers/fluid_adriver.c
index e642ca5..8b0996d 100644
--- a/src/drivers/fluid_adriver.c
+++ b/src/drivers/fluid_adriver.c
@@ -110,6 +110,16 @@ static const fluid_audriver_definition_t fluid_audio_drivers[] =
     },
 #endif
 
+#if HAIKU_SUPPORT
+    {
+        "mediakit",
+        new_fluid_haiku_audio_driver,
+        NULL,
+        delete_fluid_haiku_audio_driver,
+        fluid_haiku_audio_driver_settings
+    },
+#endif
+
 #if COREAUDIO_SUPPORT
     {
         "coreaudio",
diff --git a/src/drivers/fluid_adriver.h b/src/drivers/fluid_adriver.h
index 8517f33..ce430cb 100644
--- a/src/drivers/fluid_adriver.h
+++ b/src/drivers/fluid_adriver.h
@@ -61,6 +61,13 @@ void delete_fluid_alsa_audio_driver(fluid_audio_driver_t *p);
 void fluid_alsa_audio_driver_settings(fluid_settings_t *settings);
 #endif
 
+#if HAIKU_SUPPORT
+fluid_audio_driver_t *new_fluid_haiku_audio_driver(fluid_settings_t *settings,
+        fluid_synth_t *synth);
+void delete_fluid_haiku_audio_driver(fluid_audio_driver_t *p);
+void fluid_haiku_audio_driver_settings(fluid_settings_t *settings);
+#endif
+
 #if OSS_SUPPORT
 fluid_audio_driver_t *new_fluid_oss_audio_driver(fluid_settings_t *settings,
         fluid_synth_t *synth);
diff --git a/src/drivers/fluid_haiku.cpp b/src/drivers/fluid_haiku.cpp
new file mode 100644
index 0000000..4d86529
--- /dev/null
+++ b/src/drivers/fluid_haiku.cpp
@@ -0,0 +1,140 @@
+/* Haiku MediaKit Driver for FluidSynth
+ *
+ * Copyright (C) 2019  Gerasim Troeglazov
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public License
+ * as published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA
+ */
+
+
+#include <MediaKit.h>
+#include <SupportKit.h>
+
+extern "C" {
+#include "fluid_synth.h"
+#include "fluid_adriver.h"
+#include "fluid_settings.h"
+}
+
+typedef struct
+{
+    fluid_audio_driver_t driver;
+
+    fluid_synth_t *synth;
+    fluid_audio_callback_t write_ptr;
+
+    int frame_size;
+	
+	BSoundPlayer *m_player;
+
+} fluid_haiku_audio_driver_t;
+
+
+static void playerProc(void *cookie, void *buffer, size_t len, const media_raw_audio_format &format)
+{
+    fluid_haiku_audio_driver_t *dev = (fluid_haiku_audio_driver_t *)cookie;
+    len /= dev->frame_size;
+    dev->write_ptr(dev->synth, len, buffer, 0, 2, buffer, 1, 2);
+}
+
+void fluid_haiku_audio_driver_settings(fluid_settings_t *settings)
+{
+    fluid_settings_register_str(settings, "audio.haiku.device", "default", 0);
+    fluid_settings_add_option(settings, "audio.haiku.device", "default");
+}
+
+fluid_audio_driver_t *
+new_fluid_haiku_audio_driver(fluid_settings_t *settings, fluid_synth_t *synth)
+{
+    fluid_haiku_audio_driver_t *dev = NULL;
+    fluid_audio_callback_t write_ptr;
+    
+    double sample_rate;
+    int period_size;
+    int periods;
+    int sample_size;
+    
+    char *device;
+    const char *dev_name;
+
+    fluid_settings_getnum(settings, "synth.sample-rate", &sample_rate);
+    fluid_settings_getint(settings, "audio.periods", &periods);
+    fluid_settings_getint(settings, "audio.period-size", &period_size);    
+
+    if(period_size < 1024) {
+        period_size = 1024;
+    } else {
+        if((period_size & (period_size - 1)) != 0) {
+            FLUID_LOG(FLUID_ERR, "\"audio.period-size\" must be a power of 2");
+            return NULL;
+        }
+    }
+
+	if(fluid_settings_str_equal(settings, "audio.sample-format", "16bits"))
+    {
+        FLUID_LOG(FLUID_DBG, "Selected 16 bit sample format");
+        sample_size = sizeof(short);
+        write_ptr   = fluid_synth_write_s16;
+    } else {
+        FLUID_LOG(FLUID_ERR, "Unhandled sample format");
+        return NULL;
+    }
+
+	dev = FLUID_NEW(fluid_haiku_audio_driver_t);
+	if(dev == NULL) {
+		FLUID_LOG(FLUID_ERR, "Out of memory");
+		return NULL;
+	}
+	FLUID_MEMSET(dev, 0, sizeof(fluid_haiku_audio_driver_t));
+
+    dev->synth = synth;
+    dev->frame_size = 2 * sample_size;
+	dev->write_ptr = write_ptr;
+	
+	media_raw_audio_format mediaKitFormat = {
+		(float)sample_rate,
+		(uint32)2,
+		media_raw_audio_format::B_AUDIO_SHORT,
+		B_MEDIA_LITTLE_ENDIAN,
+		(uint32)periods * period_size * dev->frame_size
+	};
+	
+	dev->m_player = new BSoundPlayer(&mediaKitFormat, "FluidSynth", playerProc, NULL, (void*)dev);
+
+	if(dev->m_player->InitCheck() != B_OK) {
+		delete dev->m_player;
+		dev->m_player = NULL;
+	    delete_fluid_haiku_audio_driver(&dev->driver);
+    	return NULL;
+	}
+	
+	dev->m_player->SetHasData(true);
+	dev->m_player->Start();
+
+	return (fluid_audio_driver_t *) dev;
+}
+
+
+void delete_fluid_haiku_audio_driver(fluid_audio_driver_t *d)
+{
+    fluid_haiku_audio_driver_t *dev = (fluid_haiku_audio_driver_t *) d;
+	if (dev->m_player != NULL) {
+		dev->m_player->SetHasData(false);
+		dev->m_player->Stop();
+		delete dev->m_player;
+		dev->m_player = NULL;
+	}
+	FLUID_FREE(dev);
+}
diff --git a/src/synth/fluid_synth.c b/src/synth/fluid_synth.c
index 59acd49..6df29d6 100644
--- a/src/synth/fluid_synth.c
+++ b/src/synth/fluid_synth.c
@@ -27,6 +27,10 @@
 #include "fluid_defsfont.h"
 #include "fluid_instpatch.h"
 
+#ifdef __HAIKU__
+#include <FindDirectory.h>
+#endif
+
 #ifdef TRAP_ON_FPE
 #define _GNU_SOURCE
 #include <fenv.h>
@@ -217,8 +221,25 @@ void fluid_synth_settings(fluid_settings_t *settings)
     fluid_settings_register_int(settings, "synth.lock-memory", 1, 0, 1, FLUID_HINT_TOGGLED);
     fluid_settings_register_str(settings, "midi.portname", "", 0);
 
+#ifdef __HAIKU__
+	char midiSettings[PATH_MAX] = "";
+	if (find_directory(B_USER_SETTINGS_DIRECTORY, -1, false, midiSettings, sizeof(midiSettings)) == B_OK) {
+		strcat(midiSettings, "/Media/midi_settings");
+		if( access( midiSettings, F_OK ) != -1 ) {
+			FILE *inFile = fopen(midiSettings, "rt");
+			if (inFile) {
+				char sf2file[PATH_MAX];
+				if (fscanf(inFile, "# Midi\n\tsoundfont \"%[^\"]\"", sf2file)) {
+					fluid_settings_register_str(settings, "synth.default-soundfont", sf2file, 0);
+				}
+				fclose(inFile);
+			}
+		}
+	}
+#else
 #ifdef DEFAULT_SOUNDFONT
     fluid_settings_register_str(settings, "synth.default-soundfont", DEFAULT_SOUNDFONT, 0);
+#endif
 #endif
 
     fluid_settings_register_int(settings, "synth.polyphony", 256, 1, 65535, 0);
diff --git a/src/utils/fluid_sys.h b/src/utils/fluid_sys.h
index cefff4a..e4c6862 100644
--- a/src/utils/fluid_sys.h
+++ b/src/utils/fluid_sys.h
@@ -727,7 +727,7 @@ enum
     sample data.
  */
 
-#if defined(HAVE_SYS_MMAN_H) && !defined(__OS2__)
+#if defined(HAVE_SYS_MMAN_H) && !defined(__OS2__) && !defined(__HAIKU__)
 #define fluid_mlock(_p,_n)      mlock(_p, _n)
 #define fluid_munlock(_p,_n)    munlock(_p,_n)
 #else
-- 
2.45.2


From e608d1b08e286e23dea9a7747396eb2537915684 Mon Sep 17 00:00:00 2001
From: Cacodemon345 <wahil1976@outlook.com>
Date: Thu, 17 Mar 2022 14:08:23 +0600
Subject: Get rid of excessive realtime audio output latency


diff --git a/src/drivers/fluid_haiku.cpp b/src/drivers/fluid_haiku.cpp
index 4d86529..e68653f 100644
--- a/src/drivers/fluid_haiku.cpp
+++ b/src/drivers/fluid_haiku.cpp
@@ -73,16 +73,13 @@ new_fluid_haiku_audio_driver(fluid_settings_t *settings, fluid_synth_t *synth)
     fluid_settings_getint(settings, "audio.periods", &periods);
     fluid_settings_getint(settings, "audio.period-size", &period_size);    
 
-    if(period_size < 1024) {
-        period_size = 1024;
-    } else {
-        if((period_size & (period_size - 1)) != 0) {
-            FLUID_LOG(FLUID_ERR, "\"audio.period-size\" must be a power of 2");
-            return NULL;
-        }
+    if(fluid_settings_str_equal(settings, "audio.sample-format", "float"))
+    {
+        FLUID_LOG(FLUID_DBG, "Selected 32 bit sample format");
+        sample_size = sizeof(float);
+        write_ptr   = fluid_synth_write_float;
     }
-
-	if(fluid_settings_str_equal(settings, "audio.sample-format", "16bits"))
+   else if(fluid_settings_str_equal(settings, "audio.sample-format", "16bits"))
     {
         FLUID_LOG(FLUID_DBG, "Selected 16 bit sample format");
         sample_size = sizeof(short);
@@ -106,7 +103,7 @@ new_fluid_haiku_audio_driver(fluid_settings_t *settings, fluid_synth_t *synth)
 	media_raw_audio_format mediaKitFormat = {
 		(float)sample_rate,
 		(uint32)2,
-		media_raw_audio_format::B_AUDIO_SHORT,
+       sample_size == sizeof(float) ? media_raw_audio_format::B_AUDIO_FLOAT : media_raw_audio_format::B_AUDIO_SHORT,
 		B_MEDIA_LITTLE_ENDIAN,
 		(uint32)periods * period_size * dev->frame_size
 	};
-- 
2.45.2


From f119f8e6da0d4dc4531caa17682b397ac2fc2dc3 Mon Sep 17 00:00:00 2001
From: Cacodemon345 <wahil1976@outlook.com>
Date: Thu, 17 Mar 2022 14:09:10 +0600
Subject: Add Haiku MidiKit2 MIDI backend


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 61f6e5e..db2ad4d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -94,6 +94,7 @@ option ( enable-wasapi "compile Windows WASAPI support (if it is available)" on
 option ( enable-waveout "compile Windows WaveOut support (if it is available)" on )
 option ( enable-winmidi "compile Windows MIDI support (if it is available)" on )
 option ( enable-haiku "compile Haiku MediaKit audio support (if it is available)" on )
+option ( enable-midikit2 "compile Haiku MidiKit2 MIDI support (if it is available)" on )
 option ( enable-sdl2 "compile SDL2 audio support (if it is available)" on )
 option ( enable-pulseaudio "compile PulseAudio support (if it is available)" on )
 option ( enable-pipewire "compile PipeWire support (if it is available)" on )
@@ -396,6 +397,9 @@ endif ( CMAKE_SYSTEM MATCHES "SunOS" )
 if ( CMAKE_SYSTEM MATCHES "Haiku" )
   set ( FLUID_LIBS "${FLUID_LIBS};network;bsd;be;media" )
   set ( LIBFLUID_LIBS "${LIBFLUID_LIBS};network;bsd;be;media" )
+  if ( enable-midikit2 )
+    set( LIBFLUID_LIBS "midi2" ${LIBFLUID_LIBS} )
+  endif ( enable-midikit2 )
 endif ( CMAKE_SYSTEM MATCHES "Haiku" )
 
 # Apple Mac OSX
@@ -712,10 +716,15 @@ if ( enable-readline )
 endif ( enable-readline )
 
 unset ( HAIKU_SUPPORT CACHE )
+unset ( MIDIKIT2_SUPPORT CACHE )
 if ( enable-haiku )
   set ( HAIKU_SUPPORT 1 )
 endif ( enable-haiku )
 
+if ( enable-midikit2 )
+  set ( MIDIKIT2_SUPPORT 1 )
+endif ( enable-midikit2 )
+
 unset ( AUFILE_SUPPORT CACHE )
 if ( enable-aufile )
   set ( AUFILE_SUPPORT 1 )
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 0e46c12..e5015bd 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -77,6 +77,10 @@ if ( HAIKU_SUPPORT )
   set ( fluid_haiku_SOURCES drivers/fluid_haiku.cpp )
 endif ( HAIKU_SUPPORT )
 
+if ( MIDIKIT2_SUPPORT )
+  set ( fluid_midikit2_SOURCES drivers/fluid_midikit2.cpp )
+endif ( MIDIKIT2_SUPPORT )
+
 if ( OSS_SUPPORT )
   set ( fluid_oss_SOURCES drivers/fluid_oss.c )
 endif ( OSS_SUPPORT )
@@ -253,6 +257,7 @@ add_library ( libfluidsynth-OBJ OBJECT
     ${fluid_waveout_SOURCES}
     ${fluid_winmidi_SOURCES}
     ${fluid_haiku_SOURCES}
+    ${fluid_midikit2_SOURCES}
     ${fluid_sdl2_SOURCES}
     ${fluid_libinstpatch_SOURCES}
     ${libfluidsynth_SOURCES}
diff --git a/src/config.cmake b/src/config.cmake
index 4a8829d..45614f3 100644
--- a/src/config.cmake
+++ b/src/config.cmake
@@ -211,6 +211,9 @@
 /* Define to enable Haiku MediaKit audio driver */
 #cmakedefine HAIKU_SUPPORT @HAIKU_SUPPORT@
 
+/* Define to enable Haiku MidiKit2 MIDI driver */
+#cmakedefine MIDIKIT2_SUPPORT @MIDIKIT2_SUPPORT@
+
 /* Define to 1 if you have the ANSI C header files. */
 #cmakedefine STDC_HEADERS @STDC_HEADERS@
 
diff --git a/src/drivers/fluid_mdriver.c b/src/drivers/fluid_mdriver.c
index 973aef5..33b07eb 100644
--- a/src/drivers/fluid_mdriver.c
+++ b/src/drivers/fluid_mdriver.c
@@ -84,6 +84,14 @@ static const fluid_mdriver_definition_t fluid_midi_drivers[] =
         NULL
     },
 #endif
+#if MIDIKIT2_SUPPORT
+    {
+        "midikit2",
+        new_fluid_midikit2_driver,
+        delete_fluid_midikit2_driver,
+        fluid_midikit2_driver_settings
+    },
+#endif
 #if COREMIDI_SUPPORT
     {
         "coremidi",
diff --git a/src/drivers/fluid_mdriver.h b/src/drivers/fluid_mdriver.h
index 76b8b7b..7a2d701 100644
--- a/src/drivers/fluid_mdriver.h
+++ b/src/drivers/fluid_mdriver.h
@@ -88,6 +88,15 @@ fluid_midi_driver_t *new_fluid_midishare_midi_driver(fluid_settings_t *settings,
 void delete_fluid_midishare_midi_driver(fluid_midi_driver_t *p);
 #endif
 
+/* definitions for the MidiKit2 driver */
+#if MIDIKIT2_SUPPORT
+fluid_midi_driver_t *new_fluid_midikit2_driver(fluid_settings_t *settings,
+        handle_midi_event_func_t handler,
+        void *event_handler_data);
+void delete_fluid_midikit2_driver(fluid_midi_driver_t *p);
+void fluid_midikit2_driver_settings(fluid_settings_t *settings);
+#endif
+
 /* definitions for the CoreMidi driver */
 #if COREMIDI_SUPPORT
 fluid_midi_driver_t *new_fluid_coremidi_driver(fluid_settings_t *settings,
diff --git a/src/drivers/fluid_midikit2.cpp b/src/drivers/fluid_midikit2.cpp
new file mode 100644
index 0000000..c65ab47
--- /dev/null
+++ b/src/drivers/fluid_midikit2.cpp
@@ -0,0 +1,162 @@
+/* Haiku MidiKit2 Driver for FluidSynth
+ *
+ * Copyright (C) 2022  Cacodemon345
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public License
+ * as published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA
+ */
+
+/* Parts of code taken from the CoreMIDI driver. */
+#include <type_traits>
+
+extern "C" {
+#include "fluid_midi.h"
+#include "fluid_mdriver.h"
+#include "fluid_settings.h"
+}
+
+#include <MidiKit.h>
+#include <midi2/MidiRoster.h>
+#include <midi2/MidiConsumer.h>
+#include <midi2/MidiProducer.h>
+#include <SupportKit.h>
+
+typedef struct
+{
+    fluid_midi_driver_t driver;
+    fluid_midi_parser_t* parser;
+
+    BMidiLocalConsumer *m_consumer;
+    int autoconn_inputs;
+} fluid_midikit2_driver_t;
+
+class fluid_midikit2_input : public BMidiLocalConsumer
+{
+    void Data(uchar *data, size_t length, bool atomic, bigtime_t time) override
+    {
+        if (atomic && callback)
+        {
+            fluid_midi_event_t *event = NULL;
+            snooze_until(time, B_SYSTEM_TIMEBASE);
+            for (int i = 0; i < length; i++)
+            {
+                event = fluid_midi_parser_parse(callback->parser, data[i]);
+            }
+            if (event)
+            {
+                callback->driver.handler(callback->driver.data, event);
+            }
+        }
+    }
+public:
+    fluid_midikit2_driver_t* callback;
+};
+
+void fluid_midikit2_driver_settings(fluid_settings_t *settings)
+{
+    fluid_settings_register_str(settings, "midi.midikit2.id", "pid", 0);
+}
+
+static void fluid_coremidi_autoconnect(fluid_midikit2_driver_t *dev)
+{
+    int32 id = 0;
+    BMidiProducer* producer = NULL;
+    while ((producer = BMidiRoster::NextProducer(&id)) != NULL)
+    {
+        producer->Connect(dev->m_consumer);
+        producer->Release();
+    }
+}
+
+fluid_midi_driver_t*
+new_fluid_midikit2_driver(fluid_settings_t *settings, handle_midi_event_func_t handler, void *data)
+{
+    fluid_midikit2_driver_t* driver = NULL;
+    char* id = NULL;
+    char clientid[128];
+
+    memset(clientid, 0, sizeof(clientid));
+    driver = FLUID_MALLOC(sizeof(fluid_midikit2_driver_t));
+
+    if(driver == NULL)
+    {
+        FLUID_LOG(FLUID_ERR, "Out of memory");
+        return NULL;
+    }
+
+    driver->driver.handler = handler;
+    driver->driver.data = data;
+
+    driver->parser = new_fluid_midi_parser();
+
+    if(driver->parser == NULL)
+    {
+        FLUID_LOG(FLUID_ERR, "Out of memory");
+        FLUID_FREE(driver);
+        return NULL;
+    }
+
+    fluid_settings_dupstr(settings, "midi.midikit2.id", &id);
+    if(id != NULL)
+    {
+        if(FLUID_STRCMP(id, "pid") == 0)
+        {
+            FLUID_SNPRINTF(clientid, sizeof(clientid), "FluidSynth virtual port (%d)", getpid());
+        }
+        else
+        {
+            FLUID_SNPRINTF(clientid, sizeof(clientid), "FluidSynth virtual port (%s)", id);
+        }
+
+        FLUID_FREE(id);   /* -- free id string */
+    }
+    else strncpy(clientid, "FluidSynth virtual port", sizeof(clientid));
+
+    driver->m_consumer = new fluid_midikit2_input;
+    if(!driver->m_consumer->IsValid())
+    {
+        FLUID_LOG(FLUID_ERR, "Failed to create the MIDI consumer");
+        driver->m_consumer->Release();
+        delete_fluid_midi_parser(driver->parser);
+        FLUID_FREE(driver);
+        return NULL;
+    }
+
+    ((fluid_midikit2_input*)driver->m_consumer)->callback = driver;
+    driver->m_consumer->SetName(clientid);
+    driver->m_consumer->Register();
+    fluid_settings_getint(settings, "midi.autoconnect", &driver->autoconn_inputs);
+
+    if (driver->autoconn_inputs)
+    {
+        fluid_coremidi_autoconnect(driver);
+    }
+
+    return (fluid_midi_driver_t *)driver;
+}
+
+void
+delete_fluid_midikit2_driver(fluid_midi_driver_t *p)
+{
+    fluid_return_if_fail(p != NULL);
+    if (p)
+    {
+        fluid_midikit2_driver_t* driver = (fluid_midikit2_driver_t*)p;
+        driver->m_consumer->Unregister();
+        driver->m_consumer->Release();
+        delete_fluid_midi_parser(driver->parser);
+        FLUID_FREE(driver);
+    }
+}
-- 
2.45.2


From 133b54b4bd6fcaf36516777398b74e7bf93edad1 Mon Sep 17 00:00:00 2001
From: Schrijvers Luc <begasus@gmail.com>
Date: Mon, 12 Aug 2024 19:01:02 +0200
Subject: set(CMAKE_CXX_STANDARD 11)


diff --git a/CMakeLists.txt b/CMakeLists.txt
index db2ad4d..f54cfc6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -127,7 +127,7 @@ endif ( CMAKE_SYSTEM MATCHES "OS2" )
 set(CMAKE_C_STANDARD 90)
 
 # the default C++ standard to use for all targets
-set(CMAKE_CXX_STANDARD 98)
+set(CMAKE_CXX_STANDARD 11)
 
 # whether to use gnu extensions
 set(CMAKE_C_EXTENSIONS ON)
-- 
2.45.2


From 1e3829ef9a5fcdecdbf6dbf7e993c45e5b62f8b7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Joachim=20Mairb=C3=B6ck?= <j.mairboeck@gmail.com>
Date: Mon, 12 Aug 2024 21:45:30 +0200
Subject: move fluid_adsr_env_calc implementation to the source file from the
 header

It can't be compiled as C++ because it uses C only features (incrementing enums),
however that header is included in the Haiku driver, which uses C++.

diff --git a/src/rvoice/fluid_adsr_env.c b/src/rvoice/fluid_adsr_env.c
index 00bdd40..83bf4b6 100644
--- a/src/rvoice/fluid_adsr_env.c
+++ b/src/rvoice/fluid_adsr_env.c
@@ -20,6 +20,52 @@
 
 #include "fluid_adsr_env.h"
 
+void
+fluid_adsr_env_calc(fluid_adsr_env_t *env)
+{
+    fluid_env_data_t *env_data;
+    fluid_real_t x;
+
+    env_data = &env->data[env->section];
+
+    /* skip to the next section of the envelope if necessary */
+    while(env->count >= env_data->count)
+    {
+        // If we're switching envelope stages from decay to sustain, force the value to be the end value of the previous stage
+        // Hmm, should this only apply to volenv? It was so before refactoring, so keep it for now. [DH]
+        // No, must apply to both, otherwise some voices may sound detuned. [TM] (https://github.com/FluidSynth/fluidsynth/issues/1059)
+        if(env->section == FLUID_VOICE_ENVDECAY)
+        {
+            env->val = env_data->min * env_data->coeff;
+        }
+
+        env_data = &env->data[++env->section];
+        env->count = 0;
+    }
+
+    /* calculate the envelope value and check for valid range */
+    x = env_data->coeff * env->val + env_data->increment;
+
+    if(x < env_data->min)
+    {
+        x = env_data->min;
+        env->section++;
+        env->count = 0;
+    }
+    else if(x > env_data->max)
+    {
+        x = env_data->max;
+        env->section++;
+        env->count = 0;
+    }
+    else
+    {
+        env->count++;
+    }
+
+    env->val = x;
+}
+
 DECLARE_FLUID_RVOICE_FUNCTION(fluid_adsr_env_set_data)
 {
     fluid_adsr_env_t *env = obj;
diff --git a/src/rvoice/fluid_adsr_env.h b/src/rvoice/fluid_adsr_env.h
index 5e99c6b..9a664a9 100644
--- a/src/rvoice/fluid_adsr_env.h
+++ b/src/rvoice/fluid_adsr_env.h
@@ -63,51 +63,8 @@ struct _fluid_adsr_env_t
 
 /* For performance, all functions are inlined */
 
-static FLUID_INLINE void
-fluid_adsr_env_calc(fluid_adsr_env_t *env)
-{
-    fluid_env_data_t *env_data;
-    fluid_real_t x;
-
-    env_data = &env->data[env->section];
-
-    /* skip to the next section of the envelope if necessary */
-    while(env->count >= env_data->count)
-    {
-        // If we're switching envelope stages from decay to sustain, force the value to be the end value of the previous stage
-        // Hmm, should this only apply to volenv? It was so before refactoring, so keep it for now. [DH]
-        // No, must apply to both, otherwise some voices may sound detuned. [TM] (https://github.com/FluidSynth/fluidsynth/issues/1059)
-        if(env->section == FLUID_VOICE_ENVDECAY)
-        {
-            env->val = env_data->min * env_data->coeff;
-        }
-
-        env_data = &env->data[++env->section];
-        env->count = 0;
-    }
-
-    /* calculate the envelope value and check for valid range */
-    x = env_data->coeff * env->val + env_data->increment;
-
-    if(x < env_data->min)
-    {
-        x = env_data->min;
-        env->section++;
-        env->count = 0;
-    }
-    else if(x > env_data->max)
-    {
-        x = env_data->max;
-        env->section++;
-        env->count = 0;
-    }
-    else
-    {
-        env->count++;
-    }
-
-    env->val = x;
-}
+void
+fluid_adsr_env_calc(fluid_adsr_env_t *env);
 
 /* This one cannot be inlined since it is referenced in
    the event queue */
-- 
2.45.2

