From 4260b97c697d780999812ae4fb19f2c6e51fe0b7 Mon Sep 17 00:00:00 2001
From: Ian McInerney <ian.s.mcinerney@ieee.org>
Date: Fri, 8 Apr 2022 01:08:12 +0100
Subject: Remove custom languages in wx 3.1.6 and above

Basque was added as a language with identifier "eu" into wx 3.1.6, so
there is no more need to provide custom languages. Additionally, this
struct changed formatting in 3.1.6, meaning it threw a compile error
when included (so it would have to be fixed if still needed).

diff --git a/src/AudacityApp.cpp b/src/AudacityApp.cpp
index 13b50e8..7d45fd2 100644
--- a/src/AudacityApp.cpp
+++ b/src/AudacityApp.cpp
@@ -991,12 +991,10 @@ void AudacityApp::OnTimer(wxTimerEvent& WXUNUSED(event))
 #define WL(lang,sublang)
 #endif
 
-#if wxCHECK_VERSION(3, 0, 1)
+#if wxCHECK_VERSION(3, 0, 1) && !wxCHECK_VERSION(3, 1, 6)
 wxLanguageInfo userLangs[] =
 {
-   // Bosnian is defined in wxWidgets already
-//   { wxLANGUAGE_USER_DEFINED, wxT("bs"), WL(0, SUBLANG_DEFAULT) wxT("Bosnian"), wxLayout_LeftToRight },
-
+   // Included upstream in version 3.1.6
    { wxLANGUAGE_USER_DEFINED, wxT("eu"), WL(0, SUBLANG_DEFAULT) wxT("Basque"), wxLayout_LeftToRight },
 };
 #endif
@@ -1317,7 +1315,7 @@ bool AudacityApp::OnInit()
    //
    // TODO:  The whole Language initialization really need to be reworked.
    //        It's all over the place.
-#if wxCHECK_VERSION(3, 0, 1)
+#if wxCHECK_VERSION(3, 0, 1) && !wxCHECK_VERSION(3, 1, 6)
    for (size_t i = 0, cnt = WXSIZEOF(userLangs); i < cnt; i++)
    {
       wxLocale::AddLanguage(userLangs[i]);
-- 
2.37.3


From 1ba608cd73bc261de59e3d61fee64cdd8f7b0a0a Mon Sep 17 00:00:00 2001
From: Ian McInerney <ian.s.mcinerney@ieee.org>
Date: Fri, 8 Apr 2022 01:27:52 +0100
Subject: Call the proper wxBitmap constructor for XPM data

wxBitmap back to at least 3.0.0 did not have a constructor for an XPM
image that took a size parameter, it would only take the XPM data
itself.

I don't know how this compiled until now, but it doesn't anymore when
the size is included and built against wx 3.1.6 in Fedora.

diff --git a/src/MixerBoard.cpp b/src/MixerBoard.cpp
index 0f3c67b..b5b9e6b 100644
--- a/src/MixerBoard.cpp
+++ b/src/MixerBoard.cpp
@@ -1314,7 +1314,7 @@ void MixerBoard::LoadMusicalInstruments()
    wxMemoryDC dc;
 
    for (const auto &data : table) {
-      auto bmp = std::make_unique<wxBitmap>(data.bitmap,24);
+      auto bmp = std::make_unique<wxBitmap>(data.bitmap);
       dc.SelectObject(*bmp);
       AColor::Bevel(dc, false, bev);
       mMusicalInstruments.push_back(std::make_unique<MusicalInstrument>(
-- 
2.37.3


From 5b158a877e36331823d11ee6306b14f1ce8c2554 Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Mon, 7 Nov 2022 14:27:23 +0100
Subject: nyquist: fix build on Haiku


diff --git a/lib-src/libnyquist/nyquist/xlisp/xlisp.h b/lib-src/libnyquist/nyquist/xlisp/xlisp.h
index 44d52c3..e43f2ce 100644
--- a/lib-src/libnyquist/nyquist/xlisp/xlisp.h
+++ b/lib-src/libnyquist/nyquist/xlisp/xlisp.h
@@ -27,6 +27,10 @@ extern "C" {
 #include <ctype.h>
 #include <setjmp.h>
 
+#ifdef __HAIKU__
+#include <stdint.h>
+#endif
+
 /* NNODES	number of nodes to allocate in each request (1000) */
 /* EDEPTH	evaluation stack depth (2000) */
 /* ADEPTH	argument stack depth (1000) */
@@ -188,6 +192,10 @@ extern long ptrtoabs();
 #endif
 #endif
 
+#ifdef __HAIKU__
+#define XL_LITTLE_ENDIAN
+#endif
+
 /* default important definitions */
 #ifndef NNODES
 #define NNODES		1000
-- 
2.37.3


From e6836c68bfa510ed9ec077b7672ffbd8a4b6729b Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Mon, 7 Nov 2022 14:17:48 +0100
Subject: portmixer: fix build on Haiku


diff --git a/cmake-proxies/cmake-modules/FindOSS.cmake b/cmake-proxies/cmake-modules/FindOSS.cmake
index b6e061a..9c747d0 100644
--- a/cmake-proxies/cmake-modules/FindOSS.cmake
+++ b/cmake-proxies/cmake-modules/FindOSS.cmake
@@ -3,6 +3,10 @@ A module to look for OSS
 ]]
 
 if( NOT OSS_FOUND )
+   find_path(HAIKU_OSS_INCLUDE_DIR "private/audio/soundcard.h"
+      HINTS "/system/develop/headers"
+   )
+
    find_path(LINUX_OSS_INCLUDE_DIR "linux/soundcard.h"
       HINTS "/usr/include" "/usr/local/include"
    )
@@ -15,11 +19,17 @@ if( NOT OSS_FOUND )
       HINTS "/usr/include" "/usr/local/include"
    )
 
+   set( HAVE_HAIKU_SOUNDCARD_H No CACHE BOOL "private/audio/soundcard.h is available" FORCE )
    set( HAVE_SYS_SOUNDCARD_H No CACHE BOOL "sys/soundcard.h is available" FORCE )
    set( HAVE_LINUX_SOUNDCARD_H No CACHE BOOL "linux/soundcard.h is available" FORCE )
    set( HAVE_MACHINE_SOUNDCARD_H No CACHE BOOL "machine/soundcard.h is available" FORCE )
 
-   if( LINUX_OSS_INCLUDE_DIR )
+   if( HAIKU_OSS_INCLUDE_DIR )
+      set( OSS_FOUND True )
+      set( OSS_INCLUDE_DIR ${HAIKU_OSS_INCLUDE_DIR} )
+      set( HAVE_HAIKU_SOUNDCARD_H Yes CACHE BOOL "private/audio/soundcard.h is available" FORCE )
+      list( APPEND OSS_DEFINITIONS HAVE_HAIKU_SOUNDCARD_H=1 )
+   elseif( LINUX_OSS_INCLUDE_DIR )
       set( OSS_FOUND True )
       set( OSS_INCLUDE_DIR ${LINUX_OSS_INCLUDE_DIR} )
       set( HAVE_LINUX_SOUNDCARD_H Yes CACHE BOOL "sys/soundcard.h is available" FORCE )
diff --git a/lib-src/portmixer/src/px_unix_oss.c b/lib-src/portmixer/src/px_unix_oss.c
index 978f27b..eb44dce 100644
--- a/lib-src/portmixer/src/px_unix_oss.c
+++ b/lib-src/portmixer/src/px_unix_oss.c
@@ -46,7 +46,9 @@
 #include <sys/ioctl.h>
 #include <ctype.h>
 
-#if defined(HAVE_SYS_SOUNDCARD_H)
+#if defined(HAVE_HAIKU_SOUNDCARD_H)
+# include <private/audio/soundcard.h>
+#elif defined(HAVE_SYS_SOUNDCARD_H)
 # include <sys/soundcard.h>
 #elif defined(HAVE_LINUX_SOUNDCARD_H)
 # include <linux/soundcard.h>
-- 
2.37.3


From 495fe0214fe2a8f1595b197f990068092e5f45b0 Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Mon, 7 Nov 2022 15:09:44 +0100
Subject: MIDIPlay: fix build on Haiku


diff --git a/src/MIDIPlay.cpp b/src/MIDIPlay.cpp
index 788e431..aba6288 100644
--- a/src/MIDIPlay.cpp
+++ b/src/MIDIPlay.cpp
@@ -486,7 +486,7 @@ static double streamStartTime = 0; // bias system time to small number
 
 static double SystemTime(bool usingAlsa)
 {
-#ifdef __WXGTK__
+#if defined(__WXGTK__) && !defined(__HAIKU__)
    if (usingAlsa) {
       struct timespec now;
       // CLOCK_MONOTONIC_RAW is unaffected by NTP or adj-time
-- 
2.37.3


From 5d6f5d180b7883738fcd29d5ec2cda46fa5cbab6 Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Mon, 7 Nov 2022 15:06:14 +0100
Subject: fix GTK include paths and libs


diff --git a/cmake-proxies/cmake-modules/dependencies/wxwidgets.cmake b/cmake-proxies/cmake-modules/dependencies/wxwidgets.cmake
index 4b35e89..e5a909c 100644
--- a/cmake-proxies/cmake-modules/dependencies/wxwidgets.cmake
+++ b/cmake-proxies/cmake-modules/dependencies/wxwidgets.cmake
@@ -106,5 +106,9 @@ if( NOT CMAKE_SYSTEM_NAME MATCHES "Windows|Darwin" )
 
     pkg_check_modules( GTK REQUIRED IMPORTED_TARGET GLOBAL ${gtk} )
     pkg_check_modules( GLIB REQUIRED IMPORTED_TARGET GLOBAL ${glib} )
+
+    target_include_directories( wxwidgets::wxwidgets INTERFACE ${GTK_INCLUDE_DIRS} )
+    target_link_directories( wxwidgets::wxwidgets INTERFACE ${GTK_LIB_DIR} )
+    target_link_libraries( wxwidgets::wxwidgets INTERFACE ${GTK_LIBRARIES} )
 endif()
 
-- 
2.37.3


From 0ba846266c5b827e648860e6e886507c4b35bf8c Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Mon, 7 Nov 2022 14:33:10 +0100
Subject: adjust install rules for Haiku


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 430ec6e..01b978c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -344,7 +344,7 @@ set( _EXEDIR "${_DEST}" )
 # Setup RPATH handling
 set( CMAKE_BUILD_RPATH "${_DEST}/${_PKGLIB}" )
 set( CMAKE_BUILD_WITH_INSTALL_RPATH FALSE )
-set( CMAKE_INSTALL_RPATH "$ORIGIN/../${_PKGLIB}" )
+set( CMAKE_INSTALL_RPATH "${_PKGLIB}" )
 set( CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE )
 
 # Adjust them for the Mac
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index f6468cd..7378eb3 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1229,6 +1229,8 @@ elseif( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
    set_target_property_all( "Wrapper" RUNTIME_OUTPUT_DIRECTORY "${_EXEDIR}" )
    organize_source( "${WRAPPER_ROOT}" "mac" "${WRAPPER_SOURCES}" )
 
+elseif( CMAKE_SYSTEM_NAME MATCHES "Haiku" )
+   set_target_property_all( ${TARGET} RUNTIME_OUTPUT_DIRECTORY "${_DEST}" )
 else()
    set_target_property_all( ${TARGET} RUNTIME_OUTPUT_DIRECTORY "${_DEST}" )
 
@@ -1368,6 +1370,18 @@ else()
       install( TARGETS ${TARGET}
                DESTINATION "."
                RESOURCE DESTINATION "${_APPDIR}/Resources" )
+   elseif( CMAKE_SYSTEM_NAME MATCHES "Haiku" )
+      install( TARGETS ${TARGET} RUNTIME )
+      install( DIRECTORY "${_DEST}/${_LIBDIR}/"
+               DESTINATION "${_LIBDIR}"
+               USE_SOURCE_PERMISSIONS
+               FILES_MATCHING PATTERN "*.so*" )
+      install( FILES "${topdir}/LICENSE.txt" "${topdir}/README.txt"
+               DESTINATION "${_DATADIR}/doc/${AUDACITY_NAME}" )
+      install( FILES "${_SRCDIR}/audacity.xml"
+               DESTINATION "${_DATADIR}/mime/packages" )
+      install( FILES "${topdir}/presets/EQDefaultCurves.xml"
+               DESTINATION "${_PKGDATA}" )
    else()
       install( TARGETS ${TARGET} RUNTIME )
       install( DIRECTORY "${_DEST}/${_LIBDIR}/"
-- 
2.37.3


From 34335b8df5ee17ceb58267e6e10aadc932624012 Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Thu, 17 Nov 2022 20:54:07 +0100
Subject: Adapt shm to Haiku

This implementation is based on the haikuports patch for postgresql and qt5/qt6

diff --git a/src/AudacityApp.cpp b/src/AudacityApp.cpp
index 7d45fd2..c8f1c02 100644
--- a/src/AudacityApp.cpp
+++ b/src/AudacityApp.cpp
@@ -1923,7 +1923,69 @@ bool AudacityApp::CreateSingleInstanceChecker(const wxString &dir)
 
 #include <sys/ipc.h>
 #include <sys/sem.h>
+
+#ifdef __HAIKU__
+#include <OS.h>
+
+/*
+ * The following code is adapted from:
+ * Haiku System V Shared Memory Emulation
+ *
+ * Copyright (C) 1999-2001, Cyril Velter
+ */
+
+int shmget(key_t key, size_t size, int flags)
+{
+   char areaName[64];
+   sprintf(areaName, "sysv_ipc_shm[%d]", (int)key);
+
+   area_id areaId = find_area(areaName);
+
+   if (areaId != B_NAME_NOT_FOUND) {
+      return areaId;
+   }
+
+   if (flags==0) {
+      return -1;
+   }
+
+   void *address = NULL;
+   areaId = create_area(areaName, &address, B_ANY_ADDRESS,
+      ((size / 4096) + 1) * 4096, B_NO_LOCK,
+      B_READ_AREA | B_WRITE_AREA | B_CLONEABLE_AREA);
+
+   return areaId;
+}
+
+void *shmat(int shmid, const void *shmaddr, int flags)
+{
+   thread_info threadInfo;
+   get_thread_info(find_thread(NULL), &threadInfo);
+
+   team_info teamInfo;
+   get_team_info(threadInfo.team, &teamInfo);
+
+   area_info areaInfo;
+   if (get_area_info(shmid, &areaInfo) != B_OK) {
+      return NULL;
+   }
+
+   void *res;
+
+   if (areaInfo.team == teamInfo.team) {
+      return (void *)areaInfo.address;
+   }
+
+   void *address = areaInfo.address;
+   area_id areaId = clone_area(areaInfo.name, &address, B_ANY_ADDRESS,
+      B_READ_AREA | B_WRITE_AREA, shmid);
+   get_area_info(areaId, &areaInfo);
+
+   return (void *)areaInfo.address;
+}
+#else
 #include <sys/shm.h>
+#endif
 
 // Return true if there are no other instances of Audacity running,
 // false otherwise.
-- 
2.37.3

