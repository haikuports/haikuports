From 96eb16309eed86d5db6f6e7dfcdfaa3fa292ea8d Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Mon, 7 Nov 2022 14:27:23 +0100
Subject: nyquist: fix build on Haiku


diff --git a/lib-src/libnyquist/nyquist/xlisp/xlisp.h b/lib-src/libnyquist/nyquist/xlisp/xlisp.h
index 3134849..8fd29ea 100644
--- a/lib-src/libnyquist/nyquist/xlisp/xlisp.h
+++ b/lib-src/libnyquist/nyquist/xlisp/xlisp.h
@@ -27,6 +27,10 @@ extern "C" {
 #include <ctype.h>
 #include <setjmp.h>
 
+#ifdef __HAIKU__
+#include <stdint.h>
+#endif
+
 /* NNODES	number of nodes to allocate in each request (1000) */
 /* EDEPTH	evaluation stack depth (2000) */
 /* ADEPTH	argument stack depth (1000) */
@@ -197,6 +201,10 @@ extern long ptrtoabs();
 #endif
 #endif
 
+#ifdef __HAIKU__
+#define XL_LITTLE_ENDIAN
+#endif
+
 /* default important definitions */
 #ifndef NNODES
 #define NNODES		1000
-- 
2.37.3


From ecb2791d4cc1c29af8c85e2394a24d9954dcf9f9 Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Mon, 7 Nov 2022 14:17:48 +0100
Subject: portmixer: fix build on Haiku


diff --git a/cmake-proxies/cmake-modules/FindOSS.cmake b/cmake-proxies/cmake-modules/FindOSS.cmake
index b6e061a..9c747d0 100644
--- a/cmake-proxies/cmake-modules/FindOSS.cmake
+++ b/cmake-proxies/cmake-modules/FindOSS.cmake
@@ -3,6 +3,10 @@ A module to look for OSS
 ]]
 
 if( NOT OSS_FOUND )
+   find_path(HAIKU_OSS_INCLUDE_DIR "private/audio/soundcard.h"
+      HINTS "/system/develop/headers"
+   )
+
    find_path(LINUX_OSS_INCLUDE_DIR "linux/soundcard.h"
       HINTS "/usr/include" "/usr/local/include"
    )
@@ -15,11 +19,17 @@ if( NOT OSS_FOUND )
       HINTS "/usr/include" "/usr/local/include"
    )
 
+   set( HAVE_HAIKU_SOUNDCARD_H No CACHE BOOL "private/audio/soundcard.h is available" FORCE )
    set( HAVE_SYS_SOUNDCARD_H No CACHE BOOL "sys/soundcard.h is available" FORCE )
    set( HAVE_LINUX_SOUNDCARD_H No CACHE BOOL "linux/soundcard.h is available" FORCE )
    set( HAVE_MACHINE_SOUNDCARD_H No CACHE BOOL "machine/soundcard.h is available" FORCE )
 
-   if( LINUX_OSS_INCLUDE_DIR )
+   if( HAIKU_OSS_INCLUDE_DIR )
+      set( OSS_FOUND True )
+      set( OSS_INCLUDE_DIR ${HAIKU_OSS_INCLUDE_DIR} )
+      set( HAVE_HAIKU_SOUNDCARD_H Yes CACHE BOOL "private/audio/soundcard.h is available" FORCE )
+      list( APPEND OSS_DEFINITIONS HAVE_HAIKU_SOUNDCARD_H=1 )
+   elseif( LINUX_OSS_INCLUDE_DIR )
       set( OSS_FOUND True )
       set( OSS_INCLUDE_DIR ${LINUX_OSS_INCLUDE_DIR} )
       set( HAVE_LINUX_SOUNDCARD_H Yes CACHE BOOL "sys/soundcard.h is available" FORCE )
diff --git a/lib-src/portmixer/src/px_unix_oss.c b/lib-src/portmixer/src/px_unix_oss.c
index 978f27b..eb44dce 100644
--- a/lib-src/portmixer/src/px_unix_oss.c
+++ b/lib-src/portmixer/src/px_unix_oss.c
@@ -46,7 +46,9 @@
 #include <sys/ioctl.h>
 #include <ctype.h>
 
-#if defined(HAVE_SYS_SOUNDCARD_H)
+#if defined(HAVE_HAIKU_SOUNDCARD_H)
+# include <private/audio/soundcard.h>
+#elif defined(HAVE_SYS_SOUNDCARD_H)
 # include <sys/soundcard.h>
 #elif defined(HAVE_LINUX_SOUNDCARD_H)
 # include <linux/soundcard.h>
-- 
2.37.3


From 91cd8ecd507b087d19799ad3c8dac608847407e9 Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Mon, 7 Nov 2022 15:09:44 +0100
Subject: MIDIPlay: fix build on Haiku


diff --git a/src/MIDIPlay.cpp b/src/MIDIPlay.cpp
index 620bb85..e1ee067 100644
--- a/src/MIDIPlay.cpp
+++ b/src/MIDIPlay.cpp
@@ -486,7 +486,7 @@ static double streamStartTime = 0; // bias system time to small number
 
 static double SystemTime(bool usingAlsa)
 {
-#ifdef __WXGTK__
+#if defined(__WXGTK__) && !defined(__HAIKU__)
    if (usingAlsa) {
       struct timespec now;
       // CLOCK_MONOTONIC_RAW is unaffected by NTP or adj-time
-- 
2.37.3


From 599e51581eba796e3c6c0795f227e50d5bded308 Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Mon, 7 Nov 2022 15:06:14 +0100
Subject: fix GTK include paths and libs


diff --git a/cmake-proxies/cmake-modules/dependencies/wxwidgets.cmake b/cmake-proxies/cmake-modules/dependencies/wxwidgets.cmake
index 4b35e89..e5a909c 100644
--- a/cmake-proxies/cmake-modules/dependencies/wxwidgets.cmake
+++ b/cmake-proxies/cmake-modules/dependencies/wxwidgets.cmake
@@ -106,5 +106,9 @@ if( NOT CMAKE_SYSTEM_NAME MATCHES "Windows|Darwin" )
 
     pkg_check_modules( GTK REQUIRED IMPORTED_TARGET GLOBAL ${gtk} )
     pkg_check_modules( GLIB REQUIRED IMPORTED_TARGET GLOBAL ${glib} )
+
+    target_include_directories( wxwidgets::wxwidgets INTERFACE ${GTK_INCLUDE_DIRS} )
+    target_link_directories( wxwidgets::wxwidgets INTERFACE ${GTK_LIB_DIR} )
+    target_link_libraries( wxwidgets::wxwidgets INTERFACE ${GTK_LIBRARIES} )
 endif()
 
-- 
2.37.3


From 7e99e0da1c25707bf73c44d37836af654a145861 Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Mon, 7 Nov 2022 14:33:10 +0100
Subject: Adjust install rules for Haiku


diff --git a/CMakeLists.txt b/CMakeLists.txt
index faef964..55d5a3d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -400,7 +400,11 @@ endif()
 
 set( _DEST "${_DESTDIR}" )
 set( INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}" )
-set( _LIBDIR "${CMAKE_INSTALL_LIBDIR}" )
+if( CMAKE_SYSTEM_NAME MATCHES "Haiku" )
+   set( _LIBDIR "lib" )
+else()
+   set( _LIBDIR "${CMAKE_INSTALL_LIBDIR}" )
+endif()
 set( _DATADIR "${CMAKE_INSTALL_DATADIR}" )
 set( _PKGLIB "${_LIBDIR}/audacity" )
 set( _PKGDATA "${_DATADIR}/audacity/" )
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index a71cacd..129c33e 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1449,6 +1449,8 @@ elseif( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
          POST_BUILD
       )
    endif()
+elseif( CMAKE_SYSTEM_NAME MATCHES "Haiku" )
+   set_target_property_all( ${TARGET} RUNTIME_OUTPUT_DIRECTORY "${_DEST}" )
 else()
    set_target_properties(
       ${TARGET}
@@ -1652,8 +1654,10 @@ else()
       install( CODE "set( _LIBDIR \"${_LIBDIR}\")" )
       install( SCRIPT "${CMAKE_SOURCE_DIR}/scripts/build/linux/fix_rpath.cmake" )
 
-      install( FILES "${_INTDIR}/audacity.desktop"
-               DESTINATION "${_DATADIR}/applications" )
+      if( NOT CMAKE_SYSTEM_NAME MATCHES "Haiku" )
+         install( FILES "${_INTDIR}/audacity.desktop"
+                  DESTINATION "${_DATADIR}/applications" )
+      endif()
       install( FILES "${topdir}/LICENSE.txt" "${topdir}/README.txt"
                DESTINATION "${_DATADIR}/doc/${AUDACITY_NAME}" )
       install( FILES "${_SRCDIR}/audacity.xml"
-- 
2.37.3


From e58525b35e7960cbc9fe6abac5d2a02a7130207c Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Thu, 17 Nov 2022 20:54:07 +0100
Subject: Use POSIX shared memory

Patch inspired by Tenacity, original author: Avery King <avery98@pm.me>

diff --git a/src/AudacityApp.cpp b/src/AudacityApp.cpp
index 4472ca0..c2133f8 100644
--- a/src/AudacityApp.cpp
+++ b/src/AudacityApp.cpp
@@ -64,6 +64,7 @@ It handles initialization and termination by subclassing wxApp.
 #include <sys/file.h>
 #include <sys/stat.h>
 #include <stdio.h>
+#include <sys/mman.h>
 #endif
 
 #if defined(__WXMSW__)
@@ -1172,6 +1173,7 @@ bool AudacityApp::OSXIsGUIApplication()
 
 AudacityApp::~AudacityApp()
 {
+   shm_unlink("/AudacityShm");
 }
 
 // Some of the many initialization steps
@@ -1939,7 +1941,6 @@ bool AudacityApp::CreateSingleInstanceChecker(const wxString &dir)
 
 #include <sys/ipc.h>
 #include <sys/sem.h>
-#include <sys/shm.h>
 
 // Return true if there are no other instances of Audacity running,
 // false otherwise.
@@ -1962,8 +1963,8 @@ bool AudacityApp::CreateSingleInstanceChecker(const wxString &dir)
 
    // Create and map the shared memory segment where the port number
    // will be stored.
-   int memid = shmget(memkey, sizeof(int), IPC_CREAT | S_IRUSR | S_IWUSR);
-   if (memid == -1)
+   int memfd = shm_open("/AudacityShm", O_CREAT | O_RDWR, S_IRUSR | S_IWUSR);
+   if (memfd == -1)
    {
       AudacityMessageBox(
          XO("Unable to create shared memory segment.\n\n"
@@ -1974,7 +1975,28 @@ bool AudacityApp::CreateSingleInstanceChecker(const wxString &dir)
       return false;
    }
 
-   int *portnum = (int *) shmat(memid, nullptr, 0);
+   if (ftruncate(memfd, sizeof(int)) != 0)
+   {
+      AudacityMessageBox(
+         XO("Unable to initialize shared memory segment.\n\n"
+            "error code=%d : \"%s\".").Format(errno, strerror(errno)),
+         XO("Audacity Startup Failure"),
+         wxOK | wxICON_ERROR);
+
+      return false;
+   }
+
+   int *portnum = (int *) mmap(nullptr, sizeof(int), PROT_READ | PROT_WRITE, MAP_SHARED, memfd, 0);
+   if (portnum == MAP_FAILED)
+   {
+      AudacityMessageBox(
+         XO("Unable to map shared memory segment.\n\n"
+            "error code=%d : \"%s\".").Format(errno, strerror(errno)),
+         XO("Audacity Startup Failure"),
+         wxOK | wxICON_ERROR);
+
+      return false;
+   }
 
    // Create (or return) the SERVER semaphore ID
    int servid = semget(servkey, 1, IPC_CREAT | S_IRUSR | S_IWUSR);
@@ -2117,6 +2139,8 @@ bool AudacityApp::CreateSingleInstanceChecker(const wxString &dir)
          return false;
       }
 
+      munmap(portnum, sizeof(int));
+
       // We've successfully created the socket server and the app
       // should continue to initialize.
       return true;
@@ -2214,6 +2238,8 @@ bool AudacityApp::CreateSingleInstanceChecker(const wxString &dir)
    // Send an empty string to force existing Audacity to front
    sock->WriteMsg(wxEmptyString, sizeof(wxChar));
 
+   munmap(portnum, sizeof(int));
+
    // We've forwarded all of the filenames, so let the caller know
    // to terminate.
    return false;
-- 
2.37.3


From c1ba7fc10deefd8ac290a94dbcbf59f9b1c9e4f8 Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Fri, 9 Dec 2022 16:36:39 +0100
Subject: Haiku: initialize XDG vars


diff --git a/src/AudacityApp.cpp b/src/AudacityApp.cpp
index c2133f8..77eff52 100644
--- a/src/AudacityApp.cpp
+++ b/src/AudacityApp.cpp
@@ -58,6 +58,12 @@ It handles initialization and termination by subclassing wxApp.
 #endif
 #endif
 
+#ifdef __HAIKU__
+#include <FindDirectory.h>
+#include <fs_info.h>
+#include <glib.h>
+#endif
+
 // chmod, lstat, geteuid
 #ifdef __UNIX__
 #include <sys/types.h>
@@ -833,6 +839,30 @@ int main(int argc, char *argv[])
 IMPLEMENT_APP_NO_MAIN(AudacityApp)
 IMPLEMENT_WX_THEME_SUPPORT
 
+#ifdef __HAIKU__
+void initialize_xdg_paths(void)
+{
+   char dir[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+   char dirs[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+   dev_t volume = dev_for_path("/boot");
+
+   if (find_directory(B_SYSTEM_SETTINGS_DIRECTORY, volume, false, dir, sizeof(dir)) == B_OK)
+      g_setenv ("XDG_CONFIG_DIRS", dir, FALSE);
+   if (find_directory(B_USER_NONPACKAGED_DATA_DIRECTORY, volume, false, dir, sizeof(dir)) == B_OK)
+      g_setenv ("XDG_DATA_HOME", dir, FALSE);
+   if (find_directory(B_USER_SETTINGS_DIRECTORY, volume, false, dir, sizeof(dir)) == B_OK)
+      g_setenv ("XDG_CONFIG_HOME", dir, FALSE);
+   if (find_directory(B_USER_CACHE_DIRECTORY, volume, false, dir, sizeof(dir)) == B_OK)
+      g_setenv ("XDG_CACHE_HOME", dir, FALSE);
+   if (find_directory(B_SYSTEM_DATA_DIRECTORY, volume, false, dir, sizeof(dir)) == B_OK &&
+         find_directory(B_SYSTEM_NONPACKAGED_DATA_DIRECTORY, volume, false, dirs, sizeof(dirs)) == B_OK) {
+      strcat(dirs, ":");
+      strcat(dirs, dir);
+      g_setenv ("XDG_DATA_DIRS", dirs, FALSE);
+   }
+}
+#endif
+
 int main(int argc, char *argv[])
 {
    wxDISABLE_DEBUG_SUPPORT();
@@ -845,6 +875,10 @@ int main(int argc, char *argv[])
    stdout = freopen("/dev/null", "w", stdout);
    stderr = freopen("/dev/null", "w", stderr);
 
+#ifdef __HAIKU__
+   initialize_xdg_paths();
+#endif
+
    return wxEntry(argc, argv);
 }
 
-- 
2.37.3


From 4e510ab731c0fa2575668d8f664b377fd39a9462 Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Sat, 17 Dec 2022 23:26:49 +0100
Subject: adjust paths for Haiku


diff --git a/libraries/lib-files/PathList.cpp b/libraries/lib-files/PathList.cpp
index 622a9eb..907dd59 100644
--- a/libraries/lib-files/PathList.cpp
+++ b/libraries/lib-files/PathList.cpp
@@ -29,7 +29,7 @@ void FileNames::InitializePathList()
    const auto portablePrefix = wxPathOnly(wxPathOnly(programPath));
 
    // Make sure install prefix is set so wxStandardPath resolves paths properly
-   if (wxDirExists(portablePrefix + L"/share/audacity")) {
+   if (wxDirExists(portablePrefix + L"/data/audacity")) {
       // use prefix relative to executable location to make Audacity portable
       standardPaths.SetInstallPrefix(portablePrefix);
    } else {
@@ -95,9 +95,9 @@ void FileNames::InitializePathList()
       audacityPathList);
    FileNames::AddUniquePathToPathList(FileNames::ModulesDir(),
       audacityPathList);
-   FileNames::AddUniquePathToPathList(wxString::Format(installPrefix + L"/share/%s", wxT(AUDACITY_NAME)),
+   FileNames::AddUniquePathToPathList(wxString::Format(installPrefix + L"/data/%s", wxT(AUDACITY_NAME)),
       audacityPathList);
-   FileNames::AddUniquePathToPathList(wxString::Format(installPrefix + L"/share/doc/%s", wxT(AUDACITY_NAME)),
+   FileNames::AddUniquePathToPathList(wxString::Format(installPrefix + L"/data/doc/%s", wxT(AUDACITY_NAME)),
       audacityPathList);
 #else //AUDACITY_NAME
    FileNames::AddUniquePathToPathList(wxString::Format(wxT("%s/.audacity-files"),
@@ -105,13 +105,13 @@ void FileNames::InitializePathList()
       audacityPathList);
    FileNames::AddUniquePathToPathList(FileNames::ModulesDir(),
       audacityPathList);
-   FileNames::AddUniquePathToPathList(installPrefix + L"/share/audacity",
+   FileNames::AddUniquePathToPathList(installPrefix + L"/data/audacity",
       audacityPathList);
-   FileNames::AddUniquePathToPathList(installPrefix + L"/share/doc/audacity",
+   FileNames::AddUniquePathToPathList(installPrefix + L"/data/doc/audacity",
       audacityPathList);
 #endif //AUDACITY_NAME
 
-   FileNames::AddUniquePathToPathList(installPrefix + L"/share/locale",
+   FileNames::AddUniquePathToPathList(installPrefix + L"/data/locale",
       audacityPathList);
 
    FileNames::AddUniquePathToPathList(wxString::Format(wxT("./locale")),
diff --git a/libraries/lib-strings/Languages.cpp b/libraries/lib-strings/Languages.cpp
index 6cd5775..9078693 100644
--- a/libraries/lib-strings/Languages.cpp
+++ b/libraries/lib-strings/Languages.cpp
@@ -220,7 +220,7 @@ void GetLanguages( FilePaths pathList,
 
 #if defined(__WXGTK__)
    {
-      wxFileName pathNorm{ wxStandardPaths::Get().GetInstallPrefix() + L"/share/locale" };
+      wxFileName pathNorm{ wxStandardPaths::Get().GetInstallPrefix() + L"/data/locale" };
       pathNorm.Normalize();
       const wxString newPath{ pathNorm.GetFullPath() };
       if (pathList.end() ==
-- 
2.37.3


From c4b3ce7f97ab1422c99c32ee626c50bbbb5a485a Mon Sep 17 00:00:00 2001
From: David Karoly <david.karoly@outlook.com>
Date: Sun, 18 Dec 2022 22:39:34 +0100
Subject: shutdown hook for locales. fix crash on exit


diff --git a/libraries/lib-strings/Languages.cpp b/libraries/lib-strings/Languages.cpp
index 9078693..9249c66 100644
--- a/libraries/lib-strings/Languages.cpp
+++ b/libraries/lib-strings/Languages.cpp
@@ -321,6 +321,11 @@ void GetLanguages( FilePaths pathList,
 static std::unique_ptr<wxLocale> sLocale;
 static wxString sLocaleName;
 
+void UnsetLocale(void)
+{
+	sLocale.reset();
+}
+
 wxString SetLang( const FilePaths &pathList, const wxString & lang )
 {
    wxString result = lang;
diff --git a/libraries/lib-strings/Languages.h b/libraries/lib-strings/Languages.h
index c6707ee..f545484 100644
--- a/libraries/lib-strings/Languages.h
+++ b/libraries/lib-strings/Languages.h
@@ -43,6 +43,9 @@ wxString GetSystemLanguageCode(const FilePaths &pathList);
 STRINGS_API
 wxString SetLang( const FilePaths &audacityPathList, const wxString & lang );
 
+STRINGS_API
+void UnsetLocale(void);
+
 /*! @return the last language code that was set */
 STRINGS_API
 wxString GetLang();
diff --git a/src/AudacityApp.cpp b/src/AudacityApp.cpp
index 77eff52..fdd1988 100644
--- a/src/AudacityApp.cpp
+++ b/src/AudacityApp.cpp
@@ -879,7 +879,9 @@ int main(int argc, char *argv[])
    initialize_xdg_paths();
 #endif
 
-   return wxEntry(argc, argv);
+   int res = wxEntry(argc, argv);
+   Languages::UnsetLocale();
+   return res;
 }
 
 #else
-- 
2.37.3

