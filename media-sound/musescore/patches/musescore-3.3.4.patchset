From 455108e41eba42ee6ce2efaf21bf3113eeeb4c74 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@pulkomandy.tk>
Date: Tue, 17 Sep 2019 19:09:55 +0200
Subject: Import still relevant part of Haiku patches.


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 07b8b5e..148fe1f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -114,6 +114,13 @@ if (APPLE)
       option(BUILD_ALSA ${MAC_NOT_AVAIL} OFF)
 endif (APPLE)
 
+# Disable components not supported on Haiku
+if (HAIKU)
+	set(HAIKU_NOT_AVAIL "Not available on Haiku")
+	option(BUILD_PULSEAUDIO ${HAIKU_NOT_AVAIL} OFF)
+	option(BUILD_ALSA ${HAIKU_NOT_AVAIL} OFF)
+endif (HAIKU)
+
 # Disable components not supported on Linux/BSD
 if (NOT APPLE AND NOT MINGW AND NOT MSVC)
       set(NIX_NOT_AVAIL "Not available on Linux/BSD")
diff --git a/mscore/CMakeLists.txt b/mscore/CMakeLists.txt
index 1b85ed9..6710878 100644
--- a/mscore/CMakeLists.txt
+++ b/mscore/CMakeLists.txt
@@ -806,8 +806,8 @@ else (MINGW)
 
       if (APPLE)
         target_link_libraries(mscore ${OsxFrameworks})
-      else (APPLE)
-          target_link_libraries(mscore rt)
+      elseif (NOT HAIKU)
+        target_link_libraries(mscore rt)
       endif (APPLE)
 
       # 'gold' does not use indirect shared libraries for symbol resolution, Linux only
@@ -815,7 +815,9 @@ else (MINGW)
          if(USE_JACK)
             target_link_libraries(mscore ${CMAKE_DL_LIBS})
          endif(USE_JACK)
-         target_link_libraries(mscore rt)
+         if (NOT HAIKU)
+            target_link_libraries(mscore rt)
+         endif(NOT HAIKU)
       endif (NOT APPLE)
 
       if (APPLE)
-- 
2.24.1


From 2f60f112b794565e392ba2d05aacdcb9f4916271 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Tue, 31 Dec 2019 17:39:34 +0100
Subject: Specializes template routines.

Qt 5.14 introduces serialisation/deserialisation for enum classes,
this results in ambiguous templates between qdatastream.h and preferences.h.
we specialize everything to workaround this.

diff --git a/mscore/preferences.h b/mscore/preferences.h
index 913498c..ed6b892 100644
--- a/mscore/preferences.h
+++ b/mscore/preferences.h
@@ -374,21 +374,52 @@ extern Preferences preferences;
 
 // Stream operators for enum classes
 // enum classes don't play well with QSettings without custom serialization
-template<typename T, typename std::enable_if<std::is_enum<T>::value>::type* = nullptr>
-inline QDataStream &operator<<(QDataStream &out, const T &val)
+inline QDataStream&
+operator<<(QDataStream &out, const Ms::MuseScoreStyleType &val)
 {
     return out << static_cast<int>(val);
 }
 
-template<typename T, typename std::enable_if<std::is_enum<T>::value>::type* = nullptr>
-inline QDataStream &operator>>(QDataStream &in, T &val)
+inline QDataStream&
+operator>>(QDataStream &in, Ms::MuseScoreStyleType &val)
 {
     int tmp;
     in >> tmp;
-    val = static_cast<T>(tmp);
+    val = static_cast<Ms::MuseScoreStyleType>(tmp);
     return in;
 }
 
+inline QDataStream&
+operator<<(QDataStream &out, const Ms::SessionStart &val)
+{
+    return out << static_cast<int>(val);
+}
+
+inline QDataStream&
+operator>>(QDataStream &in, Ms::SessionStart &val)
+{
+    int tmp;
+    in >> tmp;
+    val = static_cast<Ms::SessionStart>(tmp);
+    return in;
+}
+
+inline QDataStream&
+operator<<(QDataStream &out, const Ms::MusicxmlExportBreaks &val)
+{
+    return out << static_cast<int>(val);
+}
+
+inline QDataStream&
+operator>>(QDataStream &in, Ms::MusicxmlExportBreaks &val)
+{
+    int tmp;
+    in >> tmp;
+    val = static_cast<Ms::MusicxmlExportBreaks>(tmp);
+    return in;
+}
+
+
 class PreferenceVisitor {
    public:
       virtual void visit(QString key, IntPreference*) = 0;
-- 
2.24.1


From 91dd54e1acd841387367a9795103b3de68ae1829 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Tue, 31 Dec 2019 17:42:04 +0100
Subject: fix warnings: replace QString::null, with QString()


diff --git a/mscore/capella.cpp b/mscore/capella.cpp
index 7144414..6243c8c 100644
--- a/mscore/capella.cpp
+++ b/mscore/capella.cpp
@@ -2708,7 +2708,7 @@ Score::FileError importCapella(MasterScore* score, const QString& name)
                   QMessageBox::warning(0,
                      QWidget::tr("Import Capella"),
                      QWidget::tr("Load failed: %1").arg(cf.error(errNo)),
-                     QString::null, QWidget::tr("Quit"), QString::null, 0, 1);
+                     QString(), QWidget::tr("Quit"), QString(), 0, 1);
                   }
             fp.close();
             // avoid another error message box
diff --git a/mscore/importmidi/importmidi.cpp b/mscore/importmidi/importmidi.cpp
index a5d8894..8091a83 100644
--- a/mscore/importmidi/importmidi.cpp
+++ b/mscore/importmidi/importmidi.cpp
@@ -1200,7 +1200,7 @@ Score::FileError importMidi(MasterScore *score, const QString &name)
                         QMessageBox::warning(0,
                            QWidget::tr("Load MIDI"),
                            QWidget::tr("Load failed: %1").arg(errorText),
-                           QString::null, QWidget::tr("Quit"), QString::null, 0, 1);
+                           QString(), QWidget::tr("Quit"), QString(), 0, 1);
                         }
                   fp.close();
                   qDebug("importMidi: bad file format");
diff --git a/mscore/instrdialog.cpp b/mscore/instrdialog.cpp
index fa7bacd..8d81fe9 100644
--- a/mscore/instrdialog.cpp
+++ b/mscore/instrdialog.cpp
@@ -138,7 +138,7 @@ void InstrumentsDialog::on_loadButton_clicked()
             QMessageBox::warning(0,
                QWidget::tr("Load Style Failed"),
                QString(strerror(errno)),
-               QString::null, QWidget::tr("Quit"), QString::null, 0, 1);
+               QString(), QWidget::tr("Quit"), QString(), 0, 1);
             return;
             }
       instrumentsWidget->buildTemplateList();
diff --git a/mscore/musescore.cpp b/mscore/musescore.cpp
index 3476241..4ded5a9 100644
--- a/mscore/musescore.cpp
+++ b/mscore/musescore.cpp
@@ -4065,7 +4065,7 @@ bool MuseScore::readLanguages(const QString& path)
                 QMessageBox::warning(0,
                    QWidget::tr("Load Languages Failed:"),
                    error,
-                   QString::null, QWidget::tr("Quit"), QString::null, 0, 1);
+                   QString(), QWidget::tr("Quit"), QString(), 0, 1);
                 return false;
                 }
 
@@ -6884,7 +6884,7 @@ bool MuseScore::saveMp3(Score* score, const QString& name)
                   QMessageBox::warning(0,
                                        tr("Encoding Error"),
                                        tr("Unable to open target file for writing"),
-                                       QString::null, QString::null);
+                                       QString(), QString());
                   }
             return false;
             }
@@ -6923,7 +6923,7 @@ bool MuseScore::saveMp3(Score* score, QIODevice* device, bool& wasCanceled)
                   QMessageBox::warning(0,
                                tr("Error Opening LAME library"),
                                tr("Could not open MP3 encoding library!"),
-                               QString::null, QString::null);
+                               QString(), QString());
             qDebug("Could not open MP3 encoding library!");
             return false;
             }
@@ -6935,7 +6935,7 @@ bool MuseScore::saveMp3(Score* score, QIODevice* device, bool& wasCanceled)
                   QMessageBox::warning(0,
                                tr("Error Opening LAME library"),
                                tr("Not a valid or supported MP3 encoding library!"),
-                               QString::null, QString::null);
+                               QString(), QString());
             qDebug("Not a valid or supported MP3 encoding library!");
             return false;
             }
@@ -6960,7 +6960,7 @@ bool MuseScore::saveMp3(Score* score, QIODevice* device, bool& wasCanceled)
             if (!MScore::noGui) {
                   QMessageBox::warning(0, tr("Encoding Error"),
                      tr("Unable to initialize MP3 stream"),
-                     QString::null, QString::null);
+                     QString(), QString());
                   }
             qDebug("Unable to initialize MP3 stream");
             MScore::sampleRate = oldSampleRate;
@@ -7127,7 +7127,7 @@ bool MuseScore::saveMp3(Score* score, QIODevice* device, bool& wasCanceled)
                                     QMessageBox::warning(0,
                                        tr("Encoding Error"),
                                        tr("Error %1 returned from MP3 encoder").arg(bytes),
-                                       QString::null, QString::null);
+                                       QString(), QString());
                               break;
                               }
                         else
diff --git a/mscore/musescore.h b/mscore/musescore.h
index 51864b6..af59ebd 100644
--- a/mscore/musescore.h
+++ b/mscore/musescore.h
@@ -141,7 +141,7 @@ struct LanguageItem {
       LanguageItem(const QString k, const QString n) {
             key = k;
             name = n;
-            handbook = QString::null;
+            handbook = QString();
             }
       LanguageItem(const QString k, const QString n, const QString h) {
             key = k;
diff --git a/mscore/network/loginmanager.cpp b/mscore/network/loginmanager.cpp
index 41fdd40..d32b1b2 100644
--- a/mscore/network/loginmanager.cpp
+++ b/mscore/network/loginmanager.cpp
@@ -831,7 +831,7 @@ void LoginManager::mediaUploadFinished()
             QMessageBox::warning(0,
                      tr("Upload Error"),
                      tr("Sorry, MuseScore couldn't upload the audio file. Error %1").arg(e),
-                     QString::null, QString::null);
+                     QString(), QString());
             }
       }
 
-- 
2.24.1


From 87421462327190651ce298453cae9f425defaca4 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Tue, 7 Jan 2020 13:31:47 +1000
Subject: Don't set Fusion style for Haiku


diff --git a/mscore/musescore.cpp b/mscore/musescore.cpp
index 4ded5a9..ef7e788 100644
--- a/mscore/musescore.cpp
+++ b/mscore/musescore.cpp
@@ -7181,8 +7181,9 @@ bool MuseScore::saveMp3(Score* score, QIODevice* device, bool& wasCanceled)
 void MuseScore::updateUiStyleAndTheme()
       {
       // set UI Theme
+#ifndef __HAIKU__
       QApplication::setStyle(QStyleFactory::create("Fusion"));
-
+#endif
       QString wd      = QString("%1/%2").arg(QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation)).arg(QCoreApplication::applicationName());
       // set UI Color Palette
       QPalette p(QApplication::palette());
-- 
2.24.1

