From b06009c36706f9cdfd823eaf3dc69488794c8e1d Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Sat, 21 May 2022 12:20:22 +0900
Subject: [PATCH 1/2] HGL: add Haiku libGL.so implementation based on EGL

---
 include/meson.build         |  11 +-
 include/opengl/GLRenderer.h |  73 ++++++
 include/opengl/GLView.h     | 192 +++++++++++++++
 include/opengl/OpenGLKit.h  |  10 +
 include/opengl/README       |  27 +++
 meson.build                 |   2 +-
 meson_options.txt           |   6 +
 src/EGL/meson.build         |   4 +-
 src/HGL/.gitignore          |   2 +
 src/HGL/BitmapHook.h        |  13 +
 src/HGL/GLView.cpp          | 462 ++++++++++++++++++++++++++++++++++++
 src/HGL/libgl.c             |  59 +++++
 src/HGL/meson.build         |  53 +++++
 src/meson.build             |   4 +
 14 files changed, 913 insertions(+), 5 deletions(-)
 create mode 100644 include/opengl/GLRenderer.h
 create mode 100644 include/opengl/GLView.h
 create mode 100644 include/opengl/OpenGLKit.h
 create mode 100644 include/opengl/README
 create mode 100644 src/HGL/.gitignore
 create mode 100644 src/HGL/BitmapHook.h
 create mode 100644 src/HGL/GLView.cpp
 create mode 100644 src/HGL/libgl.c
 create mode 100644 src/HGL/meson.build

diff --git a/include/meson.build b/include/meson.build
index 5efb90d..d0e8a2f 100644
--- a/include/meson.build
+++ b/include/meson.build
@@ -22,6 +22,7 @@
 # MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 
 inc_include = include_directories('.')
+inc_include_opengl = include_directories('opengl')
 
 install_headers(
   'glvnd/GLdispatchABI.h',
@@ -54,6 +55,15 @@ if with_glx and _headers
   )
 endif
 
+if get_option('hgl') and _headers
+  install_headers(
+    'opengl/OpenGLKit.h',
+    'opengl/GLView.h',
+    'opengl/GLRenderer.h',
+    subdir : 'opengl',
+  )
+endif
+
 if get_option('gles1') and _headers
   install_headers(
     'GLES/egl.h',
@@ -89,4 +99,3 @@ if get_option('egl') and _headers
     subdir : 'EGL',
   )
 endif
-
diff --git a/include/opengl/GLRenderer.h b/include/opengl/GLRenderer.h
new file mode 100644
index 0000000..5c9c4da
--- /dev/null
+++ b/include/opengl/GLRenderer.h
@@ -0,0 +1,73 @@
+/*
+ * Copyright 2006, Philippe Houdoin. All rights reserved.
+ * Distributed under the terms of the MIT License.
+
+ * This header defines BGLRenderer, the base class making up
+ * the Haiku GL renderer add-ons (essentially selfcontained C++
+ * shared libraries that do the actual rendering such as
+ * libswpipe.so and libswrast.so)
+ */
+#ifndef GLRENDERER_H
+#define GLRENDERER_H
+
+
+#include <BeBuild.h>
+#include <GLView.h>
+
+
+class BGLDispatcher;
+class GLRendererRoster;
+
+typedef unsigned long renderer_id;
+
+class _EXPORT BGLRenderer
+{
+							// Private unimplemented copy constructors
+							BGLRenderer(const BGLRenderer &);
+							BGLRenderer & operator=(const BGLRenderer &);
+
+public:
+							BGLRenderer(BGLView *view, ulong bgl_options);
+	virtual					~BGLRenderer();
+
+	void 					Acquire();
+	void					Release();
+
+	virtual void			LockGL();
+	virtual void 			UnlockGL();
+
+	virtual	void 			SwapBuffers(bool VSync = false);
+	virtual	void			Draw(BRect updateRect);
+	virtual status_t		CopyPixelsOut(BPoint source, BBitmap *dest);
+	virtual status_t    	CopyPixelsIn(BBitmap *source, BPoint dest);
+
+	virtual void			FrameResized(float width, float height);
+
+	virtual void			DirectConnected(direct_buffer_info *info);
+	virtual void			EnableDirectMode(bool enabled);
+
+	inline	int32			ReferenceCount() const { return fRefCount; };
+	inline	ulong			Options() const { return fOptions; };
+	inline	BGLView*		GLView() { return fView; };
+
+private:
+	friend class GLRendererRoster;
+
+	virtual status_t		_Reserved_Renderer_0(int32, void *);
+	virtual status_t		_Reserved_Renderer_1(int32, void *);
+	virtual status_t		_Reserved_Renderer_2(int32, void *);
+	virtual status_t		_Reserved_Renderer_3(int32, void *);
+	virtual status_t		_Reserved_Renderer_4(int32, void *);
+
+	int32					fRefCount;	// How much we're still useful
+	BGLView*				fView;		// Never forget who is the boss!
+	ulong					fOptions;	// Keep that tune in memory
+
+	GLRendererRoster*		fOwningRoster;
+	renderer_id				fID;
+};
+
+extern "C" _EXPORT BGLRenderer* instantiate_gl_renderer(BGLView *view, ulong options);
+
+
+#endif	// GLRENDERER_H
diff --git a/include/opengl/GLView.h b/include/opengl/GLView.h
new file mode 100644
index 0000000..cf5e2ec
--- /dev/null
+++ b/include/opengl/GLView.h
@@ -0,0 +1,192 @@
+/*
+ * Copyright 2008-2013, Haiku, Inc. All Rights Reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * This header defines BGLView, the base class making up
+ * the Haiku GL Kit.
+ *
+ */
+#ifndef BGLVIEW_H
+#define BGLVIEW_H
+
+
+#include <GL/gl.h>
+
+#define BGL_RGB				0
+#define BGL_INDEX			1
+#define BGL_SINGLE			0
+#define BGL_DOUBLE			2
+#define BGL_DIRECT			0
+#define BGL_INDIRECT		4
+#define BGL_ACCUM			8
+#define BGL_ALPHA			16
+#define BGL_DEPTH			32
+#define BGL_OVERLAY			64
+#define BGL_UNDERLAY		128
+#define BGL_STENCIL			512
+#define BGL_SHARE_CONTEXT	1024
+
+#ifdef __cplusplus
+
+#include <AppKit.h>
+#include <Bitmap.h>
+#include <DirectWindow.h>
+#include <View.h>
+#include <Window.h>
+#include <WindowScreen.h>
+
+
+struct glview_direct_info;
+
+class _EXPORT BGLView : public BView {
+public:
+							BGLView(BRect rect, const char* name,
+								ulong resizingMode, ulong mode,
+								ulong options);
+	virtual					~BGLView();
+
+			void			LockGL();
+			void			UnlockGL();
+			void			SwapBuffers();
+			void			SwapBuffers(bool vSync);
+
+			BView*			EmbeddedView();
+			void*			GetGLProcAddress(const char* procName);
+
+			status_t		CopyPixelsOut(BPoint source, BBitmap *dest);
+			status_t		CopyPixelsIn(BBitmap *source, BPoint dest);
+
+	// Mesa's GLenum is uint where Be's ones was ulong!
+	virtual	void			ErrorCallback(unsigned long errorCode);
+
+	virtual void			Draw(BRect updateRect);
+	virtual void			AttachedToWindow();
+	virtual void			AllAttached();
+	virtual void			DetachedFromWindow();
+	virtual void			AllDetached();
+
+	virtual void			FrameResized(float newWidth, float newHeight);
+	virtual status_t		Perform(perform_code d, void *arg);
+
+	virtual status_t		Archive(BMessage *data, bool deep = true) const;
+
+	virtual void			MessageReceived(BMessage *message);
+	virtual void			SetResizingMode(uint32 mode);
+
+	virtual void			Show();
+	virtual void			Hide();
+
+	virtual BHandler*		ResolveSpecifier(BMessage *msg, int32 index,
+								BMessage *specifier, int32 form,
+								const char *property);
+	virtual status_t		GetSupportedSuites(BMessage *data);
+
+			void			DirectConnected(direct_buffer_info *info);
+			void			EnableDirectMode(bool enabled);
+
+			void*			getGC()	{ return fGc; }
+
+	virtual void			GetPreferredSize(float* width, float* height);
+
+private:
+	struct Renderer;
+
+	virtual void			_ReservedGLView1();
+	virtual void			_ReservedGLView2();
+	virtual void			_ReservedGLView3();
+	virtual void			_ReservedGLView4();
+	virtual void			_ReservedGLView5();
+	virtual void			_ReservedGLView6();
+	virtual void			_ReservedGLView7();
+	virtual void			_ReservedGLView8();
+
+							BGLView(const BGLView &);
+							BGLView &operator=(const BGLView &);
+
+			void			_DitherFront();
+			bool			_ConfirmDither();
+			void			_Draw(BRect rect);
+			void			_CallDirectConnected();
+
+			void*			fGc;
+			uint32			fOptions;
+			uint32			fUnused1;
+			BLocker			fDrawLock;
+			BLocker			fDisplayLock;
+			glview_direct_info* fClipInfo;
+
+			Renderer*		fRenderer;
+			void*			fUnused2;
+			void*			fUnused3;
+			BRect			fUnused4;
+			void*			fUnused5[2];
+			uint64			_reserved[8];
+
+			void			_LockDraw();
+			void			_UnlockDraw();
+
+// BeOS compatibility
+private:
+							BGLView(BRect rect, char* name,
+								ulong resizingMode, ulong mode,
+								ulong options);
+};
+
+
+class BGLScreen : public BWindowScreen {
+public:
+							BGLScreen(char* name,
+								ulong screenMode, ulong options,
+								status_t *error, bool debug=false);
+							~BGLScreen();
+
+			void			LockGL();
+			void			UnlockGL();
+			void			SwapBuffers();
+							// Mesa's GLenum is uint where Be's ones was ulong!
+	virtual	void			ErrorCallback(unsigned long errorCode);
+
+	virtual void			ScreenConnected(bool connected);
+	virtual void			FrameResized(float width, float height);
+	virtual status_t		Perform(perform_code code, void *arg);
+
+	virtual status_t		Archive(BMessage *data, bool deep = true) const;
+	virtual void			MessageReceived(BMessage *message);
+
+	virtual void			Show();
+	virtual void			Hide();
+
+	virtual BHandler*		ResolveSpecifier(BMessage *message,
+								int32 index,
+								BMessage *specifier,
+								int32 form,
+								const char *property);
+	virtual status_t		GetSupportedSuites(BMessage *data);
+
+private:
+
+	virtual void			_ReservedGLScreen1();
+	virtual void			_ReservedGLScreen2();
+	virtual void			_ReservedGLScreen3();
+	virtual void			_ReservedGLScreen4();
+	virtual void			_ReservedGLScreen5();
+	virtual void			_ReservedGLScreen6();
+	virtual void			_ReservedGLScreen7();
+	virtual void			_ReservedGLScreen8();
+
+							BGLScreen(const BGLScreen &);
+							BGLScreen &operator=(const BGLScreen &);
+
+			void*			fGc;
+			long			fOptions;
+			BLocker			fDrawLock;
+
+			int32			fColorSpace;
+			uint32			fScreenMode;
+
+			uint64			_reserved[7];
+};
+
+#endif // __cplusplus
+
+#endif // BGLVIEW_H
diff --git a/include/opengl/OpenGLKit.h b/include/opengl/OpenGLKit.h
new file mode 100644
index 0000000..71d9830
--- /dev/null
+++ b/include/opengl/OpenGLKit.h
@@ -0,0 +1,10 @@
+/*
+ * Master include file for the Haiku OpenGL Kit.
+ */
+
+#include <GL/gl.h>
+#include <GLView.h>
+
+// Projects needing GL/glu.h and GL/glut.h should now
+// include these headers independently as glu and glut
+// are no longer core parts of mesa
diff --git a/include/opengl/README b/include/opengl/README
new file mode 100644
index 0000000..da5e5b6
--- /dev/null
+++ b/include/opengl/README
@@ -0,0 +1,27 @@
+These headers make up the Haiku Op*nGL kit.
+
+Headers in this directory preserve some BeOS™ compatibility
+compatibility, so changes should be mentioned to the Haiku
+project mailing list.
+
+http://haiku-os.org
+
+Normal Haiku Op*enGL layout:
+
+  * headers/os/OpenGLKit.h
+  * headers/os/opengl/GLView.h
+  * headers/os/opengl/GLRenderer.h
+  * headers/os/opengl/GL/gl.h
+  * headers/os/opengl/GL/glext.h
+  * headers/os/opengl/GL/osmesa.h (needed?)
+
+Extras:
+
+  * headers/os/opengl/GL/glu.h
+  * headers/os/opengl/GL/glut.h
+
+OpenGL™ is a trademark of SGI. The usage of this trademark
+in the Haiku GL Kit is not a sign of any certification or
+endorsement by SGI or its affiliates. Usage is purely to
+allow legacy compatibility with the BeOS™ and its 3D GL
+rendering subsystem.
diff --git a/meson.build b/meson.build
index 8144a22..86fc92f 100644
--- a/meson.build
+++ b/meson.build
@@ -23,7 +23,7 @@
 
 project(
   'glvnd',
-  'c',
+  'c', 'cpp',
   version : '1.6.0',
   meson_version : '>= 0.48',
   default_options : ['c_std=gnu99']
diff --git a/meson_options.txt b/meson_options.txt
index 43198f6..bd34f81 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -42,6 +42,12 @@ option(
   type : 'feature',
   description : 'Support the GLX platform.'
 )
+option(
+  'hgl',
+  type : 'boolean',
+  value : false,
+  description : 'Support the HGL platform.'
+)
 option(
   'gles1',
   type : 'boolean',
diff --git a/src/EGL/meson.build b/src/EGL/meson.build
index 9d109b1..f4db258 100644
--- a/src/EGL/meson.build
+++ b/src/EGL/meson.build
@@ -39,9 +39,7 @@ libEGL = shared_library(
     'libeglerror.c',
   ],
   c_args : [
-    '-DDEFAULT_EGL_VENDOR_CONFIG_DIRS="@0@/glvnd/egl_vendor.d:@1@/glvnd/egl_vendor.d"'.format(
-      join_paths(get_option('prefix'), get_option('sysconfdir')),
-      join_paths(get_option('prefix'), get_option('datadir'))),
+    '-DDEFAULT_EGL_VENDOR_CONFIG_DIRS="/boot/home/config/non-packaged/add-ons/opengl/egl_vendor.d:/boot/home/config/add-ons/opengl/egl_vendor.d:/boot/system/non-packaged/add-ons/opengl/egl_vendor.d:/boot/system/add-ons/opengl/egl_vendor.d"'
   ],
   include_directories : inc_include,
   link_args : '-Wl,-Bsymbolic',
diff --git a/src/HGL/.gitignore b/src/HGL/.gitignore
new file mode 100644
index 0000000..84a797f
--- /dev/null
+++ b/src/HGL/.gitignore
@@ -0,0 +1,2 @@
+g_glapi_mapi_gl_tmp.h
+g_libglglxwrapper.c
diff --git a/src/HGL/BitmapHook.h b/src/HGL/BitmapHook.h
new file mode 100644
index 0000000..b5d976f
--- /dev/null
+++ b/src/HGL/BitmapHook.h
@@ -0,0 +1,13 @@
+#pragma once
+
+#include <stdint.h>
+
+
+class BBitmap;
+
+class BitmapHook {
+public:
+	virtual ~BitmapHook() {};
+	virtual void GetSize(uint32_t &width, uint32_t &height) = 0;
+	virtual BBitmap *SetBitmap(BBitmap *bmp) = 0;
+};
diff --git a/src/HGL/GLView.cpp b/src/HGL/GLView.cpp
new file mode 100644
index 0000000..721b099
--- /dev/null
+++ b/src/HGL/GLView.cpp
@@ -0,0 +1,462 @@
+/*
+ * Copyright 2006-2022, Haiku. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Authors:
+ *		Jérôme Duval, korli@users.berlios.de
+ *		Philippe Houdoin, philippe.houdoin@free.fr
+ *		Stefano Ceccherini, burton666@libero.it
+ *		X512, danger_mail@list.ru
+ */
+
+#include <kernel/image.h>
+
+#define EGL_EGL_PROTOTYPES 0
+#include <GLView.h>
+#include <EGL/egl.h>
+
+#include <assert.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <dlfcn.h>
+#include <algorithm>
+
+#include <DirectWindow.h>
+
+#include <private/interface/DirectWindowPrivate.h>
+#include <private/shared/AutoDeleter.h>
+#include <private/shared/AutoLocker.h>
+#include <private/shared/PthreadMutexLocker.h>
+
+#include "BitmapHook.h"
+
+
+struct glview_direct_info {
+	direct_buffer_info* direct_info;
+	bool direct_connected;
+	bool enable_direct_mode;
+
+	glview_direct_info();
+	~glview_direct_info();
+};
+
+
+#define LIBEGL_HOOK_LIST(REQUIRED) \
+	REQUIRED(PFNEGLGETPROCADDRESSPROC, eglGetProcAddress) \
+	REQUIRED(PFNEGLGETDISPLAYPROC, eglGetDisplay) \
+	REQUIRED(PFNEGLINITIALIZEPROC, eglInitialize) \
+	REQUIRED(PFNEGLCHOOSECONFIGPROC, eglChooseConfig) \
+	REQUIRED(PFNEGLBINDAPIPROC, eglBindAPI) \
+	REQUIRED(PFNEGLCREATECONTEXTPROC, eglCreateContext) \
+	REQUIRED(PFNEGLDESTROYCONTEXTPROC, eglDestroyContext) \
+	REQUIRED(PFNEGLMAKECURRENTPROC, eglMakeCurrent) \
+	REQUIRED(PFNEGLTERMINATEPROC, eglTerminate) \
+	REQUIRED(PFNEGLSWAPBUFFERSPROC, eglSwapBuffers) \
+	REQUIRED(PFNEGLCREATEWINDOWSURFACEPROC, eglCreateWindowSurface) \
+	REQUIRED(PFNEGLCREATEPBUFFERSURFACEPROC, eglCreatePbufferSurface) \
+	REQUIRED(PFNEGLDESTROYSURFACEPROC, eglDestroySurface) \
+	REQUIRED(PFNEGLGETCURRENTCONTEXTPROC, eglGetCurrentContext) \
+
+
+struct BGLView::Renderer {
+	BGLView *view;
+
+	void *libEgl{};
+
+#define DISPATCH_TABLE_ENTRY(x, y) x y{};
+   LIBEGL_HOOK_LIST(DISPATCH_TABLE_ENTRY)
+#undef DISPATCH_TABLE_ENTRY
+
+	EGLDisplay eglDpy{};
+	EGLConfig eglCfg{};
+	EGLContext eglCtx = EGL_NO_CONTEXT;
+	EGLSurface eglSurf = EGL_NO_SURFACE;
+	uint32_t width = 0;
+	uint32_t height = 0;
+
+	class BitmapHook: public ::BitmapHook {
+	private:
+		inline Renderer *Base() {return (Renderer*)((char*)this - offsetof(Renderer, fBmpHook));}
+
+	public:
+		virtual ~BitmapHook() {};
+		void GetSize(uint32_t &width, uint32_t &height) override;
+		BBitmap *SetBitmap(BBitmap *bmp) override;
+	} fBmpHook;
+	pthread_mutex_t fLock = PTHREAD_RECURSIVE_MUTEX_INITIALIZER;
+	ObjectDeleter<BBitmap> fBitmap;
+
+	~Renderer();
+	status_t Init();
+	void SwapBuffers();
+};
+
+
+void BGLView::Renderer::BitmapHook::GetSize(uint32_t &width, uint32_t &height)
+{
+	PthreadMutexLocker lock(&Base()->fLock);
+	width = Base()->width;
+	height = Base()->height;
+}
+
+BBitmap *BGLView::Renderer::BitmapHook::SetBitmap(BBitmap *bmp)
+{
+	PthreadMutexLocker lock(&Base()->fLock);
+	BBitmap* oldBmp = Base()->fBitmap.Detach();
+	Base()->fBitmap.SetTo(bmp);
+	BMessenger(Base()->view).SendMessage(B_INVALIDATE);
+	return oldBmp;
+}
+
+
+status_t BGLView::Renderer::Init()
+{
+	libEgl = dlopen("libEGL.so", RTLD_LOCAL);
+	if (libEgl == NULL) {
+		fprintf(stderr, "[!] libEGL.so not found\n");
+		return B_ERROR;
+	}
+
+#define DISPATCH_TABLE_ENTRY(x, y) *(void**)&y = dlsym(libEgl, #y); if (y == NULL) {fprintf(stderr, "[!] libEGL symbol " #y " not found\n"); return B_ERROR;}
+   LIBEGL_HOOK_LIST(DISPATCH_TABLE_ENTRY)
+#undef DISPATCH_TABLE_ENTRY
+
+	eglDpy = eglGetDisplay(EGL_DEFAULT_DISPLAY);
+
+	EGLint major, minor;
+	eglInitialize(eglDpy, &major, &minor);
+
+	EGLint numConfigs;
+	EGLint configAttribs[] = {
+		EGL_SURFACE_TYPE, EGL_PBUFFER_BIT,
+		EGL_BLUE_SIZE, 8,
+		EGL_GREEN_SIZE, 8,
+		EGL_RED_SIZE, 8,
+		EGL_DEPTH_SIZE, 8,
+		EGL_RENDERABLE_TYPE, EGL_OPENGL_BIT,
+		EGL_NONE
+	};
+	eglChooseConfig(eglDpy, configAttribs, &eglCfg, 1, &numConfigs);
+
+	eglBindAPI(EGL_OPENGL_API);
+
+	EGLContext shareCtx = EGL_NO_CONTEXT;
+	if ((view->fOptions & BGL_SHARE_CONTEXT) != 0) {
+		shareCtx = eglGetCurrentContext();
+	}
+	eglCtx = eglCreateContext(eglDpy, eglCfg, shareCtx, NULL);
+
+	BRect viewFrame = view->Frame();
+	width = (uint32_t)viewFrame.Width() + 1;
+	height = (uint32_t)viewFrame.Height() + 1;
+
+	eglSurf = eglCreateWindowSurface(eglDpy, eglCfg, (EGLNativeWindowType)&fBmpHook, NULL);
+
+	return B_OK;
+}
+
+BGLView::Renderer::~Renderer()
+{
+	if (libEgl == NULL)
+		return;
+	eglMakeCurrent(eglDpy, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
+	if (eglSurf != EGL_NO_SURFACE) {eglDestroySurface(eglDpy, eglSurf); eglSurf = EGL_NO_SURFACE;}
+	if (eglCtx != EGL_NO_CONTEXT) {eglDestroyContext(eglDpy, eglCtx); eglCtx = EGL_NO_CONTEXT;}
+	eglTerminate(eglDpy);
+	dlclose(libEgl);
+}
+
+void BGLView::Renderer::SwapBuffers()
+{
+	eglSwapBuffers(eglDpy, eglSurf);
+}
+
+
+// #pragma mark -
+
+BGLView::BGLView(BRect rect, const char* name, ulong resizingMode, ulong mode,
+	ulong options)
+	:
+	BView(rect, name, B_FOLLOW_ALL_SIDES, mode | B_WILL_DRAW | B_FRAME_EVENTS),
+	fGc(NULL),
+	fOptions(options),
+	fDrawLock("BGLView draw lock"),
+	fDisplayLock("BGLView display lock"),
+	fClipInfo(NULL),
+	fRenderer(new Renderer{.view = this})
+{
+	if (fRenderer->Init() < B_OK) {
+		delete fRenderer;
+		fRenderer = NULL;
+	}
+}
+
+
+// BeOS compatibility: contrary to others BView's contructors,
+// BGLView one wants a non-const name argument.
+BGLView::BGLView(BRect rect, char* name, ulong resizingMode, ulong mode,
+	ulong options)
+	:
+	BView(rect, name, B_FOLLOW_ALL_SIDES, mode | B_WILL_DRAW | B_FRAME_EVENTS),
+	fGc(NULL),
+	fOptions(options),
+	fDrawLock("BGLView draw lock"),
+	fDisplayLock("BGLView display lock"),
+	fClipInfo(NULL),
+	fRenderer(new Renderer{.view = this})
+{
+	if (fRenderer->Init() < B_OK) {
+		delete fRenderer;
+		fRenderer = NULL;
+	}
+}
+
+
+BGLView::~BGLView()
+{
+	delete fRenderer;
+	delete fClipInfo;
+}
+
+
+void
+BGLView::LockGL()
+{
+	fDisplayLock.Lock();
+	if (fDisplayLock.CountLocks() == 1) {
+		fRenderer->eglMakeCurrent(fRenderer->eglDpy, fRenderer->eglSurf, fRenderer->eglSurf, fRenderer->eglCtx);
+	}
+}
+
+
+void
+BGLView::UnlockGL()
+{
+	thread_id lockerThread = fDisplayLock.LockingThread();
+	thread_id callerThread = find_thread(NULL);
+
+	if (lockerThread != B_ERROR && lockerThread != callerThread) {
+		printf("UnlockGL is called from wrong thread, lockerThread: %d, callerThread: %d\n",
+			(int)lockerThread, (int)callerThread);
+	}
+
+	if (fDisplayLock.CountLocks() == 1) {
+		fRenderer->eglMakeCurrent(fRenderer->eglDpy, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
+	}
+	fDisplayLock.Unlock();
+}
+
+
+void
+BGLView::SwapBuffers()
+{
+	SwapBuffers(false);
+}
+
+
+void
+BGLView::SwapBuffers(bool vSync)
+{
+	_LockDraw();
+	fRenderer->SwapBuffers();
+	_UnlockDraw();
+}
+
+
+BView*
+BGLView::EmbeddedView()
+{
+	return NULL;
+}
+
+
+void*
+BGLView::GetGLProcAddress(const char* procName)
+{
+	return (void*)fRenderer->eglGetProcAddress(procName);
+}
+
+
+status_t
+BGLView::CopyPixelsOut(BPoint source, BBitmap* dest)
+{
+	if (!dest || !dest->Bounds().IsValid())
+		return B_BAD_VALUE;
+
+	return ENOSYS;
+}
+
+
+status_t
+BGLView::CopyPixelsIn(BBitmap* source, BPoint dest)
+{
+	if (!source || !source->Bounds().IsValid())
+		return B_BAD_VALUE;
+
+	return ENOSYS;
+}
+
+
+/*!	Mesa's GLenum is not ulong but uint, so we can't use GLenum
+	without breaking this method signature.
+	Instead, we have to use the effective BeOS's SGI OpenGL GLenum type:
+	unsigned long.
+ */
+void
+BGLView::ErrorCallback(unsigned long errorCode)
+{
+	char msg[32];
+	sprintf(msg, "GL: Error code $%04lx.", errorCode);
+	// TODO: under BeOS R5, it call debugger(msg);
+	fprintf(stderr, "%s\n", msg);
+}
+
+
+void
+BGLView::Draw(BRect updateRect)
+{
+	BRegion region(updateRect);
+	PthreadMutexLocker lock(&fRenderer->fLock);
+	if (fRenderer->fBitmap.IsSet()) {
+		DrawBitmap(fRenderer->fBitmap.Get(), B_ORIGIN);
+		region.Exclude(fRenderer->fBitmap->Bounds());
+	}
+	FillRegion(&region, B_SOLID_LOW);
+}
+
+
+void
+BGLView::AttachedToWindow()
+{
+	BView::AttachedToWindow();
+
+	{
+		PthreadMutexLocker lock(&fRenderer->fLock);
+		fRenderer->width = Bounds().IntegerWidth() + 1;
+		fRenderer->height = Bounds().IntegerHeight() + 1;
+	}
+
+	// Set default OpenGL viewport:
+	LockGL();
+	glViewport(0, 0, Bounds().IntegerWidth() + 1, Bounds().IntegerHeight() + 1);
+	UnlockGL();
+}
+
+
+void BGLView::GetPreferredSize(float* _width, float* _height)
+{
+	if (_width) *_width = 0;
+	if (_height) *_height = 0;
+}
+
+
+void
+BGLView::DirectConnected(direct_buffer_info* info)
+{
+}
+
+
+void
+BGLView::EnableDirectMode(bool enabled)
+{
+}
+
+
+void BGLView::FrameResized(float width, float height) {
+	BView::FrameResized(width, height);
+	PthreadMutexLocker lock(&fRenderer->fLock);
+	fRenderer->width = (uint32_t)width + 1;
+	fRenderer->height = (uint32_t)height + 1;
+}
+
+
+// forward to base class
+void BGLView::AllAttached() {BView::AllAttached();}
+void BGLView::DetachedFromWindow() {BView::DetachedFromWindow();}
+void BGLView::AllDetached() {BView::AllDetached();}
+status_t BGLView::Perform(perform_code d, void* arg) {return BView::Perform(d, arg);}
+status_t BGLView::Archive(BMessage* data, bool deep) const {return BView::Archive(data, deep);}
+void BGLView::MessageReceived(BMessage* msg) {BView::MessageReceived(msg);}
+void BGLView::SetResizingMode(uint32 mode) {BView::SetResizingMode(mode);}
+void BGLView::Show() {BView::Show();}
+void BGLView::Hide() {BView::Hide();}
+BHandler* BGLView::ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property)
+{return BView::ResolveSpecifier(msg, index, specifier, form, property);}
+status_t BGLView::GetSupportedSuites(BMessage* data) {return BView::GetSupportedSuites(data);}
+
+
+void
+BGLView::_LockDraw()
+{
+	if (!fClipInfo || !fClipInfo->enable_direct_mode)
+		return;
+
+	fDrawLock.Lock();
+}
+
+
+void
+BGLView::_UnlockDraw()
+{
+	if (!fClipInfo || !fClipInfo->enable_direct_mode)
+		return;
+
+	fDrawLock.Unlock();
+}
+
+
+//---- virtual reserved methods ----------
+
+
+void BGLView::_ReservedGLView1() {}
+void BGLView::_ReservedGLView2() {}
+void BGLView::_ReservedGLView3() {}
+void BGLView::_ReservedGLView4() {}
+void BGLView::_ReservedGLView5() {}
+void BGLView::_ReservedGLView6() {}
+void BGLView::_ReservedGLView7() {}
+void BGLView::_ReservedGLView8() {}
+
+
+// #pragma mark -
+
+
+
+const char* color_space_name(color_space space)
+{
+#define C2N(a)	case a:	return #a
+
+	switch (space) {
+	C2N(B_RGB24);
+	C2N(B_RGB32);
+	C2N(B_RGBA32);
+	C2N(B_RGB32_BIG);
+	C2N(B_RGBA32_BIG);
+	C2N(B_GRAY8);
+	C2N(B_GRAY1);
+	C2N(B_RGB16);
+	C2N(B_RGB15);
+	C2N(B_RGBA15);
+	C2N(B_CMAP8);
+	default:
+		return "Unknown!";
+	};
+
+#undef C2N
+};
+
+
+glview_direct_info::glview_direct_info()
+{
+	// TODO: See direct_window_data() in app_server's ServerWindow.cpp
+	direct_info = (direct_buffer_info*)calloc(1, DIRECT_BUFFER_INFO_AREA_SIZE);
+	direct_connected = false;
+	enable_direct_mode = false;
+}
+
+
+glview_direct_info::~glview_direct_info()
+{
+	free(direct_info);
+}
diff --git a/src/HGL/libgl.c b/src/HGL/libgl.c
new file mode 100644
index 0000000..e13571d
--- /dev/null
+++ b/src/HGL/libgl.c
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2013, NVIDIA CORPORATION.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and/or associated documentation files (the
+ * "Materials"), to deal in the Materials without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Materials, and to
+ * permit persons to whom the Materials are furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included
+ * unaltered in all copies or substantial portions of the Materials.
+ * Any additions, deletions, or changes to the original source files
+ * must be clearly indicated in accompanying documentation.
+ *
+ * THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
+ */
+
+#include <dlfcn.h>
+#include <GL/gl.h>
+#include "compiler.h"
+#include "entry.h"
+#include "stub.h"
+#include "GLdispatch.h"
+
+static int patchStubId = -1;
+
+// Initialize GLX imports
+#if defined(USE_ATTRIBUTE_CONSTRUCTOR)
+void __attribute__((constructor)) __libGLInit(void)
+#else
+void _init(void)
+#endif
+{
+    __glDispatchInit();
+
+    // Register these entrypoints with GLdispatch so they can be overwritten at
+    // runtime
+    patchStubId = __glDispatchRegisterStubCallbacks(stub_get_patch_callbacks());
+}
+
+#if defined(USE_ATTRIBUTE_CONSTRUCTOR)
+void __attribute__((destructor)) __libGLFini(void)
+#else
+void _fini(void)
+#endif
+{
+    // Unregister the GLdispatch entrypoints
+    stub_cleanup();
+    __glDispatchUnregisterStubCallbacks(patchStubId);
+    __glDispatchFini();
+}
diff --git a/src/HGL/meson.build b/src/HGL/meson.build
new file mode 100644
index 0000000..993e890
--- /dev/null
+++ b/src/HGL/meson.build
@@ -0,0 +1,53 @@
+
+# Copyright © 2019 Intel Corporation
+
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and/or associated documentation files (the
+# "Materials"), to deal in the Materials without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Materials, and to
+# permit persons to whom the Materials are furnished to do so, subject to
+# the following conditions:
+
+# The above copyright notice and this permission notice shall be included
+# unaltered in all copies or substantial portions of the Materials.
+# Any additions, deletions, or changes to the original source files
+# must be clearly indicated in accompanying documentation.
+
+# THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+# MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
+
+dep_be = cc.find_library('be')
+
+libGL = shared_library(
+  'GL',
+  [
+    'libgl.c',
+    'GLView.cpp',
+  ],
+  include_directories : [
+    inc_include,
+    inc_include_opengl,
+    '/boot/system/develop/headers/private/shared'
+  ],
+  link_args : '-Wl,-Bsymbolic',
+  dependencies : [
+    dep_dl, idep_gldispatch, idep_glapi_gl, idep_utils_misc,
+    dep_be
+  ],
+  version : '1.0.0',
+  gnu_symbol_visibility : 'hidden',
+  install : true,
+)
+
+pkg.generate(
+  libGL,
+  filebase : 'gl',
+  description : 'Legacy OpenGL and HGL library and headers.',
+  version : '1.2',
+)
diff --git a/src/meson.build b/src/meson.build
index bedb18c..6ff7fcd 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -35,6 +35,10 @@ if with_glx
   subdir('GL')
 endif
 
+if get_option('hgl')
+  subdir('HGL')
+endif
+
 if get_option('gles1')
   subdir('GLESv1')
 endif
-- 
2.37.3

From 3dfe88c61f03d72af5e98fcebf5c859cea2d2853 Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Wed, 25 Jan 2023 03:40:07 +0900
Subject: [PATCH 2/2] fix crash on library unload

---
 src/EGL/libeglcurrent.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/EGL/libeglcurrent.c b/src/EGL/libeglcurrent.c
index a09b96d..7870bc9 100644
--- a/src/EGL/libeglcurrent.c
+++ b/src/EGL/libeglcurrent.c
@@ -100,6 +100,8 @@ void __eglCurrentTeardown(EGLBoolean doReset)
 
     if (doReset) {
         __glvndPthreadFuncs.mutex_init(&currentStateListMutex, NULL);
+    } else {
+        __glvndPthreadFuncs.key_delete(threadStateKey);
     }
 }
 
-- 
2.37.3

