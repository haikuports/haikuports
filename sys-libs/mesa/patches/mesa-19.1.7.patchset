From f632aac9385cfe02f5bfe762d93e60b5b46f2c77 Tue Sep 17 00:00:00 2019
From: Ken Mays <kmays2000@gmail.com>
Date: Tue, Sep 17 2019 18:34:08 +0000
Subject: Haiku 19.1.7 patch

diff --git a/src/gallium/targets/haiku-softpipe/GalliumContext.cpp.older b/src/gallium/targets/haiku-softpipe/GalliumContext.cpp
index 0356f65..d9be790 100644
--- a/src/gallium/targets/haiku-softpipe/GalliumContext.cpp.older
+++ b/src/gallium/targets/haiku-softpipe/GalliumContext.cpp
@@ -26,6 +26,7 @@
 #include "sw/hgl/hgl_sw_winsys.h"
 #include "util/u_atomic.h"
 #include "util/u_memory.h"
+#include "util/u_framebuffer.h"
 
 #include "target-helpers/inline_sw_helper.h"
 #include "target-helpers/inline_debug_helper.h"
@@ -332,36 +333,17 @@ GalliumContext::SwapBuffers(context_id contextID)
 		ERROR("%s: context not found\n", __func__);
 		return B_ERROR;
 	}
-
-	// TODO: Where did st_notify_swapbuffers go?
-	//st_notify_swapbuffers(context->draw->stfbi);
-
 	context->st->flush(context->st, ST_FLUSH_FRONT, NULL);
 
-	struct st_context *stContext = (struct st_context*)context->st;
-
-	unsigned nColorBuffers = stContext->state.framebuffer.nr_cbufs;
-	for (unsigned i = 0; i < nColorBuffers; i++) {
-		pipe_surface* surface = stContext->state.framebuffer.cbufs[i];
-		if (!surface) {
-			ERROR("%s: Color buffer %d invalid!\n", __func__, i);
-			continue;
-		}
-
-		TRACE("%s: Flushing color buffer #%d\n", __func__, i);
-
-		// We pass our destination bitmap to flush_fronbuffer which passes it
-		// to the private winsys display call.
-		fScreen->flush_frontbuffer(fScreen, surface->texture, 0, 0,
-			context->bitmap, NULL);
+	struct hgl_buffer* buffer = hgl_st_framebuffer(context->draw->stfbi);
+	pipe_surface* surface = buffer->surface;
+	if (!surface) {
+		ERROR("%s: Invalid drawable surface!\n", __func__);
+		return B_ERROR;
 	}
 
-	#if 0
-	// TODO... should we flush the z stencil buffer?
-	pipe_surface* zSurface = stContext->state.framebuffer.zsbuf;
-	fScreen->flush_frontbuffer(fScreen, zSurface->texture, 0, 0,
+	fScreen->flush_frontbuffer(fScreen, surface->texture, 0, 0,
 		context->bitmap, NULL);
-	#endif
 
 	return B_OK;
 }
diff --git a/src/gallium/state_trackers/hgl/hgl_context.h.older b/src/gallium/state_trackers/hgl/hgl_context.h
index 5acb2f0..c5995f1 100644
--- a/src/gallium/state_trackers/hgl/hgl_context.h.older
+++ b/src/gallium/state_trackers/hgl/hgl_context.h
@@ -39,6 +39,8 @@ struct hgl_buffer
 	unsigned mask;
 
 	struct pipe_screen* screen;
+	struct pipe_surface* surface;
+
 	enum pipe_texture_target target;
 	struct pipe_resource* textures[ST_ATTACHMENT_COUNT];
 
@@ -80,6 +82,8 @@ struct hgl_context
 	struct hgl_buffer* read;
 };
 
+// hgl_buffer from statetracker interface
+struct hgl_buffer* hgl_st_framebuffer(struct st_framebuffer_iface *stfbi);
 
 // hgl state_tracker api
 struct st_api* hgl_create_st_api(void);
diff --git a/src/mapi/glapi/glapi_dispatch.c.older b/src/mapi/glapi/glapi_dispatch.c
index ca15449..2489524 100644
--- a/src/mapi/glapi/glapi_dispatch.c.older
+++ b/src/mapi/glapi/glapi_dispatch.c
@@ -153,6 +153,9 @@ GL_API void GL_APIENTRY glPointSizePointerOES (GLenum type, GLsizei stride, cons
 GL_API void GL_APIENTRY glBlendBarrier (void);
 GL_API void GL_APIENTRY glPrimitiveBoundingBox (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
 
+GL_API void GL_APIENTRY glBlendBarrier (void);
+GL_API void GL_APIENTRY glPrimitiveBoundingBox (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
+
 /* Enable frame pointer elimination on Windows, otherwise forgetting to add
  * APIENTRY to _mesa_* entrypoints will not cause crashes on debug builds, as
  * the initial ESP value is saved in the EBP in the function prologue, then

diff --git a/src/gallium/state_trackers/hgl/Makefile.am b/src/gallium/state_trackers/hgl/Makefile.am
new file mode 100644
index 0000000..5b55be8
--- /dev/null
+++ b/src/gallium/state_trackers/hgl/Makefile.am
@@ -0,0 +1,39 @@
+# Copyright © 2017 Haiku, Inc. All rights reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice (including the next
+# paragraph) shall be included in all copies or substantial portions of the
+# Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
+# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+# DEALINGS IN THE SOFTWARE.
+
+include Makefile.sources
+include $(top_srcdir)/src/gallium/Automake.inc
+
+
+AM_CPPFLAGS = \
+	-I$(top_srcdir)/src \
+	-I$(top_srcdir)/src/mapi \
+	-I$(top_srcdir)/src/mesa \
+	-I$(top_srcdir)/include/HaikuGL \
+	$(GALLIUM_CFLAGS)
+
+noinst_LTLIBRARIES = libhgl.la
+libhgl_la_LIBADD = -ltranslation
+libhgl_la_SOURCES = $(common_SOURCES)
+
+
+EXTRA_DIST = SConscript
diff --git a/src/gallium/state_trackers/hgl/Makefile.sources b/src/gallium/state_trackers/hgl/Makefile.sources
new file mode 100644
index 0000000..3076ba3
--- /dev/null
+++ b/src/gallium/state_trackers/hgl/Makefile.sources
@@ -0,0 +1,3 @@
+common_SOURCES := \
+	hgl.c \
+	bitmap_wrapper.cpp
diff --git a/src/gallium/targets/haiku-softpipe/Makefile.am b/src/gallium/targets/haiku-softpipe/Makefile.am
new file mode 100644
index 0000000..94599a3
--- /dev/null
+++ b/src/gallium/targets/haiku-softpipe/Makefile.am
@@ -0,0 +1,69 @@
+include $(top_srcdir)/src/gallium/Automake.inc
+
+AM_CPPFLAGS = \
+		-I$(top_srcdir)/src/mapi \
+		-I$(top_srcdir)/src/mesa \
+		-I$(top_srcdir)/src/mesa/main \
+		-I$(top_srcdir)/include/HaikuGL \
+		-I$(top_srcdir)/src/gallium/include \
+		-I$(top_srcdir)/src/gallium/winsys \
+		-I$(top_srcdir)/src/gallium/state_trackers/hgl \
+		-I/boot/system/develop/headers/private \
+		$(GALLIUM_TARGET_CFLAGS) \
+		$(DEFINES) \
+		-DGALLIUM_SOFTPIPE \
+		-DGALLIUM_RBUG \
+		-DGALLIUM_TRACE
+
+hswpipedir = ${libdir}/haiku
+hswpipe_LTLIBRARIES = libswpipe.la
+
+libswpipe_la_SOURCES = \
+		GalliumContext.cpp \
+		SoftwareRenderer.cpp
+
+libswpipe_la_LDFLAGS = \
+		-shared \
+		-shrext .so \
+		-module \
+		-avoid-version \
+		$(GC_SECTIONS)
+
+libswpipe_la_LIBADD = \
+		$(top_builddir)/src/hgl/libGL.la \
+		$(top_builddir)/src/gallium/winsys/sw/hgl/libswhgl.la \
+		$(top_builddir)/src/gallium/state_trackers/hgl/libhgl.la \
+		$(top_builddir)/src/gallium/drivers/rbug/librbug.la \
+		$(top_builddir)/src/gallium/drivers/trace/libtrace.la \
+		$(top_builddir)/src/gallium/auxiliary/libgallium.la \
+		$(top_builddir)/src/mesa/libmesagallium.la \
+		$(top_builddir)/src/gallium/drivers/softpipe/libsoftpipe.la \
+		$(GALLIUM_COMMON_LIB_DEPS) \
+		-lnetwork
+
+EXTRA_DIST = \
+		SConscript
+
+TARGET_DRIVERS =
+TARGET_CPPFLAGS =
+TARGET_LIB_DEPS =
+
+include $(top_srcdir)/src/gallium/drivers/softpipe/Automake.inc
+include $(top_srcdir)/src/gallium/drivers/llvmpipe/Automake.inc
+include $(top_srcdir)/src/gallium/drivers/swr/Automake.inc
+
+
+if HAVE_GALLIUM_LLVM
+AM_CPPFLAGS += -DGALLIUM_LLVMPIPE
+
+libswpipe_la_LIBADD += $(LLVM_LIBS) \
+	$(top_builddir)/src/gallium/drivers/llvmpipe/libllvmpipe.la
+libswpipe_la_LDFLAGS += $(LLVM_LDFLAGS)
+endif
+
+if HAVE_GALLIUM_SWR
+AM_CPPFLAGS += -DGALLIUM_SWR
+
+libswpipe_la_LIBADD += \
+        $(top_builddir)/src/gallium/drivers/swr/libmesaswr.la
+endif
diff --git a/src/gallium/targets/haiku-softpipe/SoftwareRenderer.cpp b/src/gallium/targets/haiku-softpipe/SoftwareRenderer.cpp
index 18cb1ac..4e4888a 100644
--- a/src/gallium/targets/haiku-softpipe/SoftwareRenderer.cpp
+++ b/src/gallium/targets/haiku-softpipe/SoftwareRenderer.cpp
@@ -33,6 +33,8 @@
 
 extern const char* color_space_name(color_space space);
 
+#undef _EXPORT
+#define _EXPORT __attribute__((__visibility__("default")))
 
 extern "C" _EXPORT BGLRenderer*
 instantiate_gl_renderer(BGLView *view, ulong opts, BGLDispatcher *dispatcher)
diff --git a/src/gallium/winsys/sw/hgl/Makefile.am b/src/gallium/winsys/sw/hgl/Makefile.am
new file mode 100644
index 0000000..8e5d403
--- /dev/null
+++ b/src/gallium/winsys/sw/hgl/Makefile.am
@@ -0,0 +1,34 @@
+# Copyright © 2017 Haiku, Inc. All rights reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice (including the next
+# paragraph) shall be included in all copies or substantial portions of the
+# Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
+# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+# DEALINGS IN THE SOFTWARE.
+
+include Makefile.sources
+include $(top_srcdir)/src/gallium/Automake.inc
+
+AM_CFLAGS = \
+	-I$(top_srcdir)/src/gallium/state_trackers/hgl \
+	$(GALLIUM_WINSYS_CFLAGS)
+
+noinst_LTLIBRARIES = libswhgl.la
+
+libswhgl_la_SOURCES = $(C_SOURCES)
+
+EXTRA_DIST = SConscript
diff --git a/src/gallium/winsys/sw/hgl/Makefile.sources b/src/gallium/winsys/sw/hgl/Makefile.sources
new file mode 100644
index 0000000..52bfc88
--- /dev/null
+++ b/src/gallium/winsys/sw/hgl/Makefile.sources
@@ -0,0 +1,3 @@
+C_SOURCES := \
+	hgl_sw_winsys.c \
+	hgl_sw_winsys.h
diff --git a/src/hgl/Makefile.am b/src/hgl/Makefile.am
new file mode 100644
index 0000000..f82602a
--- /dev/null
+++ b/src/hgl/Makefile.am
@@ -0,0 +1,50 @@
+# Copyright © 2017 Haiku, Inc. All rights reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice (including the next
+# paragraph) shall be included in all copies or substantial portions of the
+# Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+# IN THE SOFTWARE.
+
+include Makefile.sources
+
+AM_CPPFLAGS = \
+	-I$(top_srcdir)/src \
+	-I$(top_srcdir)/src/mapi \
+	-I$(top_srcdir)/src/mesa \
+	-I$(top_srcdir)/src/mesa/main \
+	-I$(top_srcdir)/include/ \
+	-I$(top_srcdir)/include/HaikuGL \
+	-I/system/develop/headers/private \
+	-I$(top_builddir)/src/mapi \
+	$(DEFINES)
+
+
+lib_LTLIBRARIES = libGL.la
+
+libGL_la_LIBADD = $(top_builddir)/src/mapi/glapi/libglapi.la -lbe
+libGL_la_SOURCES = $(COMMON_SOURCES)
+libGL_la_LDFLAGS = \
+	-no-undefined \
+	-version-number 1:0 \
+	$(BSYMBOLIC) \
+	$(GC_SECTIONS) \
+	$(LD_NO_UNDEFINED)
+
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = gl.pc
+
+EXTRA_DIST =
diff --git a/src/hgl/Makefile.sources b/src/hgl/Makefile.sources
new file mode 100644
index 0000000..5df230b
--- /dev/null
+++ b/src/hgl/Makefile.sources
@@ -0,0 +1,8 @@
+COMMON_SOURCES := \
+    GLView.cpp \
+    GLRenderer.cpp \
+    GLRendererRoster.cpp \
+    GLRendererRoster.h \
+    GLDispatcher.cpp \
+    GLDispatcher.h
+
diff --git a/src/hgl/gl.pc.in b/src/hgl/gl.pc.in
new file mode 100644
index 0000000..7577bae
--- /dev/null
+++ b/src/hgl/gl.pc.in
@@ -0,0 +1,11 @@
+prefix=@prefix@
+exec_prefix=${prefix}
+libdir=@libdir@
+includedir=@includedir@
+
+Name: gl
+Description: Mesa OpenGL library
+Version: @PACKAGE_VERSION@
+Libs: -L${libdir} -lGL
+Libs.private: @GL_PC_LIB_PRIV@
+Cflags: -I${includedir} @GL_PC_CFLAGS@
-- 
2.14.2
diff --git a/hgl.c.older b/hgl.c
index bbc477a..b4666c0 100644
--- a/hgl.c.older
+++ b/hgl.c
@@ -62,8 +62,9 @@ hgl_st_framebuffer_flush_front(struct st_context_iface *stctxi,
 	CALLED();
 
 	//struct hgl_context* context = hgl_st_context(stctxi);
-	//struct hgl_buffer* buffer = hgl_st_context(stfbi);
-
+	struct hgl_buffer* buffer = hgl_st_framebuffer(stfbi);
+	//buffer->surface
+	
 	#if 0
 	struct stw_st_framebuffer *stwfb = stw_st_framebuffer(stfb);
 	mtx_lock(&stwfb->fb->mutex);
@@ -281,7 +282,7 @@ hgl_create_st_manager(struct hgl_context* context)
 	//manager->display = dpy;
 	manager->screen = context->screen;
 	manager->get_param = hgl_st_manager_get_param;
-
+	manager->st_manager_private = (void *)context;
 	return manager;
 }
 
