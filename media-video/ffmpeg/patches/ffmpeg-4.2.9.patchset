From 0a4352f3865e4a6f0d1d6d8f5433dab93345cdeb Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Wed, 7 Aug 2019 16:21:12 +0300
Subject: disable ebx on x86.


diff --git a/configure b/configure
index 5ee289f..1a6dedb 100755
--- a/configure
+++ b/configure
@@ -6923,6 +6923,7 @@ case $target_os in
 haiku)
     disable memalign
     disable posix_memalign
+    enabled x86_32 && enabled shared && disable ebx_available
     ;;
 *-dos|freedos|opendos)
     if test_cpp_condition sys/version.h "defined(__DJGPP__) && __DJGPP__ == 2 && __DJGPP_MINOR__ == 5"; then
-- 
2.42.1


From e8f7eff2e3bf440bda829adeb033c316b15a5ce7 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@pulkomandy.tk>
Date: Wed, 7 Aug 2019 16:21:32 +0300
Subject: Re-enable memalign for Haiku

This had been disabled in 2011:
https://lists.ffmpeg.org/pipermail/ffmpeg-cvslog/2011-June/038362.html

If there are still problems with it we should rather fix them on Haiku
side.

diff --git a/configure b/configure
index 1a6dedb..c9d5f43 100755
--- a/configure
+++ b/configure
@@ -6921,8 +6921,6 @@ enabled avresample && warn "Building with deprecated library libavresample"
 
 case $target_os in
 haiku)
-    disable memalign
-    disable posix_memalign
     enabled x86_32 && enabled shared && disable ebx_available
     ;;
 *-dos|freedos|opendos)
-- 
2.42.1


From 2c347569d84689cea4460e19d388ca1c1ac5b6a3 Mon Sep 17 00:00:00 2001
From: Remi Denis-Courmont <remi@remlab.net>
Date: Sun, 16 Jul 2023 07:18:02 +0000
Subject: Fixes assembling with binutils as >= 2.41


diff --git a/libavcodec/x86/mathops.h b/libavcodec/x86/mathops.h
index 6298f5e..ca7e2df 100644
--- a/libavcodec/x86/mathops.h
+++ b/libavcodec/x86/mathops.h
@@ -35,12 +35,20 @@
 static av_always_inline av_const int MULL(int a, int b, unsigned shift)
 {
     int rt, dummy;
+    if (__builtin_constant_p(shift))
     __asm__ (
         "imull %3               \n\t"
         "shrdl %4, %%edx, %%eax \n\t"
         :"=a"(rt), "=d"(dummy)
-        :"a"(a), "rm"(b), "ci"((uint8_t)shift)
+        :"a"(a), "rm"(b), "i"(shift & 0x1F)
     );
+    else
+        __asm__ (
+            "imull %3               \n\t"
+            "shrdl %4, %%edx, %%eax \n\t"
+            :"=a"(rt), "=d"(dummy)
+            :"a"(a), "rm"(b), "c"((uint8_t)shift)
+        );
     return rt;
 }
 
@@ -113,19 +121,31 @@ __asm__ volatile(\
 // avoid +32 for shift optimization (gcc should do that ...)
 #define NEG_SSR32 NEG_SSR32
 static inline  int32_t NEG_SSR32( int32_t a, int8_t s){
+    if (__builtin_constant_p(s))
     __asm__ ("sarl %1, %0\n\t"
          : "+r" (a)
-         : "ic" ((uint8_t)(-s))
+         : "i" (-s & 0x1F)
     );
+    else
+        __asm__ ("sarl %1, %0\n\t"
+               : "+r" (a)
+               : "c" ((uint8_t)(-s))
+        );
     return a;
 }
 
 #define NEG_USR32 NEG_USR32
 static inline uint32_t NEG_USR32(uint32_t a, int8_t s){
+    if (__builtin_constant_p(s))
     __asm__ ("shrl %1, %0\n\t"
          : "+r" (a)
-         : "ic" ((uint8_t)(-s))
+         : "i" (-s & 0x1F)
     );
+    else
+        __asm__ ("shrl %1, %0\n\t"
+               : "+r" (a)
+               : "c" ((uint8_t)(-s))
+        );
     return a;
 }
 
-- 
2.42.1

