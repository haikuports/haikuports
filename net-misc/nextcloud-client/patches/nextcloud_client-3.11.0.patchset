From 81c05fcbf37372d330975f1bcc37db5fa53490fc Mon Sep 17 00:00:00 2001
From: Daniel Weber <weberd@outlook.de>
Date: Wed, 24 Jan 2024 22:39:29 +0100
Subject: Initial patch, based on the owncloud one


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9d65f50..dc3b84a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -206,7 +206,7 @@ if(BUILD_CLIENT)
         find_package(Sparkle)
     endif()
 
-    if(UNIX AND NOT APPLE)
+    if(UNIX AND NOT APPLE AND NOT HAIKU)
         find_package(Inotify REQUIRED)
     endif()
     find_package(Sphinx)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index bf3ff9a..c7cdeaa 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -68,7 +68,7 @@ if(NOT TOKEN_AUTH_ONLY)
 endif()
 
 # TODO: Mingw64 7.3 might also need to be excluded here as it seems to not automatically link libssp
-if(NOT MSVC)
+if(NOT MSVC AND NOT HAIKU)
   if(NOT (CMAKE_SYSTEM_PROCESSOR MATCHES "^(alpha|parisc|hppa)") AND NOT CMAKE_CROSSCOMPILING)
     if((CMAKE_CXX_COMPILER_ID MATCHES "GNU") AND (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9))
       set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector --param=ssp-buffer-size=4")
diff --git a/src/common/utility.cpp b/src/common/utility.cpp
index 607bb04..4be8c18 100644
--- a/src/common/utility.cpp
+++ b/src/common/utility.cpp
@@ -46,6 +46,12 @@
 #include <unistd.h>
 #endif
 
+#ifdef Q_OS_HAIKU
+#include <sys/statvfs.h>
+#include <sys/types.h>
+#include <unistd.h>
+#endif
+
 #include <cmath>
 #include <cstdarg>
 #include <cstring>
@@ -169,6 +175,8 @@ static QLatin1String platform()
     return QLatin1String("DragonFlyBSD");
 #elif defined(Q_OS_FREEBSD) || defined(Q_OS_FREEBSD_KERNEL)
     return QLatin1String("FreeBSD");
+#elif defined(Q_OS_HAIKU)
+    return QLatin1String("Haiku");
 #elif defined(Q_OS_NETBSD)
     return QLatin1String("NetBSD");
 #elif defined(Q_OS_OPENBSD)
@@ -222,7 +230,7 @@ void Utility::setLaunchOnStartup(const QString &appName, const QString &guiName,
 
 qint64 Utility::freeDiskSpace(const QString &path)
 {
-#if defined(Q_OS_MAC) || defined(Q_OS_FREEBSD) || defined(Q_OS_FREEBSD_KERNEL) || defined(Q_OS_NETBSD) || defined(Q_OS_OPENBSD)
+#if defined(Q_OS_MAC) || defined(Q_OS_FREEBSD) || defined(Q_OS_FREEBSD_KERNEL) || defined(Q_OS_NETBSD) || defined(Q_OS_OPENBSD) || defined(Q_OS_HAIKU)
     struct statvfs stat;
     if (statvfs(path.toLocal8Bit().data(), &stat) == 0) {
         return (qint64)stat.f_bavail * stat.f_frsize;
diff --git a/src/common/utility.h b/src/common/utility.h
index 9f5f71a..8a23adf 100644
--- a/src/common/utility.h
+++ b/src/common/utility.h
@@ -134,6 +134,7 @@ namespace Utility {
     inline bool isUnix();
     inline bool isLinux(); // use with care
     inline bool isBSD(); // use with care, does not match OS X
+    inline bool isHaiku();
 
     OCSYNC_EXPORT QString platformName();
     // crash helper for --debug
@@ -340,6 +341,14 @@ inline bool Utility::isBSD()
     return false;
 #endif
 }
+inline bool Utility::isHaiku()
+{
+#if defined(Q_OS_HAIKU)
+    return true;
+#else
+    return false;
+#endif
+}
 
 }
 #endif // UTILITY_H
diff --git a/src/csync/CMakeLists.txt b/src/csync/CMakeLists.txt
index 382eab2..455e820 100644
--- a/src/csync/CMakeLists.txt
+++ b/src/csync/CMakeLists.txt
@@ -72,7 +72,7 @@ generate_export_header(nextcloud_csync
 target_link_libraries(nextcloud_csync
   PUBLIC
   ${CSYNC_REQUIRED_LIBRARIES}
-  Qt5::Core Qt5::Concurrent
+  Qt5::Core Qt5::Concurrent be
 )
 
 if(ZLIB_FOUND)
diff --git a/src/csync/std/c_private.h b/src/csync/std/c_private.h
index 8307859..0ddcaa8 100644
--- a/src/csync/std/c_private.h
+++ b/src/csync/std/c_private.h
@@ -85,7 +85,7 @@ using csync_stat_t = struct stat;
 #endif
 
 #ifndef HAVE_LSTAT
-#define lstat _stat
+#define lstat stat
 #endif
 
 /* tchar definitions for clean win32 filenames */
diff --git a/src/gui/CMakeLists.txt b/src/gui/CMakeLists.txt
index 1968683..1361722 100644
--- a/src/gui/CMakeLists.txt
+++ b/src/gui/CMakeLists.txt
@@ -311,7 +311,7 @@ IF( APPLE )
    endif()
 ENDIF()
 
-IF( NOT WIN32 AND NOT APPLE )
+IF( NOT WIN32 AND NOT APPLE  AND NOT HAIKU)
 set(client_SRCS ${client_SRCS} folderwatcher_linux.cpp)
 ENDIF()
 IF( WIN32 )
@@ -320,6 +320,9 @@ ENDIF()
 IF( APPLE )
 list(APPEND client_SRCS folderwatcher_mac.cpp)
 ENDIF()
+IF( HAIKU )
+list(APPEND client_SRCS folderwatcher_haiku.cpp)
+ENDIF()
 
 set(3rdparty_SRC
     ../3rdparty/QProgressIndicator/QProgressIndicator.h
@@ -537,6 +540,7 @@ target_link_libraries(nextcloudCore
   Qt5::Quick
   Qt5::QuickControls2
   KF5::Archive
+  be
   )
 
 add_subdirectory(socketapi)
diff --git a/src/gui/folderwatcher.cpp b/src/gui/folderwatcher.cpp
index 0743646..1a3bb2d 100644
--- a/src/gui/folderwatcher.cpp
+++ b/src/gui/folderwatcher.cpp
@@ -25,6 +25,8 @@
 #include "folderwatcher_mac.h"
 #elif defined(Q_OS_UNIX)
 #include "folderwatcher_linux.h"
+#elif defined(Q_OS_HAIKU)
+#include "folderwatcher_haiku.h"
 #endif
 
 #include "folder.h"
diff --git a/src/gui/folderwatcher_haiku.cpp b/src/gui/folderwatcher_haiku.cpp
new file mode 100644
index 0000000..21e6fe4
--- /dev/null
+++ b/src/gui/folderwatcher_haiku.cpp
@@ -0,0 +1,144 @@
+/*
+ * Copyright (C) by François Revol <revol@free.fr>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
+ * for more details.
+ */
+#include "config.h"
+
+#include "folder.h"
+#include "folderwatcher.h"
+#include "folderwatcher_haiku.h"
+
+
+#include <cerrno>
+#include <QObject>
+#include <QStringList>
+
+#include <Application.h>
+#include <Path.h>
+#include <String.h>
+#include <private/storage/PathMonitor.h>
+
+
+
+namespace OCC {
+
+
+void WatcherHandler::MessageReceived(BMessage* message)
+{
+    qCDebug(lcFolderWatcher) << "WatcherHandler::MessageReceived()" << message->what;
+    if (message->what != B_PATH_MONITOR) {
+        BHandler::MessageReceived(message);
+        return;
+    }
+
+    int32 opcode;
+    if (message->FindInt32("opcode", &opcode) != B_OK)
+        return;
+
+    const char *path = NULL;
+    if (message->FindString("path", &path) != B_OK)
+        return;
+
+    // get the filename
+    // sometimes we have it in the message, but not always
+    BPath p(path);
+    BString fileName(p.Leaf());
+    if (fileName.StartsWith("._sync_")
+        || fileName.StartsWith(".csync_journal.db")
+        || fileName.StartsWith(".nextloudsync.log")
+        || fileName.StartsWith(".sync_")) {
+        return;
+    }
+
+    int32 fields;
+    QStringList paths;
+
+    switch (opcode) {
+        case B_ENTRY_MOVED:
+        {
+            const char *from = NULL;
+            if (message->FindString("from path", &from) != B_OK)
+                return;
+            QString qFrom = QString::fromUtf8(from);
+            paths.append(qFrom);
+            break;
+        }
+        case B_ENTRY_CREATED:
+        case B_ENTRY_REMOVED:
+            break;
+        case B_STAT_CHANGED:
+            if (message->FindInt32("fields", &fields) != B_OK)
+                return;
+            // we're only interested in mtime
+            // and content change... which should always change mtime though
+            // just to be sure, check size changes as well
+            if (fields & (B_STAT_MODIFICATION_TIME | B_STAT_SIZE))
+                break;
+            return;
+        case B_ATTR_CHANGED:
+            // TODO: it is just unacceptable to not handle xattrs on Haiku!
+            // but it must be done properly,
+            // cf. http://dcevents.dublincore.org/IntConf/dc-2011/paper/view/53
+        default:
+            // discard
+            return;
+   }
+
+    //message->PrintToStream();
+
+    QString qPath = QString::fromUtf8(path);
+    paths.append(qPath);
+    emit changed(paths);
+}
+
+
+FolderWatcherPrivate::FolderWatcherPrivate(FolderWatcher *p, const QString &path)
+    : _parent(p)
+    , _folder(path)
+    , _handler(new WatcherHandler)
+{
+    this->startWatching();
+}
+
+FolderWatcherPrivate::~FolderWatcherPrivate()
+{
+    BPrivate::BPathMonitor::StopWatching(BMessenger(_handler));
+    be_app->Lock();
+    be_app->RemoveHandler(_handler);
+    be_app->Unlock();
+    delete _handler;
+}
+
+void FolderWatcherPrivate::startWatching()
+{
+    qCDebug(lcFolderWatcher) << "FolderWatcherPrivate::startWatching()" << _folder;
+
+    // it needs to be attached to a BLooper, which be_app happens to be.
+    be_app->Lock();
+    be_app->AddHandler(_handler);
+    be_app->Unlock();
+
+    connect(_handler, SIGNAL(changed(const QStringList &)),
+        _parent, SLOT(changeDetected(const QStringList &)));
+    connect(_handler, SIGNAL(lostChanges()),
+        _parent, SIGNAL(lostChanges()));
+
+    BMessenger messenger(_handler);
+    uint32 flags = B_WATCH_RECURSIVELY | B_WATCH_NAME | B_WATCH_STAT;
+    status_t err;
+    err = BPrivate::BPathMonitor::StartWatching(_folder.toUtf8().constData(), flags, messenger);
+    if (err != B_OK)
+        qCWarning(lcFolderWatcher) << "BPathMonitor::StartWatching failed: " << strerror(err);
+}
+
+
+} // ns mirall
diff --git a/src/gui/folderwatcher_haiku.h b/src/gui/folderwatcher_haiku.h
new file mode 100644
index 0000000..6bf7091
--- /dev/null
+++ b/src/gui/folderwatcher_haiku.h
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) by François Revol <revol@free.fr>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
+ * for more details.
+*/
+
+#define FOLDERWATCHER_HAIKU_H
+
+#include <QObject>
+#include <QString>
+
+#include <Handler.h>
+
+namespace OCC {
+
+/**
+ * @brief The WatcherHandler class
+ * @ingroup gui
+ */
+class WatcherHandler : public QObject, public BHandler {
+    Q_OBJECT
+public:
+    WatcherHandler() : QObject(), BHandler("FolderWatcher") {}
+    virtual ~WatcherHandler() {}
+    virtual void MessageReceived(BMessage* message);
+
+signals:
+    void changed(const QStringList &paths);
+    void lostChanges();
+
+private:
+    QString _path;
+};
+
+/**
+ * @brief Haiku API implementation of FolderWatcher
+ * @ingroup gui
+ */
+class FolderWatcherPrivate : public QObject
+{
+    Q_OBJECT
+public:
+    FolderWatcherPrivate(FolderWatcher *p, const QString &path);
+    ~FolderWatcherPrivate();
+
+    void addPath(const QString &) {}
+    void removePath(const QString &) {}
+
+    void startWatching();
+
+    /// On Haiku the watcher is ready when the ctor finished.
+    bool _ready = 1;
+
+private:
+    FolderWatcher *_parent;
+
+    QString _folder;
+
+    WatcherHandler *_handler;
+};
+}
diff --git a/src/gui/socketapi/socketapi.cpp b/src/gui/socketapi/socketapi.cpp
index e2e3c1a..ce1ae18 100644
--- a/src/gui/socketapi/socketapi.cpp
+++ b/src/gui/socketapi/socketapi.cpp
@@ -265,7 +265,7 @@ SocketApi::SocketApi(QObject *parent)
         _system(QStringLiteral("pluginkit"), { QStringLiteral("-e"), QStringLiteral("use"), QStringLiteral("-i"), QStringLiteral(APPLICATION_REV_DOMAIN ".FinderSyncExt") });
 
 #endif
-    } else if (Utility::isLinux() || Utility::isBSD()) {
+    } else if (Utility::isLinux() || Utility::isBSD() || Utility::isHaiku()) {
         QString runtimeDir;
         runtimeDir = QStandardPaths::writableLocation(QStandardPaths::RuntimeLocation);
         socketPath = runtimeDir + "/" + Theme::instance()->appName() + "/socket";
diff --git a/src/libsync/filesystem.cpp b/src/libsync/filesystem.cpp
index 7c58c7b..41c0dd4 100644
--- a/src/libsync/filesystem.cpp
+++ b/src/libsync/filesystem.cpp
@@ -20,6 +20,7 @@
 #include <QDir>
 #include <QDirIterator>
 #include <QCoreApplication>
+#include <sys/time.h>
 
 #include "csync.h"
 #include "vio/csync_vio_local.h"
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 44396f2..63681d2 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -93,7 +93,7 @@ else()
     nextcloud_build_test(E2eFileTransfer)
 endif()
 
-if( UNIX AND NOT APPLE )
+if( UNIX AND NOT APPLE AND NOT HAIKU )
     nextcloud_add_test(InotifyWatcher)
 endif(UNIX AND NOT APPLE)
 
-- 
2.42.1


From 71b74e69d2bd63cdb2c17bb24ca48a514891e0be Mon Sep 17 00:00:00 2001
From: Daniel Weber <weberd@outlook.de>
Date: Sun, 28 Jan 2024 12:20:50 +0100
Subject: ugly hack


diff --git a/src/libsync/filesystem.cpp b/src/libsync/filesystem.cpp
index 41c0dd4..abc9e20 100644
--- a/src/libsync/filesystem.cpp
+++ b/src/libsync/filesystem.cpp
@@ -75,7 +75,7 @@ bool FileSystem::setModTime(const QString &filename, time_t modTime)
     struct timeval times[2];
     times[0].tv_sec = times[1].tv_sec = modTime;
     times[0].tv_usec = times[1].tv_usec = 0;
-    int rc = c_utimes(filename, times);
+    int rc = -1; //c_utimes(filename, times);
     if (rc != 0) {
         qCWarning(lcFileSystem) << "Error setting mtime for" << filename
                                 << "failed: rc" << rc << ", errno:" << errno;
-- 
2.42.1


From 4da204287ac8fe01a01174e03bb61566a1696da3 Mon Sep 17 00:00:00 2001
From: Daniel Weber <weberd@outlook.de>
Date: Sun, 28 Jan 2024 12:33:02 +0100
Subject: Add utility_haiku, forgotten in previous patch


diff --git a/src/common/utility.cpp b/src/common/utility.cpp
index 4be8c18..581cb59 100644
--- a/src/common/utility.cpp
+++ b/src/common/utility.cpp
@@ -60,6 +60,8 @@
 #include "utility_win.cpp"
 #elif defined(Q_OS_MAC)
 #include "utility_mac.cpp"
+#elif defined(Q_OS_HAIKU)
+#include "utility_haiku.cpp"
 #else
 #include "utility_unix.cpp"
 #endif
diff --git a/src/common/utility_haiku.cpp b/src/common/utility_haiku.cpp
new file mode 100644
index 0000000..ab48654
--- /dev/null
+++ b/src/common/utility_haiku.cpp
@@ -0,0 +1,112 @@
+/*
+ * Copyright (C) by Klaas Freitag <freitag@owncloud.com>
+ * Copyright (C) by Daniel Molkentin <danimo@owncloud.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include <QDir>
+#include <QFile>
+#include <QString>
+
+#include <FindDirectory.h>
+#include <Path.h>
+
+namespace OCC {
+
+static void setupFavLink_private(const QString &folder)
+{
+	Q_UNUSED(folder);
+    // Haiku doesn't really have that concept of bookmarks on folders
+}
+
+static void removeFavLink_private(const QString &folder)
+{
+	Q_UNUSED(folder);
+    // Haiku doesn't really have that concept of bookmarks on folders
+}
+
+// returns the autostart directory the Haiku way
+// should probably use launch_daemon service directly though
+// instead of the old way
+QString getUserAutostartDir_private()
+{
+    BPath path;
+    find_directory(B_USER_SETTINGS_DIRECTORY, &path);
+    QString config = QString::fromUtf8(path.Path());
+    config += QLatin1String("/boot/launch/");
+    return config;
+}
+
+bool hasLaunchOnStartup_private(const QString &appName)
+{
+    QString startupFileLocation = getUserAutostartDir_private() + appName;
+    return QFile::exists(startupFileLocation);
+}
+
+void setLaunchOnStartup_private(const QString &appName, const QString &guiName, bool enable)
+{
+	Q_UNUSED(guiName);
+    QString userAutoStartPath = getUserAutostartDir_private();
+    QString startupFileLocation = userAutoStartPath + appName;
+    if (enable) {
+        if (!QDir().exists(userAutoStartPath) && !QDir().mkpath(userAutoStartPath)) {
+            qCWarning(lcUtility) << "Could not create autostart folder" << userAutoStartPath;
+            return;
+        }
+        if (!QFile::link(QCoreApplication::applicationFilePath(), startupFileLocation)) {
+            qCWarning(lcUtility) << "Could not write autostart symlink" << startupFileLocation;
+            return;
+        }
+    } else {
+        if (!QFile::remove(startupFileLocation)) {
+            qCWarning(lcUtility) << "Could not remove autostart symlink";
+        }
+    }
+}
+
+static inline bool hasDarkSystray_private()
+{
+    return true;
+}
+
+QString Utility::getCurrentUserName()
+{
+    return {};
+}
+
+void Utility::registerUriHandlerForLocalEditing()
+{
+    const auto appImagePath = qEnvironmentVariable("APPIMAGE");
+    const auto runningInsideAppImage = !appImagePath.isNull() && QFile::exists(appImagePath);
+
+    if (!runningInsideAppImage) {
+        // only register x-scheme-handler if running inside appImage
+        return;
+    }
+
+    // mirall.desktop.in must have an x-scheme-handler mime type specified
+    const QString desktopFileName = QLatin1String(LINUX_APPLICATION_ID) + QLatin1String(".desktop");
+    QProcess process;
+    const QStringList args = {
+        QLatin1String("default"),
+        desktopFileName,
+        QStringLiteral("x-scheme-handler/%1").arg(QStringLiteral(APPLICATION_URI_HANDLER_SCHEME))
+    };
+    process.start(QStringLiteral("xdg-mime"), args, QIODevice::ReadOnly);
+    process.waitForFinished();
+}
+
+} // namespace OCC
-- 
2.42.1


From d05303f244ce8459299ff5c3d054dbe270f5664c Mon Sep 17 00:00:00 2001
From: Daniel Weber <weberd@outlook.de>
Date: Wed, 31 Jan 2024 10:24:25 +0100
Subject: Fix Folderwatcher Inotify notification


diff --git a/src/gui/folderwatcher.cpp b/src/gui/folderwatcher.cpp
index 1a3bb2d..889153f 100644
--- a/src/gui/folderwatcher.cpp
+++ b/src/gui/folderwatcher.cpp
@@ -130,6 +130,10 @@ void FolderWatcher::startNotificatonTest(const QString &path)
     return;
 #endif
 
+#ifdef Q_OS_HAIKU
+    return;
+#endif
+
     Q_ASSERT(_testNotificationPath.isEmpty());
     _testNotificationPath = path;
 
diff --git a/test/testfolderwatcher.cpp b/test/testfolderwatcher.cpp
index d57358d..ccf19b6 100644
--- a/test/testfolderwatcher.cpp
+++ b/test/testfolderwatcher.cpp
@@ -264,7 +264,7 @@ private slots:
     }
 };
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_HAIKU
     QTEST_MAIN(TestFolderWatcher)
 #else
     QTEST_GUILESS_MAIN(TestFolderWatcher)
-- 
2.42.1


From d6f0fb13bd085c0fade7125a090f03335aef1f7f Mon Sep 17 00:00:00 2001
From: Daniel Weber <weberd@outlook.de>
Date: Wed, 31 Jan 2024 10:42:24 +0100
Subject: Fix MainDialogWindow being blank


diff --git a/src/gui/tray/Window.qml b/src/gui/tray/Window.qml
index ce024c0..2898619 100644
--- a/src/gui/tray/Window.qml
+++ b/src/gui/tray/Window.qml
@@ -80,7 +80,7 @@ ApplicationWindow {
     }
 
     background: Rectangle {
-        radius: Systray.useNormalWindow ? 0.0 : Style.trayWindowRadius
+        // radius: Systray.useNormalWindow ? 0.0 : Style.trayWindowRadius
         border.width: Style.trayWindowBorderWidth
         border.color: palette.dark
         color: palette.window
@@ -132,7 +132,7 @@ ApplicationWindow {
         }
     }
 
-    OpacityMask {
+/*    OpacityMask {
         anchors.fill: parent
         anchors.margins: Style.trayWindowBorderWidth
         source: ShaderEffectSource {
@@ -145,7 +145,7 @@ ApplicationWindow {
             radius: Systray.useNormalWindow ? 0.0 : Style.trayWindowRadius
         }
     }
-
+*/
     Drawer {
         id: userStatusDrawer
         width: parent.width
-- 
2.42.1

