From 04223bb7bc363556df0acd6c48163e2b7ade7f98 Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Mon, 15 Oct 2018 19:45:43 +1000
Subject: Add Haiku support


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2986ce8..92e27c9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -60,6 +60,7 @@ if("${CMAKE_SYSTEM_NAME}" MATCHES "Windows")
     set(PLATFORM_GNU     0)
     set(PLATFORM_LINUX   0)
     set(PLATFORM_MACOSX  0)
+    set(PLATFORM_HAIKU   0)
     set(PLATFORM_OTHER   0)
 
     # Platform-dependent implementation of system.h
@@ -71,17 +72,31 @@ elseif("${CMAKE_SYSTEM_NAME}" MATCHES "Linux")
     set(PLATFORM_LINUX   1)
     set(PLATFORM_GNU     1)
     set(PLATFORM_MACOSX  0)
-    set(PLATFORM_OTHER   0)
+    set(PLATFORM_HAIKU   0)
+    set(PLATFORM_OTHER   0)    
 
     # Platform-dependent implementation of system.h
     set(SYSTEM_CPP_MODULE "system_linux.cpp")
     set(SYSTEM_H_MODULE "system_linux.h")
+elseif("${CMAKE_SYSTEM_NAME}" MATCHES "Haiku")
+    message(STATUS "Build for Haiku")
+    set(PLATFORM_WINDOWS 0)
+    set(PLATFORM_LINUX   0)
+    set(PLATFORM_GNU     0)
+    set(PLATFORM_MACOSX  0)
+    set(PLATFORM_HAIKU   1)
+    set(PLATFORM_OTHER   0)    
+
+    # Platform-dependent implementation of system.h
+    set(SYSTEM_CPP_MODULE "system_haiku.cpp")
+    set(SYSTEM_H_MODULE "system_haiku.h")
 elseif("${CMAKE_SYSTEM_NAME}" MATCHES "kFreeBSD" OR "${CMAKE_SYSTEM_NAME}" STREQUAL "GNU")
     message(STATUS "Build for kFreeBSD system")
     set(PLATFORM_WINDOWS 0)
     set(PLATFORM_LINUX   0)
     set(PLATFORM_GNU     1)
     set(PLATFORM_MACOSX  0)
+    set(PLATFORM_HAIKU   0)
     set(PLATFORM_OTHER   0)
 
     # Platform-dependent implementation of system.h
@@ -93,6 +108,7 @@ elseif("${CMAKE_SYSTEM_NAME}" MATCHES "Darwin")
     set(PLATFORM_LINUX   0)
     set(PLATFORM_GNU     0)
     set(PLATFORM_MACOSX  1)
+    set(PLATFORM_HAIKU   0)
     set(PLATFORM_OTHER   0)
 
     # Platform-dependent implementation of system.h
@@ -106,6 +122,7 @@ else()
     set(PLATFORM_LINUX   0)
     set(PLATFORM_GNU     0)
     set(PLATFORM_MACOSX  0)
+    set(PLATFORM_HAIKU   0)
     set(PLATFORM_OTHER   1)
 
     # Platform-dependent implementation of system.h
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index e085750..3659ca1 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -54,6 +54,8 @@ elseif(PLATFORM_GNU)
 elseif(PLATFORM_LINUX)
     # for clock_gettime
     set(PLATFORM_LIBS "-lrt")
+elseif(PLATFORM_HAIKU)
+    set(PLATFORM_LIBS "-lbe -lintl")
 elseif(PLATFORM_MACOSX)
     find_library(LIBINTL_LIBRARY NAMES intl libintl)
     find_path(LIBINTL_INCLUDE_PATH NAMES libintl.h)
diff --git a/src/app/signal_handlers.cpp b/src/app/signal_handlers.cpp
index b08a0a2..00953ed 100644
--- a/src/app/signal_handlers.cpp
+++ b/src/app/signal_handlers.cpp
@@ -32,6 +32,12 @@
 #include <sstream>
 #include <iostream>
 
+#ifdef __HAIKU__
+#include <unistd.h>
+#include <sys/types.h>
+#include <signal.h>
+#endif
+
 CSystemUtils* CSignalHandlers::m_systemUtils = nullptr;
 
 void CSignalHandlers::Init(CSystemUtils* systemUtils)
@@ -181,6 +187,9 @@ void CSignalHandlers::ReportError(const std::string& errorMessage)
             m_systemUtils->SystemDialog(SDT_INFO, "Try to save?", "Saving finished.\nPlease restart the game now");
         }
     }
-
+#ifdef __HAIKU__
+	kill (::getpid(), SIGKILL);
+#else
     exit(1);
+#endif
 }
diff --git a/src/common/config.h.cmake b/src/common/config.h.cmake
index b476772..7d00d2a 100644
--- a/src/common/config.h.cmake
+++ b/src/common/config.h.cmake
@@ -5,6 +5,7 @@
 #cmakedefine PLATFORM_LINUX @PLATFORM_LINUX@
 #cmakedefine PLATFORM_GNU @PLATFORM_GNU@
 #cmakedefine PLATFORM_MACOSX @PLATFORM_MACOSX@
+#cmakedefine PLATFORM_HAIKU @PLATFORM_HAIKU@
 #cmakedefine PLATFORM_OTHER @PLATFORM_OTHER@
 
 #ifdef PLATFORM_MACOSX
diff --git a/src/common/system/system.cpp b/src/common/system/system.cpp
index ff4ad7c..bf1138b 100644
--- a/src/common/system/system.cpp
+++ b/src/common/system/system.cpp
@@ -30,6 +30,8 @@
     #include "common/system/system_linux.h"
 #elif defined(PLATFORM_MACOSX)
     #include "common/system/system_macosx.h"
+#elif defined(PLATFORM_HAIKU)
+    #include "common/system/system_haiku.h"    
 #else
     #include "common/system/system_other.h"
 #endif
@@ -48,6 +50,8 @@ std::unique_ptr<CSystemUtils> CSystemUtils::Create()
     instance = MakeUnique<CSystemUtilsLinux>();
 #elif defined(PLATFORM_MACOSX)
     instance = MakeUnique<CSystemUtilsMacOSX>();
+#elif defined(PLATFORM_HAIKU)
+    instance = MakeUnique<CSystemUtilsHaiku>();
 #else
     instance = MakeUnique<CSystemUtilsOther>();
 #endif
diff --git a/src/common/system/system_haiku.cpp b/src/common/system/system_haiku.cpp
new file mode 100644
index 0000000..538aa94
--- /dev/null
+++ b/src/common/system/system_haiku.cpp
@@ -0,0 +1,83 @@
+#include "common/system/system_haiku.h"
+#include "common/logger.h"
+
+#include <stdlib.h>
+#include <unistd.h>
+#include <time.h>
+
+#include <FindDirectory.h>
+
+void CSystemUtilsHaiku::Init()
+{
+}
+
+SystemDialogResult CSystemUtilsHaiku::SystemDialog(SystemDialogType type, const std::string& title, const std::string& message)
+{
+    std::string options = "";
+    std::string buttons = "";
+
+    switch (type) {
+        case SDT_INFO:
+        default:
+            options = "--info";
+            break;
+        case SDT_WARNING:
+            options = "--warning";
+            break;
+        case SDT_ERROR:
+            options = "--stop";
+            break;
+        case SDT_YES_NO:
+            buttons = "Yes No";
+            break;
+        case SDT_OK_CANCEL:
+            buttons = "OK Cancel";
+            break;
+    }
+
+    std::string command = "alert " + options + " \"" + message + "\" " + buttons;
+    int code = system(command.c_str());
+
+    SystemDialogResult result = SDR_OK;
+    switch (type)
+    {
+        case SDT_YES_NO:
+            result = (code == 0) ? SDR_YES : SDR_NO;
+            break;
+        case SDT_OK_CANCEL:
+            result = (code == 0) ? SDR_OK : SDR_CANCEL;
+            break;
+        default:
+            break;
+    }
+
+    return result;
+}
+
+void CSystemUtilsHaiku::GetCurrentTimeStamp(SystemTimeStamp *stamp)
+{
+    stamp->sdlTicks = SDL_GetTicks();
+}
+
+long long CSystemUtilsHaiku::TimeStampExactDiff(SystemTimeStamp *before, SystemTimeStamp *after)
+{
+	return (after->sdlTicks - before->sdlTicks) * 1000000ll;
+}
+
+std::string CSystemUtilsHaiku::GetSaveDir()
+{
+    static char settingsDir[PATH_MAX] = "";
+	if (find_directory(B_USER_SETTINGS_DIRECTORY, -1, false, settingsDir, sizeof(settingsDir)) != B_OK)
+		sprintf(settingsDir, "/boot/home/config/settings");
+
+	std::string savegameDir = std::string (settingsDir) + "/colobot";
+
+    GetLogger()->Trace("Saved game files are going to %s\n", savegameDir);
+
+    return savegameDir;
+}
+
+void CSystemUtilsHaiku::Usleep(int usec)
+{
+    SDL_Delay(usec / 1000);
+}
diff --git a/src/common/system/system_haiku.h b/src/common/system/system_haiku.h
new file mode 100644
index 0000000..81168d0
--- /dev/null
+++ b/src/common/system/system_haiku.h
@@ -0,0 +1,28 @@
+#include "common/system/system.h"
+
+#include <SDL.h>
+#include <sys/time.h>
+#include <iostream>
+
+//@colobot-lint-exclude UndefinedFunctionRule
+
+struct SystemTimeStamp
+{
+    Uint32 sdlTicks;
+    SystemTimeStamp() {
+        sdlTicks = 0;
+    }
+};
+
+class CSystemUtilsHaiku : public CSystemUtils
+{
+public:
+    void Init() override;
+    SystemDialogResult SystemDialog(SystemDialogType type, const std::string& title, const std::string& message) override;
+    void GetCurrentTimeStamp(SystemTimeStamp *stamp) override;
+    long long TimeStampExactDiff(SystemTimeStamp *before, SystemTimeStamp *after) override;
+    std::string GetSaveDir() override;
+    void Usleep(int usec) override;
+};
+
+//@end-colobot-lint-exclude
-- 
2.19.1

