From e548da4082671534856a6b513eb7c9d00ee6689f Mon Sep 17 00:00:00 2001
From: Gabriele Baldassarre <gabriele@gabrielebaldassarre.com>
Date: Mon, 22 Oct 2018 23:00:12 +0200
Subject: initial set of defines for Haiku


diff --git a/src/os/strings.h b/src/os/strings.h
index daac831..bdea121 100644
--- a/src/os/strings.h
+++ b/src/os/strings.h
@@ -84,13 +84,13 @@
 
 	#if !defined(__MINGW32__) && defined(__GNUC__) && !defined(snprintf)
 		/* (v)snprintf is in fact C99, but we like to use it over (v)sprintf for the obvious reasons */
-		#if !defined(__APPLE__) && !defined(TOS) && !defined(__FreeBSD__) && !defined(__DJGPP__)
+		#if !defined(__APPLE__) && !defined(TOS) && !defined(__FreeBSD__) && !defined(__DJGPP__) && !defined(__HAIKU__)
 			extern int snprintf (char *__restrict __s, size_t __maxlen, __const char *__restrict __format, ...) __THROW __attribute__ ((__format__ (__printf__, 3, 4)));
 			extern int vsnprintf (char *__restrict __s, size_t __maxlen, __const char *__restrict __format, va_list __arg) __THROW __attribute__ ((__format__ (__printf__, 3, 0)));
 		#endif /* __APPLE__ */
 	#endif /* __GCC__ */
 	
-	#if !defined(__MINGW32__) && defined(__GNUC__) && !defined(strdup) && !defined(__APPLE__) && !defined(TOS) && !defined(__FreeBSD__) && !defined(__DJGPP__)
+	#if !defined(__MINGW32__) && defined(__GNUC__) && !defined(strdup) && !defined(__APPLE__) && !defined(TOS) && !defined(__FreeBSD__) && !defined(__DJGPP__) && !defined(__HAIKU__)
 		/* strdup is not ANSI-C, but our own implemention would only be slower */
 		extern char *strdup (__const char *__s);
 	#endif /* __GCC__ */
-- 
2.19.1


From 439c5b7b19a5501aaa37c610817f8673323f1f1f Mon Sep 17 00:00:00 2001
From: Gabriele Baldassarre <gabriele@gabrielebaldassarre.com>
Date: Tue, 23 Oct 2018 00:23:24 +0200
Subject: added support for Haiku paths


diff --git a/src/file.c b/src/file.c
index 4d3f4dc..0b08d60 100644
--- a/src/file.c
+++ b/src/file.c
@@ -25,6 +25,10 @@
 #include "config.h"
 #include "inifile.h"
 
+#ifdef __HAIKU__
+#include <StorageDefs.h>
+#endif /* HAIKU */
+
 /* Set DUNE_DATA_DIR at compile time.  e.g. */
 /* #define DUNE_DATA_DIR "/usr/local/share/opendune" */
 
@@ -36,8 +40,13 @@
 #endif
 #endif
 
+#ifdef __HAIKU__
+static char g_dune_data_dir[B_PATH_NAME_LENGTH] = DUNE_DATA_DIR;
+static char g_personal_data_dir[B_PATH_NAME_LENGTH] = ".";
+#else
 static char g_dune_data_dir[1024] = DUNE_DATA_DIR;
 static char g_personal_data_dir[1024] = ".";
+#endif
 
 /* In order to avoid to open/close the same .PAK file multiple time
  * in a row, we cache the last opened PAK file.
diff --git a/src/inifile.c b/src/inifile.c
index d51996a..1600f0e 100644
--- a/src/inifile.c
+++ b/src/inifile.c
@@ -3,6 +3,10 @@
 #ifdef OSX
 #include <CoreFoundation/CoreFoundation.h>
 #endif /* OSX */
+#ifdef __HAIKU__
+#include <FindDirectory.h>
+#include <StorageDefs.h>
+#endif /* HAIKU */
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -40,6 +44,7 @@ bool Load_IniFile(void)
 	   1) %APPDATA%/OpenDUNE (win32)
 	      ~/Library/Application Support/OpenDUNE (Mac OS X)
 	      ~/.config/opendune (Linux)
+	      /B_USER_SETTINGS_DIRECTORY/opendune (Haiku)
 	   2) current directory
 	   3) data/ dir
 	   4) parent of bundle dir (Mac OS X)
@@ -53,13 +58,21 @@ bool Load_IniFile(void)
 		f = fopen(path, "rb");
 	}
 #elif !defined(TOS) && !defined(DOS)  /* _WIN32 */
+	#if defined(__HAIKU__)
+	char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+	#else
 	char path[PATH_MAX];
+	#endif
 	char * homeDir;
 	homeDir = getenv("HOME");
 	if (homeDir != NULL) {
 #if defined(__APPLE__)
 		snprintf(path, sizeof(path), "%s/Library/Application Support/OpenDUNE/opendune.ini", homeDir);
-#else /* __APPLE__ */
+#elif defined(__HAIKU__) /* __APPLE__ */
+		char user_path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+		find_directory(B_USER_SETTINGS_DIRECTORY, 0, true, user_path, sizeof(user_path));
+		snprintf(path, sizeof(path), "%s/opendune/opendune.ini", user_path);
+#else /* __HAIKU__ */
 		snprintf(path, sizeof(path), "%s/.config/opendune/opendune.ini", homeDir);
 #endif /* __APPLE__ */
 		f = fopen(path, "rb");
-- 
2.19.1


From c2e72aa0fe493c08f4fefaf23386833fc1590693 Mon Sep 17 00:00:00 2001
From: Gabriele Baldassarre <gabriele@gabrielebaldassarre.com>
Date: Fri, 26 Oct 2018 01:21:31 +0200
Subject: searching in both B_SYSTEM_SETTINGS_DIR and B_USER_SETTINGS_DIR for
 ini file


diff --git a/src/inifile.c b/src/inifile.c
index 31f19d8..57d2c62 100644
--- a/src/inifile.c
+++ b/src/inifile.c
@@ -6,6 +6,7 @@
 #ifdef __HAIKU__
 #include <FindDirectory.h>
 #include <StorageDefs.h>
+#include <unistd.h>
 #endif /* HAIKU */
 #include <stdio.h>
 #include <stdlib.h>
@@ -44,8 +45,9 @@ bool Load_IniFile(void)
 	   1) %APPDATA%/OpenDUNE (win32)
 	      ~/Library/Application Support/OpenDUNE (Mac OS X)
 	      ~/.config/opendune (Linux)
-	      /B_USER_SETTINGS_DIRECTORY/opendune (Haiku)
-	   2) current directory
+	      B_USER_SETTINGS_DIRECTORY (Haiku)
+	   2) B_SYSTEM_SETTINGS_DIRECTORY (Haiku)
+	      current directory
 	   3) data/ dir
 	   4) parent of bundle dir (Mac OS X)
 	*/
@@ -59,7 +61,8 @@ bool Load_IniFile(void)
 	}
 #elif !defined(TOS) && !defined(DOS)  /* _WIN32 */
 	#if defined(__HAIKU__)
-	char path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
+	char path[B_PATH_NAME_LENGTH];
+	char buffer[B_PATH_NAME_LENGTH];
 	#else
 	char path[PATH_MAX];
 	#endif
@@ -69,15 +72,25 @@ bool Load_IniFile(void)
 #if defined(__APPLE__)
 		snprintf(path, sizeof(path), "%s/Library/Application Support/OpenDUNE/opendune.ini", homeDir);
 #elif defined(__HAIKU__) /* __APPLE__ */
-		char user_path[B_PATH_NAME_LENGTH + B_FILE_NAME_LENGTH];
-		find_directory(B_USER_SETTINGS_DIRECTORY, 0, true, user_path, sizeof(user_path));
-		snprintf(path, sizeof(path), "%s/opendune/opendune.ini", user_path);
+		if(find_directory(B_USER_SETTINGS_DIRECTORY, 0, true, buffer, sizeof(buffer)) == B_OK){
+			snprintf(path, sizeof(path), "%s/opendune.ini", buffer);
+		}
 #else /* __HAIKU__ */
 		snprintf(path, sizeof(path), "%s/.config/opendune/opendune.ini", homeDir);
-#endif /* __APPLE__ */
+#endif
 		f = fopen(path, "rb");
 	}
 #endif /* not TOS, not _WIN32 */
+	
+#if defined(__HAIKU__)
+	/* B_SYSTEM_SETTINGS_DIRECTORY */
+	if (f == NULL) {
+		if(find_directory(B_SYSTEM_SETTINGS_DIRECTORY, 0, true, buffer, sizeof(buffer)) == B_OK){
+			snprintf(path, sizeof(path), "%s/opendune/opendune.ini", buffer);
+			f = fopen(path, "rb");
+		}
+	}
+#endif	
 	if (f == NULL) {
 		/* current directory */
 		f = fopen("opendune.ini", "rb");
-- 
2.19.1


From a928be7dbb7cfb4d6c8c168b269c6decf38f6fa9 Mon Sep 17 00:00:00 2001
From: Gabriele Baldassarre <gabriele@gabrielebaldassarre.com>
Date: Fri, 26 Oct 2018 01:50:10 +0200
Subject: add a more verbose log when opendune.ini is not found


diff --git a/src/inifile.c b/src/inifile.c
index 57d2c62..0b386cc 100644
--- a/src/inifile.c
+++ b/src/inifile.c
@@ -73,7 +73,7 @@ bool Load_IniFile(void)
 		snprintf(path, sizeof(path), "%s/Library/Application Support/OpenDUNE/opendune.ini", homeDir);
 #elif defined(__HAIKU__) /* __APPLE__ */
 		if(find_directory(B_USER_SETTINGS_DIRECTORY, 0, true, buffer, sizeof(buffer)) == B_OK){
-			snprintf(path, sizeof(path), "%s/opendune.ini", buffer);
+			snprintf(path, sizeof(path), "%s/opendune/opendune.ini", buffer);
 		}
 #else /* __HAIKU__ */
 		snprintf(path, sizeof(path), "%s/.config/opendune/opendune.ini", homeDir);
@@ -85,8 +85,11 @@ bool Load_IniFile(void)
 #if defined(__HAIKU__)
 	/* B_SYSTEM_SETTINGS_DIRECTORY */
 	if (f == NULL) {
+		char haiku_msg[B_PATH_NAME_LENGTH + 50];
+		snprintf(haiku_msg, sizeof(haiku_msg), "%s not found; using default one...\n", path);
+		Warning(haiku_msg);
 		if(find_directory(B_SYSTEM_SETTINGS_DIRECTORY, 0, true, buffer, sizeof(buffer)) == B_OK){
-			snprintf(path, sizeof(path), "%s/opendune/opendune.ini", buffer);
+			snprintf(path, sizeof(path), "%s/opendune.ini", buffer);
 			f = fopen(path, "rb");
 		}
 	}
-- 
2.19.1


From 1c636a36ab749fae4daf8dcf912b5b078102b0e1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?M=C3=A1ximo=20Casta=C3=B1eda?= <antiswen@yahoo.es>
Date: Wed, 28 Oct 2020 14:32:14 +0100
Subject: Use the correct endian.h


diff --git a/src/os/endian.h b/src/os/endian.h
index f8e9361..f8e3e86 100644
--- a/src/os/endian.h
+++ b/src/os/endian.h
@@ -26,6 +26,8 @@
 	#define __LITTLE_ENDIAN 1234
 	#define __BIG_ENDIAN 4321
 	#define __BYTE_ORDER __LITTLE_ENDIAN
+#elif defined(__HAIKU__)
+	#include <posix/endian.h>
 #else
 	#include <endian.h>
 #endif /* _WIN32 */
-- 
2.28.0


From 3bd7f4073916c5fa75582a044b03ed4f1b7287c6 Mon Sep 17 00:00:00 2001
From: Thomas Bernard <miniupnp@free.fr>
Date: Thu, 9 Apr 2020 22:21:46 +0200
Subject: -Fix: Tile_PackTile() is now a macro

we should avoid to call Tile_MoveByRandom() several times
fixes #331

Bug introduced by 9c34a82b30df6dca449549d9d7a76acbbae333af
https://github.com/OpenDUNE/OpenDUNE/releases/tag/0.9

diff --git a/src/map.c b/src/map.c
index 234b08e..3f97403 100644
--- a/src/map.c
+++ b/src/map.c
@@ -984,7 +984,8 @@ uint16 Map_FindLocationTile(uint16 locationID, uint8 houseID)
 				s = Structure_Find(&find);
 
 				if (s != NULL) {
-					ret = Tile_PackTile(Tile_MoveByRandom(s->o.position, 120, true));
+					tile32 unpacked = Tile_MoveByRandom(s->o.position, 120, true);
+					ret = Tile_PackTile(unpacked);
 				} else {
 					Unit *u;
 
@@ -995,7 +996,8 @@ uint16 Map_FindLocationTile(uint16 locationID, uint8 houseID)
 					u = Unit_Find(&find);
 
 					if (u != NULL) {
-						ret = Tile_PackTile(Tile_MoveByRandom(u->o.position, 120, true));
+						tile32 unpacked = Tile_MoveByRandom(u->o.position, 120, true);
+						ret = Tile_PackTile(unpacked);
 					} else {
 						ret = Tile_PackXY(mapInfo->minX + Tools_RandomLCG_Range(0, mapInfo->sizeX), mapInfo->minY + Tools_RandomLCG_Range(0, mapInfo->sizeY));
 					}
@@ -1588,7 +1590,8 @@ void Map_CreateLandscape(uint32 seed)
 		j = Tools_Random_256() & 0x1F;
 		while (j-- != 0) {
 			while (true) {
-				packed = Tile_PackTile(Tile_MoveByRandom(tile, Tools_Random_256() & 0x3F, true));
+				tile32 unpacked = Tile_MoveByRandom(tile, Tools_Random_256() & 0x3F, true);
+				packed = Tile_PackTile(unpacked);
 
 				if (!Tile_IsOutOfMap(packed)) break;
 			}
-- 
2.28.0

