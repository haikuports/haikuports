SUMMARY="A utility for network discovery and security auditing"
DESCRIPTION="Nmap (\"Network Mapper\") is a free and open source license \
utility for network discovery and security auditing. Many systems and network \
administrators also find it useful for tasks such as network inventory, \
managing service upgrade schedules, and monitoring host or service uptime. \
Nmap uses raw IP packets in novel ways to determine what hosts are available \
on the network, what services (application name and version) those hosts are \
offering, what operating systems (and OS versions) they are running, what \
type of packet filters/firewalls are in use, and dozens of other \
characteristics. It was designed to rapidly scan large networks, but works \
fine against single hosts. Nmap runs on all major computer operating systems, \
and official binary packages are available for Linux, Windows, and Mac OS X. \
In addition to the classic command-line Nmap executable, the Nmap suite \
includes an advanced GUI and results viewer (Zenmap), a flexible data \
transfer, redirection, and debugging tool (Ncat), a utility for comparing \
scan results (Ndiff), and a packet generation and response analysis tool \
(Nping)."
HOMEPAGE="https://nmap.org/"
COPYRIGHT="1996â€“2005 The Nmap Project"
LICENSE="GNU GPL v2"
REVISION="2"
SOURCE_URI="https://nmap.org/dist-old/nmap-$portVersion.tgz"
CHECKSUM_SHA256="4ab4044b2c8a44466409f668919156b4d8429e0449c6c482ea2063730d727293"
PATCHES="nmap-$portVersion.patchset"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	nmap$secondaryArchSuffix = $portVersion
	cmd:nmap = $portVersion
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libpcap$secondaryArchSuffix
	lib:libpcre$secondaryArchSuffix
	lib:libssl$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libpcap$secondaryArchSuffix
	devel:libpcre$secondaryArchSuffix
	devel:libssl$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:libtoolize
	cmd:make
	"
if [ $effectiveTargetArchitecture = x86 ]; then
	REPLACES="
		nmap
		"
fi

BUILD()
{
	libtoolize --force --copy --install
	pushd nsock/src
	libtoolize --force --copy --install
	popd

	runConfigure --omit-dirs "binDir dataRootDir docDir" \
		./configure --bindir="$prefix/bin" \
			--without-nmapfe LDFLAGS=-lnetwork
	# not multi-job safe
	make
}

INSTALL()
{
	make $jobArgs install
	rm -rf $prefix/share
}
