diff --git a/dns.c b/dns.c
index 371934f..1cfe047 100644
--- a/dns.c
+++ b/dns.c
@@ -28,7 +28,6 @@
 #include <sys/time.h>
 #include <sys/select.h>
 #include <sys/stat.h>
-#include <sys/errno.h>
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>

--- mtr-0.73/configure.in	2006-10-05 11:26:41.064487424 +0400
+++ mtr-0.73-haiku/configure.in	2014-06-21 21:02:32.908328960 +0400
@@ -38,62 +38,43 @@
 AC_CHECK_HEADERS(ncurses.h ncurses/curses.h curses.h cursesX.h sys/types.h)
 AC_CHECK_HEADERS(sys/xti.h)
 
-AC_CHECK_LIB(m, floor, , AC_MSG_ERROR(No math library found))
+AC_CHECK_LIB(root, floor, , AC_MSG_ERROR(No math library found))
 
 dnl Added ability to cleanly disable GTK+      (12 Jan 2000, Joseph Carter)
 AC_ARG_WITH(gtk,
 [  --without-gtk           Do not try to use GTK+ at all],
 WANTS_GTK=$withval, WANTS_GTK=yes)
 
-AC_ARG_ENABLE(gtk2,
-[  --enable-gtk2           Compile against GTK2 instead of GTK+],
-WANTS_GTK2=$enableval, WANTS_GTK2=no)
-   
+
 AC_ARG_ENABLE(ipv6,
 [  --disable-ipv6          Do not enable IPv6],
 WANTS_IPV6=$enableval, WANTS_IPV6=yes)
-   
-if test "x$WANTS_GTK" = "xyes"; then
-	if test "x$WANTS_GTK2" = "xyes"; then
-                AM_PATH_GTK_2_0(2.0.0, CFLAGS="$CFLAGS $GTK_CFLAGS"
-                           LIBS="$LIBS $GTK_LIBS -lm",
-                           AC_MSG_WARN(Building without GTK2 display support)
-                           AC_DEFINE(NO_GTK)
-                           GTK_OBJ="")
-        else
-		AM_PATH_GTK(1.0.0, CFLAGS="$CFLAGS $GTK_CFLAGS"
-                           LIBS="$LIBS $GTK_LIBS",
-                           AC_MSG_WARN(Building without GTK+ display support)
-                           AC_DEFINE(NO_GTK)
-                           GTK_OBJ="")
-	fi
-else
+
 	AC_DEFINE(NO_GTK)
 	GTK_OBJ=""
-fi
 
 AC_CHECK_FUNC(socket, , 
-  AC_CHECK_LIB(socket, socket, , AC_MSG_ERROR(No socket library found)))
+  AC_CHECK_LIB(network, socket, , AC_MSG_ERROR(No socket library found)))
 
 AC_CHECK_FUNC(gethostbyname, ,
-  AC_CHECK_LIB(nsl, gethostbyname, , AC_MSG_ERROR(No nameservice library found)))
+  AC_CHECK_LIB(network, gethostbyname, , AC_MSG_ERROR(No nameservice library found)))
 
 #AC_CHECK_FUNC(res_init, , 
-#  AC_CHECK_LIB(bind, res_init, , 
+#  AC_CHECK_LIB(resolv, res_init, ,
 #   AC_CHECK_LIB(resolv, res_init, , AC_MSG_ERROR(No resolver library found))))
 
 AC_CHECK_FUNCS(seteuid)
 #  AC_CHECK_FUNC(setuid, , AC_MSG_ERROR (I Need either seteuid or setuid))
 
 AC_CHECK_FUNC(res_mkquery, , 
-  AC_CHECK_LIB(bind, res_mkquery, , 
-   AC_CHECK_LIB(resolv, res_mkquery, ,
-     AC_CHECK_LIB(resolv, __res_mkquery, , AC_MSG_ERROR(No resolver library found)))))
-# This next line would override the just detected-or-not -lresolv. 
+  AC_CHECK_LIB(network, res_mkquery, ,
+   AC_CHECK_LIB(network, res_mkquery, ,
+     AC_CHECK_LIB(network, __res_mkquery, , AC_MSG_ERROR(No resolver library found)))))
+# This next line would override the just detected-or-not -lnetwork.
 # This apparently hurts BSD. And it's bad practise. So it should go. 
 # However, it probably didn't get added for nothing..... Holler if
 # removing it hurts your OS.... -- REW
-#LIBS="$LIBS -lresolv"
+#LIBS="$LIBS"
 
 AC_CHECK_FUNC(herror, , AC_DEFINE(NO_HERROR))
 AC_CHECK_FUNC(strerror, , AC_DEFINE(NO_STRERROR))
@@ -158,6 +139,6 @@
 
 
 
-AM_CONFIG_HEADER(config.h)
+AC_CONFIG_HEADERS(config.h)
 AC_OUTPUT(Makefile img/Makefile)
 
