From 01213ca45ed5baa50174b57a0f820d758268a9c3 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Tue, 2 Oct 2018 16:31:18 +0200
Subject: gcc2 patch


diff --git a/src/ReportOutputs.c b/src/ReportOutputs.c
index 6d124de..fde6f64 100644
--- a/src/ReportOutputs.c
+++ b/src/ReportOutputs.c
@@ -252,9 +252,11 @@ void tcp_output_read_enhanced (struct TransferInfo *stats) {
     fflush(stdout);
 }
 void tcp_output_read_triptime (struct TransferInfo *stats) {
+    double meantransit;
+    double lambda;
     HEADING_PRINT_COND(report_bw_read_enhanced_netpwr);
-    double meantransit = (stats->transit.current.cnt > 0) ? (stats->transit.current.sum / stats->transit.current.cnt) : 0;
-    double lambda = (stats->IPGsum > 0.0) ? ((double)stats->cntBytes / stats->IPGsum) : 0.0;
+    meantransit = (stats->transit.current.cnt > 0) ? (stats->transit.current.sum / stats->transit.current.cnt) : 0;
+    lambda = (stats->IPGsum > 0.0) ? ((double)stats->cntBytes / stats->IPGsum) : 0.0;
     set_llawbuf(lambda, meantransit);
     _print_stats_common(stats);
     if (stats->cntBytes) {
@@ -308,8 +310,9 @@ void tcp_output_read_triptime (struct TransferInfo *stats) {
     fflush(stdout);
 }
 void tcp_output_read_enhanced_isoch (struct TransferInfo *stats) {
+    double meantransit;
     HEADING_PRINT_COND(report_bw_isoch_enhanced_netpwr);
-    double meantransit = (stats->transit.current.cnt > 0) ? (stats->transit.current.sum / stats->transit.current.cnt) : 0;
+    meantransit = (stats->transit.current.cnt > 0) ? (stats->transit.current.sum / stats->transit.current.cnt) : 0;
     _print_stats_common(stats);
     if (stats->cntBytes) {
         set_netpowerbuf(meantransit, stats);
@@ -432,9 +435,9 @@ void tcp_output_write (struct TransferInfo *stats) {
 }
 
 void tcp_output_write_bb (struct TransferInfo *stats) {
+    char rps_string[40];
     HEADING_PRINT_COND(report_client_bb_bw);
     _print_stats_common(stats);
-    char rps_string[40];
     if (stats->final) {
         double rps = ((stats->fBBrunning > 0) && (stats->bbrtt.total.cnt > 0)) ? ((double) stats->bbrtt.total.cnt / stats->fBBrunning) : 0;
 	if (rps < 10)
@@ -1151,13 +1154,14 @@ static void format_ips_ports_string (struct TransferInfo *stats) {
 }
 
 void udp_output_basic_csv (struct TransferInfo *stats) {
+    intmax_t speed;
     format_timestamp(&stats->ts.nextTime, isEnhanced(stats->common));
     if (stats->csv_peer[0] == '\0') {
 	format_ips_ports_string(stats);
 	strncpy(&stats->csv_peer[0], &__ips_ports_string[0], CSVPEERLIMIT);
 	stats->csv_peer[(CSVPEERLIMIT - 1)] = '\0';
     }
-    intmax_t speed = (intmax_t) (((stats->cntBytes > 0) && (stats->ts.iEnd -  stats->ts.iStart) > 0.0) ? \
+    speed = (intmax_t) (((stats->cntBytes > 0) && (stats->ts.iEnd -  stats->ts.iStart) > 0.0) ? \
 				 (((double)stats->cntBytes * 8.0) / (stats->ts.iEnd -  stats->ts.iStart)) : 0);
     printf(reportCSV_bw_jitter_loss_format,
 	   __timestring,
@@ -1173,13 +1177,14 @@ void udp_output_basic_csv (struct TransferInfo *stats) {
 	    (100.0 * stats->cntError) / stats->cntDatagrams, stats->cntOutofOrder );
 }
 void tcp_output_basic_csv (struct TransferInfo *stats) {
+    intmax_t speed;
     format_timestamp(&stats->ts.nextTime, isEnhanced(stats->common));
     if (stats->csv_peer[0] == '\0') {
 	format_ips_ports_string(stats);
 	strncpy(&stats->csv_peer[0], &__ips_ports_string[0], CSVPEERLIMIT);
 	stats->csv_peer[(CSVPEERLIMIT - 1)] = '\0';
     }
-    intmax_t speed = (intmax_t) (((stats->cntBytes > 0) && (stats->ts.iEnd -  stats->ts.iStart) > 0.0) ? \
+    speed = (intmax_t) (((stats->cntBytes > 0) && (stats->ts.iEnd -  stats->ts.iStart) > 0.0) ? \
 				 (((double)stats->cntBytes * 8.0) / (stats->ts.iEnd -  stats->ts.iStart)) : 0);
     printf(reportCSV_bw_format,
 	   __timestring,
@@ -1441,15 +1446,18 @@ void reporter_connect_printf_tcp_final (struct ConnectionInfo * report) {
 }
 
 void reporter_print_connection_report (struct ConnectionInfo *report) {
-    assert(report->common);
-    // copy the inet_ntop into temp buffers, to avoid overwriting
     char local_addr[REPORT_ADDRLEN];
     char remote_addr[REPORT_ADDRLEN];
-    struct sockaddr *local = ((struct sockaddr*)&report->common->local);
-    struct sockaddr *peer = ((struct sockaddr*)&report->common->peer);
+    struct sockaddr *local;
+    struct sockaddr *peer;
+    char *b;
+    assert(report->common);
+    // copy the inet_ntop into temp buffers, to avoid overwriting
+    local = ((struct sockaddr*)&report->common->local);
+    peer = ((struct sockaddr*)&report->common->peer);
     outbuffer[0]='\0';
     outbufferext[0]='\0';
-    char *b = &outbuffer[0];
+    b = &outbuffer[0];
 
 #if HAVE_DECL_TCP_WINDOW_CLAMP
     if (!isUDP(report->common) && isRxClamp(report->common)) {
@@ -1554,8 +1562,8 @@ void reporter_print_connection_report (struct ConnectionInfo *report) {
     if (!isServerReverse(report->common) && (isEnhanced(report->common) || isConnectOnly(report->common))) {
 	if (report->connect_timestamp.tv_sec > 0) {
 	    struct tm ts;
-	    ts = *localtime(&report->connect_timestamp.tv_sec);
 	    char now_timebuf[80];
+	    ts = *localtime(&report->connect_timestamp.tv_sec);
 	    strftime(now_timebuf, sizeof(now_timebuf), "%Y-%m-%d %H:%M:%S (%Z)", &ts);
 	    if (!isUDP(report->common) && (report->common->ThreadMode == kMode_Client) && (report->tcpinitstats.connecttime > 0)) {
 		snprintf(b, SNBUFFERSIZE-strlen(b), " (ct=%4.2f ms) on %s", report->tcpinitstats.connecttime, now_timebuf);
@@ -1635,8 +1643,10 @@ void reporter_print_connection_report (struct ConnectionInfo *report) {
 	if (isTxHoldback(report->common) || isTxStartTime(report->common)) {
 	    struct tm ts;
 	    char start_timebuf[80];
+	    char now_timebuf[80];
 	    struct timeval now;
 	    struct timeval start;
+	    int seconds_from_now;
 #ifdef HAVE_CLOCK_GETTIME
 	    struct timespec t1;
 	    clock_gettime(CLOCK_REALTIME, &t1);
@@ -1646,10 +1656,8 @@ void reporter_print_connection_report (struct ConnectionInfo *report) {
 	    gettimeofday(&now, NULL);
 #endif
 	    ts = *localtime(&now.tv_sec);
-	    char now_timebuf[80];
 	    strftime(now_timebuf, sizeof(now_timebuf), "%Y-%m-%d %H:%M:%S (%Z)", &ts);
 	    // Format time, "ddd yyyy-mm-dd hh:mm:ss zzz"
-	    int seconds_from_now;
 	    if (isTxHoldback(report->common)) {
 		seconds_from_now = report->txholdbacktime.tv_sec;
 		if (report->txholdbacktime.tv_usec > 0)
diff --git a/src/Reporter.c b/src/Reporter.c
index 7dc05b3..509ef08 100644
--- a/src/Reporter.c
+++ b/src/Reporter.c
@@ -146,9 +146,9 @@ void PostReport (struct ReportHeader *reporthdr) {
  * Returns true when the tcpinfo was sampled, false ohterwise
  */
 bool ReportPacket (struct ReporterData* data, struct ReportStruct *packet) {
+    bool rc = false;
     assert(data != NULL);
 
-    bool rc = false;
   #ifdef HAVE_THREAD_DEBUG
     if (packet->packetID < 0) {
 	thread_debug("Reporting last packet for %p  qdepth=%d sock=%d", (void *) data, packetring_getcount(data->packetring), data->info.common->socket);
@@ -196,13 +196,15 @@ bool ReportPacket (struct ReporterData* data, struct ReportStruct *packet) {
  * It also handles the freeing reports and other closing actions
  */
 int EndJob (struct ReportHeader *reporthdr, struct ReportStruct *finalpacket) {
+    struct ReporterData *report;
+    struct ReportStruct packet;
+    int do_close;
     assert(reporthdr!=NULL);
     assert(finalpacket!=NULL);
-    struct ReporterData *report = (struct ReporterData *) reporthdr->this_report;
-    struct ReportStruct packet;
+    report = (struct ReporterData *) reporthdr->this_report;
 
     memset(&packet, 0, sizeof(struct ReportStruct));
-    int do_close = 1;
+    do_close = 1;
     /*
      * Using PacketID of -1 ends reporting
      * It pushes a "special packet" through
@@ -512,10 +514,15 @@ void reporter_spawn (struct thread_Settings *thread) {
 
 // The Transfer or Data report is by far the most complicated report
 int reporter_process_transfer_report (struct ReporterData *this_ireport) {
+    struct TransferInfo *sumstats;
+    struct TransferInfo *fullduplexstats;
+    int need_free;
+    struct ReportStruct *packet;
+    int advance_jobq;
     assert(this_ireport != NULL);
-    struct TransferInfo *sumstats = (this_ireport->GroupSumReport ? &this_ireport->GroupSumReport->info : NULL);
-    struct TransferInfo *fullduplexstats = (this_ireport->FullDuplexReport ? &this_ireport->FullDuplexReport->info : NULL);
-    int need_free = 0;
+    sumstats = (this_ireport->GroupSumReport ? &this_ireport->GroupSumReport->info : NULL);
+    fullduplexstats = (this_ireport->FullDuplexReport ? &this_ireport->FullDuplexReport->info : NULL);
+    need_free = 0;
     // The consumption detector applies delay to the reporter
     // thread when its consumption rate is too low.   This allows
     // the traffic threads to send aggregates vs thrash
@@ -530,8 +537,8 @@ int reporter_process_transfer_report (struct ReporterData *this_ireport) {
     if (!isSingleUDP(this_ireport->info.common))
 	apply_consumption_detector();
     // If there are more packets to process then handle them
-    struct ReportStruct *packet = NULL;
-    int advance_jobq = 0;
+    packet = NULL;
+    advance_jobq = 0;
     while (!advance_jobq && (packet = packetring_dequeue(this_ireport->packetring))) {
 	// Increment the total packet count processed by this thread
 	// this will be used to make decisions on if the reporter
@@ -617,8 +624,9 @@ int reporter_process_transfer_report (struct ReporterData *this_ireport) {
  *
  */
 inline int reporter_process_report (struct ReportHeader *reporthdr) {
+    int done;
     assert(reporthdr != NULL);
-    int done = 1;
+    done = 1;
     switch (reporthdr->type) {
     case DATA_REPORT:
 	done = reporter_process_transfer_report((struct ReporterData *)reporthdr->this_report);
@@ -695,10 +703,10 @@ static inline void reporter_compute_packet_pps (struct TransferInfo *stats, stru
 static void reporter_handle_packet_oneway_transit (struct TransferInfo *stats, struct ReportStruct *packet) {
     // Transit or latency updates done inline below
     double transit = TimeDifference(packet->packetTime, packet->sentTime);
+    double deltaTransit;
     if (stats->latency_histogram) {
         histogram_insert(stats->latency_histogram, transit, NULL);
     }
-    double deltaTransit;
     // from RFC 1889, Real Time Protocol (RTP)
     // J = J + ( | D(i-1,i) | - J ) /
     // Compute jitter
@@ -913,13 +921,17 @@ void reporter_handle_packet_client (struct ReporterData *data, struct ReportStru
 }
 
 void reporter_handle_packet_bb_client (struct ReporterData *data, struct ReportStruct *packet) {
+	double bbrtt;
+	double bbowdto;
+	double bbowdfro;
+	double asym;
     if (!packet->emptyreport && (packet->packetLen > 0)) {
         struct TransferInfo *stats = &data->info;
 	stats->total.Bytes.current += packet->packetLen;
-	double bbrtt = TimeDifference(packet->packetTime, packet->sentTime);
-	double bbowdto = TimeDifference(packet->sentTimeRX, packet->sentTime);
-	double bbowdfro = TimeDifference(packet->packetTime, packet->sentTimeTX);
-	double asym = bbowdfro - bbowdto;
+	bbrtt = TimeDifference(packet->packetTime, packet->sentTime);
+	bbowdto = TimeDifference(packet->sentTimeRX, packet->sentTime);
+	bbowdfro = TimeDifference(packet->packetTime, packet->sentTimeTX);
+	asym = bbowdfro - bbowdto;
 	stats->ts.prevpacketTime = packet->packetTime;
 #if 0
 	fprintf(stderr, "BB Debug: ctx=%lx.%lx srx=%lx.%lx stx=%lx.%lx crx=%lx.%lx\n", packet->sentTime.tv_sec, packet->sentTime.tv_usec, packet->sentTimeRX.tv_sec, packet->sentTimeRX.tv_usec, packet->sentTimeTX.tv_sec, packet->sentTimeTX.tv_usec, packet->packetTime.tv_sec, packet->pAckettime.tv_usec);
@@ -1079,8 +1091,8 @@ static inline void reporter_set_timestamps_time (struct ReportTimeStamps *times,
 static inline void reporter_transfer_protocol_missed_reports (struct TransferInfo *stats, struct ReportStruct *packet) {
     while (TimeDifference(packet->packetTime, stats->ts.nextTime) > TimeDouble(stats->ts.intervalTime)) {
 //	printf("**** cmp=%f/%f next %ld.%ld packet %ld.%ld id=%ld\n", TimeDifference(packet->packetTime, stats->ts.nextTime), TimeDouble(stats->ts.intervalTime), stats->ts.nextTime.tv_sec, stats->ts.nextTime.tv_usec, packet->packetTime.tv_sec, packet->packetTime.tv_usec, packet->packetID);
-	reporter_set_timestamps_time(&stats->ts, INTERVAL);
 	struct TransferInfo emptystats;
+	reporter_set_timestamps_time(&stats->ts, INTERVAL);
 	memset(&emptystats, 0, sizeof(struct TransferInfo));
 	emptystats.ts.iStart = stats->ts.iStart;
 	emptystats.ts.iEnd = stats->ts.iEnd;
@@ -1395,11 +1407,11 @@ void reporter_transfer_protocol_client_udp (struct ReporterData *data, int final
 }
 
 void reporter_transfer_protocol_server_tcp (struct ReporterData *data, int final) {
+    int ix;
     struct TransferInfo *stats = &data->info;
     struct TransferInfo *sumstats = (data->GroupSumReport != NULL) ? &data->GroupSumReport->info : NULL;
     struct TransferInfo *fullduplexstats = (data->FullDuplexReport != NULL) ? &data->FullDuplexReport->info : NULL;
     stats->cntBytes = stats->total.Bytes.current - stats->total.Bytes.prev;
-    int ix;
     if (stats->framelatency_histogram) {
         stats->framelatency_histogram->final = 0;
     }
@@ -1726,10 +1738,13 @@ void reporter_transfer_protocol_fullduplex_udp (struct TransferInfo *stats, int
 
 // Conditional print based on time
 int reporter_condprint_time_interval_report (struct ReporterData *data, struct ReportStruct *packet) {
+    int advance_jobq;
+	struct TransferInfo *sumstats;
+	struct TransferInfo *fullduplexstats;
     struct TransferInfo *stats = &data->info;
     assert(stats!=NULL);
     //   printf("***sum handler = %p\n", (void *) data->GroupSumReport->transfer_protocol_sum_handler);
-    int advance_jobq = 0;
+    advance_jobq = 0;
     // Print a report if packet time exceeds the next report interval time,
     // Also signal to the caller to move to the next report (or packet ring)
     // if there was output. This will allow for more precise interval sum accounting.
@@ -1737,8 +1752,8 @@ int reporter_condprint_time_interval_report (struct ReporterData *data, struct R
     if (TimeDifference(stats->ts.nextTime, packet->packetTime) < 0) {
 	assert(data->transfer_protocol_handler!=NULL);
 	advance_jobq = 1;
-	struct TransferInfo *sumstats = (data->GroupSumReport ? &data->GroupSumReport->info : NULL);
-	struct TransferInfo *fullduplexstats = (data->FullDuplexReport ? &data->FullDuplexReport->info : NULL);
+	sumstats = (data->GroupSumReport ? &data->GroupSumReport->info : NULL);
+	fullduplexstats = (data->FullDuplexReport ? &data->FullDuplexReport->info : NULL);
 	stats->ts.packetTime = packet->packetTime;
 #ifdef DEBUG_PPS
 	printf("*** packetID TRIGGER = %ld pt=%ld.%ld empty=%d nt=%ld.%ld\n",packet->packetID, packet->packetTime.tv_sec, packet->packetTime.tv_usec, packet->emptyreport, stats->ts.nextTime.tv_sec, stats->ts.nextTime.tv_usec);
diff --git a/src/Reports.c b/src/Reports.c
index 9c44ace..9debdf1 100644
--- a/src/Reports.c
+++ b/src/Reports.c
@@ -180,13 +180,14 @@ static void free_common_copy (struct ReportCommon *common) {
 // this will get the next one. Otherwise it will use
 // the value.
 void setTransferID (struct thread_Settings *inSettings, int role_reversal) {
+	int len;
     if (!inSettings->mTransferIDStr) {
 	if (!inSettings->mTransferID) {
 	    Mutex_Lock(&transferid_mutex);
 	    inSettings->mTransferID = ++transferid_counter;
 	    Mutex_Unlock(&transferid_mutex);
 	}
-	int len = 0;
+	len = 0;
 	if (role_reversal)  {
 #ifdef HAVE_ROLE_REVERSAL_ID
 	    if (isPermitKey(inSettings) && (inSettings->mPermitKey[0] != '\0')) {
@@ -331,9 +332,10 @@ struct SumReport* InitSumReport(struct thread_Settings *inSettings, int inID, in
 }
 
 struct ConnectionInfo * InitConnectOnlyReport (struct thread_Settings *thread) {
+    struct ConnectionInfo *creport;
     assert(thread != NULL);
     // this connection report used only by report for accumulate stats
-    struct ConnectionInfo *creport = (struct ConnectionInfo *) calloc(1, sizeof(struct ConnectionInfo));
+    creport = (struct ConnectionInfo *) calloc(1, sizeof(struct ConnectionInfo));
     if (!creport) {
 	FAIL(1, "Out of Memory!!\n", thread);
     }
@@ -452,6 +454,7 @@ void IncrSumReportRefCounter (struct SumReport *sumreport) {
 }
 
 int DecrSumReportRefCounter (struct SumReport *sumreport) {
+    int refcnt;
     assert(sumreport);
 //    thread_debug("before lock hdr=%p", (void *)sumreport);
     Mutex_Lock(&sumreport->reference.lock);
@@ -459,7 +462,7 @@ int DecrSumReportRefCounter (struct SumReport *sumreport) {
     thread_debug("Sum multiheader %p ref=%d->%d", (void *)sumreport, sumreport->reference.count, (sumreport->reference.count - 1));
 #endif
 //    thread_debug("in lock hdr=%p", (void *)sumreport);
-    int refcnt = --sumreport->reference.count;
+    refcnt = --sumreport->reference.count;
     Mutex_Unlock(&sumreport->reference.lock);
 //    thread_debug("unlock hdr=%p", (void *)sumreport);
     return refcnt;
@@ -475,8 +478,10 @@ struct ReportHeader* InitIndividualReport (struct thread_Settings *inSettings) {
     /*
      * Create the report header and an ireport (if needed)
      */
+    struct ReportHeader *reporthdr;
+    struct ReporterData *ireport;
     assert(inSettings!=NULL);
-    struct ReportHeader *reporthdr = (struct ReportHeader *) calloc(1, sizeof(struct ReportHeader));
+    reporthdr = (struct ReportHeader *) calloc(1, sizeof(struct ReportHeader));
     if (reporthdr == NULL) {
 	FAIL(1, "Out of Memory!!\n", inSettings);
     }
@@ -487,7 +492,7 @@ struct ReportHeader* InitIndividualReport (struct thread_Settings *inSettings) {
     reporthdr->type = DATA_REPORT;
     reporthdr->ReportMode = inSettings->mReportMode;
 
-    struct ReporterData *ireport = (struct ReporterData *)(reporthdr->this_report);
+    ireport = (struct ReporterData *)(reporthdr->this_report);
     if (inSettings->mSumReport) {
 	IncrSumReportRefCounter(inSettings->mSumReport);
 	ireport->GroupSumReport = inSettings->mSumReport;
@@ -704,8 +709,10 @@ struct ReportHeader* InitIndividualReport (struct thread_Settings *inSettings) {
  * and to extend.
  */
 struct ReportHeader* InitConnectionReport (struct thread_Settings *inSettings) {
+    struct ReportHeader *reporthdr;
+    struct ConnectionInfo * creport;
     assert(inSettings != NULL);
-    struct ReportHeader *reporthdr = (struct ReportHeader *) calloc(1, sizeof(struct ReportHeader));
+    reporthdr = (struct ReportHeader *) calloc(1, sizeof(struct ReportHeader));
     if (reporthdr == NULL) {
 	FAIL(1, "Out of Memory!!\n", inSettings);
     }
@@ -716,7 +723,7 @@ struct ReportHeader* InitConnectionReport (struct thread_Settings *inSettings) {
     reporthdr->type = CONNECTION_REPORT;
     reporthdr->ReportMode = inSettings->mReportMode;
 
-    struct ConnectionInfo * creport = (struct ConnectionInfo *)(reporthdr->this_report);
+    creport = (struct ConnectionInfo *)(reporthdr->this_report);
     common_copy(&creport->common, inSettings);
     tcpstats_copy(&creport->tcpinitstats, &inSettings->tcpinitstats);
     // Fill out known fields for the connection report
@@ -762,8 +769,10 @@ struct ReportHeader* InitConnectionReport (struct thread_Settings *inSettings) {
  * settings being used with Listeners or Clients
  */
 struct ReportHeader *InitSettingsReport (struct thread_Settings *inSettings) {
+    struct ReportHeader *reporthdr;
+    struct ReportSettings *sreport;
     assert(inSettings != NULL);
-    struct ReportHeader *reporthdr = (struct ReportHeader *) calloc(1, sizeof(struct ReportHeader));
+    reporthdr = (struct ReportHeader *) calloc(1, sizeof(struct ReportHeader));
     if (reporthdr == NULL) {
 	FAIL(1, "Out of Memory!!\n", inSettings);
     }
@@ -774,7 +783,7 @@ struct ReportHeader *InitSettingsReport (struct thread_Settings *inSettings) {
     reporthdr->type = SETTINGS_REPORT;
     reporthdr->ReportMode = inSettings->mReportMode;
 
-    struct ReportSettings *sreport = (struct ReportSettings *)reporthdr->this_report;
+    sreport = (struct ReportSettings *)reporthdr->this_report;
     common_copy(&sreport->common, inSettings);
     sreport->peer = inSettings->peer;
     sreport->size_peer = inSettings->size_peer;
@@ -810,6 +819,9 @@ struct ReportHeader* InitServerRelayUDPReport(struct thread_Settings *inSettings
     /*
      * Create the report header and an ireport (if needed)
      */
+    struct ServerRelay *sr_report;
+    struct TransferInfo *stats;
+    uint32_t flags;
     struct ReportHeader *reporthdr = (struct ReportHeader *) calloc(1, sizeof(struct ReportHeader));
     if (reporthdr == NULL) {
 	FAIL(1, "Out of Memory!!\n", inSettings);
@@ -823,9 +835,9 @@ struct ReportHeader* InitServerRelayUDPReport(struct thread_Settings *inSettings
 #endif
     reporthdr->type = SERVER_RELAY_REPORT;
     reporthdr->ReportMode = inSettings->mReportMode;
-    struct ServerRelay *sr_report = (struct ServerRelay *)reporthdr->this_report;
+    sr_report = (struct ServerRelay *)reporthdr->this_report;
     common_copy(&sr_report->info.common, inSettings);
-    struct TransferInfo *stats = &sr_report->info;
+    stats = &sr_report->info;
     stats->common->transferID = inSettings->mTransferID;
 
     stats->jitter = ntohl(server->base.jitter1);
@@ -839,7 +851,7 @@ struct ReportHeader* InitServerRelayUDPReport(struct thread_Settings *inSettings
     stats->ts.iStart = 0;
     stats->ts.iEnd = ntohl(server->base.stop_sec);
     stats->ts.iEnd += ntohl(server->base.stop_usec) / (double)rMillion;
-    uint32_t flags = ntohl(server->base.flags);
+    flags = ntohl(server->base.flags);
     if ((flags & HEADER_SEQNO64B)) {
 	stats->cntError = (((intmax_t) ntohl(server->extend2.error_cnt2)) << 32) + \
 	    ntohl(server->base.error_cnt);
@@ -889,22 +901,29 @@ struct ReportHeader* InitServerRelayUDPReport(struct thread_Settings *inSettings
  * Sent by server to client
  * ------------------------------------------------------------------- */
 void write_UDP_AckFIN (struct TransferInfo *stats, int len) {
+    int ackpacket_length;
+    char *ackPacket;
+    int success;
+    int rc;
+    struct timeval timeout;
+    int readlen;
+    fd_set readSet;
+	int count;
     assert(stats!= NULL);
-    int ackpacket_length = (int) (sizeof(struct UDP_datagram) + sizeof(struct server_hdr));
-    int readlen = ((ackpacket_length * 2) > len * 2) ? (ackpacket_length * 2) : (len * 2);
-    char *ackPacket = (char *) calloc(1, readlen);
-    int success = 0;
+    ackpacket_length = (int) (sizeof(struct UDP_datagram) + sizeof(struct server_hdr));
+    readlen = ((ackpacket_length * 2) > len * 2) ? (ackpacket_length * 2) : (len * 2);
+    ackPacket = (char *) calloc(1, readlen);
+    success = 0;
     assert(ackPacket);
-    fd_set readSet;
-    int rc = 1;
-    struct timeval timeout;
+    rc = 1;
 
     if (ackPacket) {
+	int flags;
 	struct UDP_datagram *UDP_Hdr = (struct UDP_datagram *)ackPacket;
 	struct server_hdr *hdr = (struct server_hdr *)(UDP_Hdr+1);
 
 	UDP_Hdr = (struct UDP_datagram*) ackPacket;
-	int flags = HEADER_VERSION1;
+	flags = HEADER_VERSION1;
 	if (isEnhanced(stats->common) || isTripTime(stats->common))
 	    flags |= SERVER_HEADER_EXTEND;
 #ifdef HAVE_INT64_T
@@ -948,7 +967,7 @@ void write_UDP_AckFIN (struct TransferInfo *stats, int len) {
 	hdr->extend.IPGsum = htonl(1);
 
 #define TRYCOUNT 10
-	int count = TRYCOUNT;
+	count = TRYCOUNT;
 	while (--count) {
 	    // write data
 #if defined(HAVE_LINUX_FILTER_H) && defined(HAVE_AF_PACKET)
diff --git a/src/Server.cpp b/src/Server.cpp
index 65e56a0..86e785b 100644
--- a/src/Server.cpp
+++ b/src/Server.cpp
@@ -603,7 +603,7 @@ bool Server::InitTrafficLoop (void) {
 	ClientReverseFirstRead();
     }
     if (isTripTime(mSettings)) {
-	if ((abs(now.getSecs() - mSettings->sent_time.tv_sec)) > MAXDIFFTIMESTAMPSECS) {
+	if ((labs(now.getSecs() - mSettings->sent_time.tv_sec)) > MAXDIFFTIMESTAMPSECS) {
 	    unsetTripTime(mSettings);
 	    fprintf(stdout,"WARN: ignore --trip-times because client didn't provide valid start timestamp within %d seconds of now\n", MAXDIFFTIMESTAMPSECS);
 	    mSettings->accept_time.tv_sec = now.getSecs();
diff --git a/src/histogram.c b/src/histogram.c
index 5bb8820..2df448a 100644
--- a/src/histogram.c
+++ b/src/histogram.c
@@ -175,15 +175,16 @@ void histogram_add(struct histogram *to, struct histogram *from) {
 }
 
 void histogram_print(struct histogram *h, double start, double end) {
+    int n = 0, ix, delta, lowerci, upperci, outliercnt, fence_lower, fence_upper, upper3stdev;
+    int running=0;
+    int intervalpopulation, oob_u, oob_l;
+    int outside3fences = 0;
     if (h->final && h->prev) {
 	histogram_clear(h->prev);
     }
     if (!h->prev) {
 	h->prev = histogram_init(h->bincount, h->binwidth, h->offset, h->units, h->ci_lower, h->ci_upper, h->id, h->myname);
     }
-    int n = 0, ix, delta, lowerci, upperci, outliercnt, fence_lower, fence_upper, upper3stdev;
-    int running=0;
-    int intervalpopulation, oob_u, oob_l;
     intervalpopulation = h->populationcnt - h->prev->populationcnt;
     strcpy(h->outbuf, h->myname);
     sprintf(h->outbuf, "[%3d] " IPERFTimeFrmt " sec %s%s%s bin(w=%d%s):cnt(%d)=", h->id, start, end, h->myname, (h->final ? "(f)" : ""), "-PDF:",h->binwidth, ((h->units == 1e3) ? "ms" : "us"), intervalpopulation);
@@ -194,7 +195,6 @@ void histogram_print(struct histogram *h, double start, double end) {
     outliercnt=0;
     fence_lower = 0;
     fence_upper = 0;
-    int outside3fences = 0;
     h->prev->populationcnt = h->populationcnt;
     oob_l = h->cntloweroutofbounds - h->prev->cntloweroutofbounds;
     h->prev->cntloweroutofbounds = h->cntloweroutofbounds;
diff --git a/src/packet_ring.c b/src/packet_ring.c
index 93e7578..f6114e2 100644
--- a/src/packet_ring.c
+++ b/src/packet_ring.c
@@ -56,8 +56,8 @@ Mutex packetringdebug_mutex;
 #endif
 
 struct PacketRing * packetring_init (int count, struct Condition *awake_consumer, struct Condition *awake_producer) {
-    assert(awake_consumer != NULL);
     struct PacketRing *pr = NULL;
+    assert(awake_consumer != NULL);
     if ((pr = (struct PacketRing *) calloc(1, sizeof(struct PacketRing)))) {
         pr->bytes = sizeof(struct PacketRing);
 	pr->data = (struct ReportStruct *) calloc(count, sizeof(struct ReportStruct));
@@ -89,6 +89,7 @@ struct PacketRing * packetring_init (int count, struct Condition *awake_consumer
 }
 
 inline void packetring_enqueue (struct PacketRing *pr, struct ReportStruct *metapacket) {
+    int writeindex;
     while (((pr->producer == pr->maxcount) && (pr->consumer == 0)) || \
 	   ((pr->producer + 1) == pr->consumer)) {
 	// Signal the consumer thread to process a full queue
@@ -114,7 +115,6 @@ inline void packetring_enqueue (struct PacketRing *pr, struct ReportStruct *meta
 	    Condition_Unlock((*(pr->awake_producer)));
 	}
     }
-    int writeindex;
     if ((pr->producer + 1) == pr->maxcount)
 	writeindex = 0;
     else
@@ -126,11 +126,11 @@ inline void packetring_enqueue (struct PacketRing *pr, struct ReportStruct *meta
 }
 
 inline struct ReportStruct *packetring_dequeue (struct PacketRing *pr) {
+    int readindex;
     struct ReportStruct *packet = NULL;
     if (pr->producer == pr->consumer)
 	return NULL;
 
-    int readindex;
     if ((pr->consumer + 1) == pr->maxcount)
 	readindex = 0;
     else
-- 
2.37.3

