From 321c8fcf1563f305c91b0ebd2863b92c999c4d41 Mon Sep 17 00:00:00 2001
From: Nicolas Werner <nicolas.werner@hotmail.de>
Date: Fri, 24 Mar 2023 19:48:47 +0100
Subject: [PATCH 1/4] Fix explicit optional construction on gcc13

---
 src/timeline/EventStore.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/timeline/EventStore.cpp b/src/timeline/EventStore.cpp
index d035d840..2a4d96d0 100644
--- a/src/timeline/EventStore.cpp
+++ b/src/timeline/EventStore.cpp
@@ -654,7 +654,7 @@ EventStore::get(int idx, bool decrypt)
         if (edits_.empty())
             event = cache::client()->getEvent(room_id_, *event_id);
         else
-            event = {edits_.back()};
+            event = mtx::events::collections::TimelineEvent{edits_.back()};
 
         if (!event)
             return nullptr;
-- 
2.37.3


From 4fe18ea455bc3299b5ae0ed97b4395f1661afe15 Mon Sep 17 00:00:00 2001
From: Daniel Weber <weberd@outlook.de>
Date: Tue, 12 Sep 2023 17:32:18 +0000
Subject: [PATCH 2/4] Add Haiku as target

---
 src/notifications/Manager.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/notifications/Manager.h b/src/notifications/Manager.h
index 70a03345..e908575e 100644
--- a/src/notifications/Manager.h
+++ b/src/notifications/Manager.h
@@ -55,7 +55,7 @@ public slots:
 #if defined(NHEKO_DBUS_SYS)
 public:
     void closeNotifications(QString roomId);
-#if defined(Q_OS_LINUX)
+#if defined(Q_OS_HAIKU) || defined(Q_OS_LINUX)
     void closeAllNotifications();
 #endif
 
-- 
2.37.3


From f7f5dd6b8b0854a38a92aba5b9f681a9931fc7f6 Mon Sep 17 00:00:00 2001
From: Daniel Weber <weberd@outlook.de>
Date: Tue, 12 Sep 2023 18:01:12 +0000
Subject: [PATCH 3/4] Set software mode

---
 src/main.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/main.cpp b/src/main.cpp
index 1ecb014d..21bf0001 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -171,6 +171,10 @@ main(int argc, char *argv[])
     }
 #endif
 
+#if defined(Q_OS_HAIKU)
+       qputenv("QT_QUICK_BACKEND", "software");
+#endif
+
     // This is some hacky programming, but it's necessary (AFAIK?) to get the unique config name
     // parsed before the SingleApplication userdata is set.
     QString userdata{QLatin1String("")};
-- 
2.37.3


From 9cda2f89ad6b8639e1782566fb4e5f84cd8087c0 Mon Sep 17 00:00:00 2001
From: Daniel Weber <weberd@outlook.de>
Date: Tue, 12 Sep 2023 20:46:18 +0000
Subject: [PATCH 4/4] Workaround Emoji Font selection

---
 src/UserSettingsPage.cpp | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/src/UserSettingsPage.cpp b/src/UserSettingsPage.cpp
index f1a3858f..e4cbbf58 100644
--- a/src/UserSettingsPage.cpp
+++ b/src/UserSettingsPage.cpp
@@ -1551,7 +1551,7 @@ UserSettingsModel::data(const QModelIndex &index, int role) const
         case Font:
             return fontDb.families();
         case EmojiFont:
-            return fontDb.families(QFontDatabase::WritingSystem::Symbol);
+            return fontDb.families();
         case Ringtone: {
             QStringList l{
               QStringLiteral("Mute"),
@@ -1846,8 +1846,7 @@ UserSettingsModel::setData(const QModelIndex &index, const QVariant &value, int
         }
         case EmojiFont: {
             if (value.userType() == QMetaType::Int) {
-                i->setEmojiFontFamily(
-                  fontDb.families(QFontDatabase::WritingSystem::Symbol).at(value.toInt()));
+                i->setEmojiFontFamily(fontDb.families().at(value.toInt()));
                 return true;
             } else
                 return false;
-- 
2.37.3