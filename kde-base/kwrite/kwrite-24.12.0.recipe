SUMMARY="A text editor by KDE, based on the KDE Frameworks editor component"
DESCRIPTION="KWrite is a simple text editor application, allowing you to edit \
one file at the time per window. As Kate, KWrite uses the editor component \
KatePart.KWrite simply provides the selected editor component with a window \
frame, and lets you open and save documents.

Application Features
* window splitting (horizontal & vertical)
* multi-document interface (MDI)
* plugin: embedded terminal, SQL plugin, build plugin, GDB plugin, Replace in \
Files, and more
* session support

General Features
* encoding support (Unicode and lots of others)
* bi-directional text rendering support
* line ending support (Windows, Unix, Mac), including auto detection
* network transparency (open remote files)
* extensible through scripting

Advanced Editor Features
* bookmarking system (also supported: break points etc.)
* scroll bar marks
* line modification indicators
* line numbers
* code folding

Syntax Highlighting
* highlighting support for more than 250 languages
* bracket matching
* smart on-the-fly spell checking
* highlighting of selected words

Programming Features
* scriptable auto indentation
* smart comment and uncomment handling
* auto completion with argument hints
* vi input mode
* rectangular block selection mode

Search & Replace
* incremental search, also known as “find as you type”
* support for multiline search & replace
* regular expression support
* search & replace in multiple opened files or files on disk

Backup and Restore
* backups on save
* swap files to recover data on system crash
* undo / redo system"
HOMEPAGE="https://www.kde.org/applications/utilities/kwrite/"
COPYRIGHT="2010-2024 KDE Organisation"
LICENSE="GNU LGPL v2"
REVISION="2"
SOURCE_URI="https://download.kde.org/stable/release-service/$portVersion/src/kate-$portVersion.tar.xz"
CHECKSUM_SHA256="a5926a0d85c69ca2cc34d87e567501e795e95050e16f896e39cd8cac4ced2348"
SOURCE_DIR="kate-$portVersion"
PATCHES="kwrite-$portVersion.patchset"
ADDITIONAL_FILES="kwrite.rdef.in"

ARCHITECTURES="all !x86_gcc2"
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	kwrite$secondaryArchSuffix = $portVersion
	cmd:kwrite$secondaryArchSuffix = $portVersion
	lib:libkateprivate$secondaryArchSuffix = $portVersion
	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libGL$secondaryArchSuffix
	# KF6
	lib:libKF6ColorScheme$secondaryArchSuffix
	lib:libKF6Completion$secondaryArchSuffix
	lib:libKF6ConfigCore$secondaryArchSuffix
	lib:libKF6ConfigWidgets$secondaryArchSuffix
	lib:libKF6CoreAddons$secondaryArchSuffix
	lib:libKF6Crash$secondaryArchSuffix
	lib:libKF6I18n$secondaryArchSuffix
	lib:libKF6IconThemes$secondaryArchSuffix
	lib:libKF6JobWidgets$secondaryArchSuffix
	lib:libKF6KIOCore$secondaryArchSuffix
	lib:libKF6Parts$secondaryArchSuffix
	lib:libKF6Service$secondaryArchSuffix
	lib:libKF6Solid$secondaryArchSuffix
	lib:libKF6SyntaxHighlighting$secondaryArchSuffix
	lib:libKF6TextEditor$secondaryArchSuffix
	lib:libKF6UserFeedbackCore$secondaryArchSuffix
	lib:libKF6WidgetsAddons$secondaryArchSuffix
	lib:libKF6WindowSystem$secondaryArchSuffix
	lib:libKF6XmlGui$secondaryArchSuffix
	# Qt6
	lib:libQt6Core$secondaryArchSuffix
	lib:libQt6Gui$secondaryArchSuffix
	lib:libQt6Network$secondaryArchSuffix
	lib:libQt6Widgets$secondaryArchSuffix
	lib:libQt6Xml$secondaryArchSuffix
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	# KF6
	extra_cmake_modules$secondaryArchSuffix
	devel:libKF6CoreAddons$secondaryArchSuffix
	devel:libKF6Crash$secondaryArchSuffix
	devel:libKF6GuiAddons$secondaryArchSuffix
	devel:libKF6I18n$secondaryArchSuffix
	devel:libKF6IconThemes$secondaryArchSuffix
	devel:libKF6TextEditor$secondaryArchSuffix
	devel:libKF6UserFeedbackCore$secondaryArchSuffix
	# Qt6
	devel:libQt6Core$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:cmake
	cmd:find
	cmd:g++$secondaryArchSuffix
	cmd:make
	cmd:msgfmt$secondaryArchSuffix
	cmd:msgmerge$secondaryArchSuffix
	cmd:pkg_config$secondaryArchSuffix
	"

BUILD()
{
	cmake -B build -S . -DCMAKE_BUILD_TYPE=Release \
		$cmakeDirArgs \
		-DECM_DIR=/system/data/cmake/Modules/ECM/cmake \
		-DBUILD_kate=FALSE \
		-DBUILD_addons=FALSE \
		-DBUILD_TESTING=OFF \
		-Wno-dev

	make -C build $jobArgs
}

INSTALL()
{
	make -C build install

	# cleanup
	rm -rf $dataDir/{applications,icons,metainfo}
	find $dataDir/locale -type f ! -name 'kwrite.mo' -delete

	local APP_SIGNATURE="application/x-vnd.Qt6-kwrite"
	local MAJOR="`echo "$portVersion" | cut -d. -f1`"
	local MIDDLE="`echo "$portVersion" | cut -d. -f2`"
	local MINOR="`echo "$portVersion" | cut -d. -f3`"
	local LONG_INFO="$SUMMARY"
	sed \
		-e "s|@APP_SIGNATURE@|$APP_SIGNATURE|" \
		-e "s|@MAJOR@|$MAJOR|" \
		-e "s|@MIDDLE@|$MIDDLE|" \
		-e "s|@MINOR@|$MINOR|" \
		-e "s|@LONG_INFO@|$LONG_INFO|" \
		$portDir/additional-files/kwrite.rdef.in > kwrite.rdef

	addResourcesToBinaries kwrite.rdef $binDir/kwrite
	addAppDeskbarSymlink $binDir/kwrite Kwrite
}

TEST()
{
	ctest --test-dir build --output-on-failure
}
